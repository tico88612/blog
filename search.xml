<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>a625. 5. Overhanging Cards</title>
      <link href="/2018/08/30/zj-a625/"/>
      <url>/2018/08/30/zj-a625/</url>
      <content type="html"><![CDATA[<h2 id="題目-Problem"><a href="#題目-Problem" class="headerlink" title="題目 Problem"></a>題目 Problem</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=a625" target="_blank" rel="noopener">題目連結：https://zerojudge.tw/ShowProblem?problemid=a625</a><br><a id="more"></a></p><h3 id="敘述-Description"><a href="#敘述-Description" class="headerlink" title="敘述 Description"></a>敘述 Description</h3><p>你可以把一疊的卡片凸出桌子的邊緣多遠呢？如果你有一張卡，你最大可以凸出卡片長度的一半。有兩張卡時，你可以把上面那張的一半凸出下面的那張，而下面的那張則有三分之一凸出桌子的邊緣，總凸出長度則為$ 1/2 + 1/3 = 5/6 $張卡片長度。總之，你可以把$ n $張卡片凸出$ 1/2 + 1/3 + 1/4 + … + 1/(n+1) $張卡片的長度，其中最上面那張凸出$ 1/2 $於第二張的外面，第二張凸出$ 1/3 $於第三張的外面，第三張凸出$ 1/4$，以此類推，最底下那張則凸出$ 1/(n+1)$。如下圖所示。<br><img src="image.jpg" alt=""></p><h3 id="輸入-Input"><a href="#輸入-Input" class="headerlink" title="輸入 Input"></a>輸入 Input</h3><p>每筆測資一行，含有一個正浮點數 c (代表所要凸出的總長度)，其值最小為 0.01，最大為 5.20；這個數含有三位數字。</p><h3 id="輸出-Output"><a href="#輸出-Output" class="headerlink" title="輸出 Output"></a>輸出 Output</h3><p>輸出要達成所需的凸出長度最少需要幾張卡片。請參照範例輸出的格式。</p><h3 id="範例輸入-Sample-Input"><a href="#範例輸入-Sample-Input" class="headerlink" title="範例輸入 Sample Input"></a>範例輸入 Sample Input</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.00</span><br><span class="line">3.71</span><br><span class="line">0.04</span><br><span class="line">5.19</span><br></pre></td></tr></table></figure><h3 id="範例輸出-Sample-Output"><a href="#範例輸出-Sample-Output" class="headerlink" title="範例輸出 Sample Output"></a>範例輸出 Sample Output</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3 card(s)</span><br><span class="line">61 card(s)</span><br><span class="line">1 card(s)</span><br><span class="line">273 card(s)</span><br></pre></td></tr></table></figure><h3 id="提示-Hint"><a href="#提示-Hint" class="headerlink" title="提示 Hint"></a>提示 Hint</h3><h2 id="題解-Solution"><a href="#題解-Solution" class="headerlink" title="題解 Solution"></a>題解 Solution</h2><p>$1$張卡片長度為$1/2$<br>$2$張卡片長度為$1/2+1/3$<br>$3$張卡片長度為$1/2+1/3+1/4$<br>$…$以此類推$…$<br>$n$張卡片長度為$1/2+1/3+1/4+…+1/(n+1)$<br>先建表，最大卡片數頂多$276$張<br>最後再用二分搜尋找卡片數就好</p><h3 id="程式碼-Accepted-Code"><a href="#程式碼-Accepted-Code" class="headerlink" title="程式碼 Accepted Code"></a>程式碼 Accepted Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _ ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">_</span><br><span class="line"><span class="keyword">double</span> query[<span class="number">277</span>]=&#123;<span class="number">0</span>&#125;,a=<span class="number">0.0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;a&lt;=<span class="number">5.20</span>;i++)&#123;</span><br><span class="line">a+=(<span class="number">1.0</span>/(i+<span class="number">1</span>));</span><br><span class="line">query[i]=a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">double</span> enter;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;enter)&#123;</span><br><span class="line"><span class="keyword">int</span> l=<span class="number">0</span>,r=<span class="number">277</span>;</span><br><span class="line"><span class="keyword">while</span>(l+<span class="number">1</span>&lt;r)&#123;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(enter&gt;query[mid])&#123;</span><br><span class="line">l=mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">r=mid;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;l+<span class="number">1</span>&lt;&lt;<span class="string">" card(s)"</span>&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="後記-Afterword"><a href="#後記-Afterword" class="headerlink" title="後記 Afterword"></a>後記 Afterword</h2><p>這一題在 ICPC Live Archive 找得到<br>題目代碼：<a href="https://icpcarchive.ecs.baylor.edu/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=295" target="_blank" rel="noopener">2294 - Hangover</a><br>ZeroJudge 拿到 AC 之後<br>就到 ICPC Live Archive 繳交，但直接被 WA 掉<br>我還以為是我二分搜寫錯<br>但仔細看了它們的 Input 後<br>才知道程式輸入$0.00$才會結束<br>改完這題就 AC 了</p>]]></content>
      
      <categories>
          
          <category> 解題區 </category>
          
          <category> 解題報告書 - ZeroJudge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 建表 </tag>
            
            <tag> 二分搜 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>c700. 壞掉的隊列(queue)</title>
      <link href="/2018/08/29/zj-c700/"/>
      <url>/2018/08/29/zj-c700/</url>
      <content type="html"><![CDATA[<h2 id="題目-Problem"><a href="#題目-Problem" class="headerlink" title="題目 Problem"></a>題目 Problem</h2><p><a href="https://www.zerojudge.tw/ShowProblem?problemid=c700" target="_blank" rel="noopener">題目連結：https://www.zerojudge.tw/ShowProblem?problemid=c700</a><br><a id="more"></a></p><h3 id="敘述-Description"><a href="#敘述-Description" class="headerlink" title="敘述 Description"></a>敘述 Description</h3><p>「測資中有若干行輸入，請你實作 queue 的幾種操作：</p><p>push $X(0≤X&lt;2^{32})$: 將 $X$ 加入隊列</p><p>pop: 輸出隊列最前方的數字並刪除，你可以假設此時隊列不是空的」 </p><p>小W本來想隨便寫寫交差了事，卻發現 STL 的 queue 壞了！</p><p>再看看題目，原來底下附註一行小字：請用兩個 stack 完成這題。</p><p>於是小W希望你能用以下代號寫一張紙條告訴他該怎麼做。</p><p>1: 讀入 push X 並將 X 放到堆疊一</p><p>2: 讀入 push X 並將 X 放到堆疊二</p><p>3: 讀入 pop ，將堆疊一頂端的元素輸出並刪除</p><p>4: 讀入 pop ，將堆疊二頂端的元素輸出並刪除</p><p>5: 將堆疊一頂端的元素取出並放至堆疊二</p><p>6: 將堆疊二頂端的元素取出並放至堆疊一</p><p>如果取出元素時堆疊為空或者讀入 push/pop 的順序與輸入測資不符，你會害小W拿到一個WA。</p><h3 id="輸入-Input"><a href="#輸入-Input" class="headerlink" title="輸入 Input"></a>輸入 Input</h3><p>見題目和範例。</p><h3 id="輸出-Output"><a href="#輸出-Output" class="headerlink" title="輸出 Output"></a>輸出 Output</h3><p>輸出一行你要傳給小W的內容。</p><h3 id="範例輸入-Sample-Input"><a href="#範例輸入-Sample-Input" class="headerlink" title="範例輸入 Sample Input"></a>範例輸入 Sample Input</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">push 111</span><br><span class="line">push 222</span><br><span class="line">pop</span><br><span class="line">pop</span><br></pre></td></tr></table></figure><h3 id="範例輸出-Sample-Output"><a href="#範例輸出-Sample-Output" class="headerlink" title="範例輸出 Sample Output"></a>範例輸出 Sample Output</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">範例輸出一:</span><br><span class="line">1234</span><br><span class="line"></span><br><span class="line">範例輸出二:</span><br><span class="line">12544</span><br><span class="line"></span><br><span class="line">範例輸出三:</span><br><span class="line">1143</span><br><span class="line"></span><br><span class="line">範例輸出四:</span><br><span class="line">1313</span><br><span class="line"></span><br><span class="line">範例輸出五:</span><br><span class="line">1133</span><br></pre></td></tr></table></figure><h3 id="提示-Hint"><a href="#提示-Hint" class="headerlink" title="提示 Hint"></a>提示 Hint</h3><p>輸入至多 100000 行。</p><p>以範例輸入而言，範例輸出一、二會拿到AC。</p><p>範例輸出三會拿到WA，因為操作4時堆疊二是空的。</p><p>範例輸出四也會拿到WA，因為輸入順序是push-&gt;push-&gt;pop-&gt;pop，但是1313的操作分別為push-&gt;pop-&gt;push-&gt;pop。</p><p>範例輸出五的操作過程完全合法，但依據先進先出的原則，111應該比222早離開queue，若以1133的方式操作，222將比111早輸出，所以會拿到WA。</p><h2 id="題解-Solution"><a href="#題解-Solution" class="headerlink" title="題解 Solution"></a>題解 Solution</h2><p>第一篇解題報告書就給這題啦！</p><p><a href="https://www.hackerrank.com/challenges/queue-using-two-stacks/problem" target="_blank" rel="noopener">Hackerrank</a> 可以找到這個問題（這題就是要強制你使用 Stack）<br>實作 Queue 需要用到兩個 Stack<br>分別命名為$S1$跟$S2$</p><p>$S1$用來記錄輸入的東西<br>$S2$就是把$S1$的內容顛倒過來</p><p>$push$的時候先放入$S1$裡面<br>$pop$的時候先檢查$S2$有沒有東西</p><p>如果有，$S2$的頂端$pop$掉<br>如果沒有，先$S1$<strong>所有內容</strong>$pop$到$S2$，再讓$S2$的頂端$pop$掉</p><p>了解怎麼用 Stack 實作 Queue 就可以回到這題</p><hr><p>依照上面的做法，可以使用代號$1,4,5$的組合或$2,3,6$的組合來完成這題<br>並且用$2$個整數紀錄$2$個 Stack 的內容數量<br>分別命名為$x_1$跟$x_2$</p><p>如果要$push$，就輸出$1$，把$x_1+1$<br>如果要$pop$，就先檢查$x_2$是否大於$0$</p><p>如果有，就輸出$4$，把$x_2-1$<br>如果沒有，先輸出$x_1$個$5$，讓$x_2$加上$x_1$，並且把$x_1$歸零，再輸出$4$，把$x_2-1$</p><p>這樣就可以來寫 Code 啦！</p><h3 id="程式碼-Accepted-Code"><a href="#程式碼-Accepted-Code" class="headerlink" title="程式碼 Accepted Code"></a>程式碼 Accepted Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _ ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">_</span><br><span class="line"><span class="built_in">string</span> enter;</span><br><span class="line"><span class="keyword">int</span> total1=<span class="number">0</span>,total2=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;enter)&#123;</span><br><span class="line"><span class="keyword">if</span>(enter==<span class="string">"push"</span>)&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> a;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line">total1++;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(total2)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="number">4</span>;</span><br><span class="line">total2--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;total1;i++)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line">total2+=total1;</span><br><span class="line"><span class="keyword">if</span>(total2)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="number">4</span>;</span><br><span class="line">total2--;</span><br><span class="line">&#125;</span><br><span class="line">total1=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="後記-Afterword"><a href="#後記-Afterword" class="headerlink" title="後記 Afterword"></a>後記 Afterword</h2><p>這題有沒有其他解法？<br>這題是 Special Judge，應該是有吧，但……我沒有想到<br>上面這個解法是算簡單啦<br>如果有更好的解法，我還會再寫上去啦！</p>]]></content>
      
      <categories>
          
          <category> 解題區 </category>
          
          <category> 解題報告書 - ZeroJudge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Stack </tag>
            
            <tag> Queue </tag>
            
            <tag> Special Judge </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello Hexo! Test By Jerry Yang</title>
      <link href="/2018/08/26/hello-world/"/>
      <url>/2018/08/26/hello-world/</url>
      <content type="html"><![CDATA[<p>先恭喜亞運台灣 🇹🇼 奪得金牌<br><a href="https://www.net-chinese.com.tw/nc/" target="_blank" rel="noopener">網路中文</a> 也很大方的免費讓人註冊.tw<br><a id="more"></a><br>於是，這個 <a href="https://blog.yangjerry.tw">Blog</a> 就誕生了<br>第一次用 <a href="https://hexo.io/zh-tw/" target="_blank" rel="noopener">Hexo</a> 架設<br>用 Markdown 來寫寫看瑣碎事</p><p>首頁嘛……晚點再把坑補上<br>寫到這裡就這樣吧！之後再補</p>]]></content>
      
      <categories>
          
          <category> Test </category>
          
      </categories>
      
      
    </entry>
    
  
  
</search>
