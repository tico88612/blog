<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Dev-C++ 不就是個很古老的 IDE？蛤？它又更新了？</title>
      <link href="/2020/11/25/devcpp-6/"/>
      <url>/2020/11/25/devcpp-6/</url>
      
        <content type="html"><![CDATA[<p>寫這篇文章的意義是幫忙把新版的 Dev-C++ 推出去，給更多人知道。</p><blockquote><p>這一篇，獻給愛用 Dev-C++ 的你。</p></blockquote><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>依如往常的滑著電腦 Facebook，社團依舊充斥著廢文（不開玩笑，平常就是 IDE / Compiler 都搞不清楚地在亂吵）</p><p>唯有少數幾篇文，可以吸引到我的目光，講到 C 語言總會講到 Dev-C++。<br><img src="question.jpg" srcset="/img/loading.gif" alt="大略長這樣"></p><p>滑了一下留言<br><img src="comment.jpg" srcset="/img/loading.gif" alt></p><p><strong>給我等一下，Dev-C++ 2020？我怎麼不知道！</strong><br><img src="waitasec.jpg" srcset="/img/loading.gif" alt></p><p>如果你直接去 Google <code>Dev-C++ 2020</code> 估計是找不到你要的結果。<br>後來去維基百科才知道 Dev-C++ 最新版本的 Source Code 位置。</p><h2 id="新版-Dev-C-介紹"><a href="#新版-Dev-C-介紹" class="headerlink" title="新版 Dev-C++ 介紹"></a>新版 Dev-C++ 介紹</h2><p><a href="https://www.embarcadero.com/" target="_blank" rel="noopener">維護公司：Embarcadero</a><br><a href="https://github.com/Embarcadero/Dev-Cpp" target="_blank" rel="noopener">GitHub 連結: https://github.com/Embarcadero/Dev-Cpp</a><br><a href="https://github.com/Embarcadero/Dev-Cpp/releases" target="_blank" rel="noopener">GitHub Release: https://github.com/Embarcadero/Dev-Cpp/releases</a></p><p>其實他也不叫做 Dev-C++ 2020，負責這項專案的公司也直接命名為 <strong>Embarcadero Dev-C++</strong></p><p>這維護公司來頭也不小啊，有公司接手維護這個專案真的是一個奇葩之事吧！</p><h3 id="編譯器-Compiler"><a href="#編譯器-Compiler" class="headerlink" title="編譯器 Compiler"></a>編譯器 Compiler</h3><p>目前選用 TDM-GCC 9.2.0，直接從 4.9.2 跳上去</p><p>選項也支援新版標準 C++ 20，之前手動更新編譯器都需要手動輸入參數才能換成新版標準。</p><p><img src="cpp17.png" srcset="/img/loading.gif" alt></p><h3 id="外觀介面-Appearance"><a href="#外觀介面-Appearance" class="headerlink" title="外觀介面 Appearance"></a>外觀介面 Appearance</h3><p>經典介面從 4.9.9.2 到 5.11 版本基本上都長這樣，能去改變外觀的選項比較少</p><p><img src="classic.png" srcset="/img/loading.gif" alt></p><p>最新版本他可以直接讓你更改樣式了</p><p><img src="env_opt.png" srcset="/img/loading.gif" alt></p><p>選取環境選項（Environment Options）$\rightarrow$ 外觀（Appearance）<br>就可以改成你想看到的主題（Theme）了。</p><p><img src="material.png" srcset="/img/loading.gif" alt></p><blockquote><p><strong>等等，你真的是 Dev-C++ 嗎？</strong></p></blockquote><h3 id="終端機-Command-PowerShell"><a href="#終端機-Command-PowerShell" class="headerlink" title="終端機 Command / PowerShell"></a>終端機 Command / PowerShell</h3><p>都已經 2020 年了，把 IDE 跟 Terminal 放在一起已經算是標準配備了吧！<br>現在也終於可以囉！</p><p>最底下的選項也多了一個 Console 選項<br>點下後，下面視窗也有兩個按鈕分別為 <code>CMD</code> 跟 <code>PS</code></p><p><code>CMD</code> 指的是 Windows 傳統的 Command Line<br><code>PS</code> 指的是 Windows 最新的 PowerShell</p><p>只要點一下，就可以打開你想要的 Console 囉！<br>不要的 Console 也可以直接右鍵關閉就好</p><p><img src="powershell.png" srcset="/img/loading.gif" alt></p><h3 id="隱藏問題-Issue"><a href="#隱藏問題-Issue" class="headerlink" title="隱藏問題 Issue"></a>隱藏問題 Issue</h3><p>安裝完成後，先不要選擇「繁體中文」，都先選擇「英文」<br>目前我在 Windows 10 的新版 Dev-C++ v6.2 跑繁體中文，會出現亂碼<br>這個問題暫時還沒修復，如果是新手，請暫時先忍一忍吧</p><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>我想，這也是目前開源專案裡面最成功的例子了吧<br>三個大版本更新，全都是不同人開發、維護<br>希望這個開源精神，也有人能繼續傳下去</p><p>對著三個版本 Dev-C++ 的開發者們致上最高的 Respect！</p><p>目前我們就繼續期待著 Embarcadero Dev-C++ 會帶給我們什麼樣驚喜吧！</p><h3 id="廢文附帶廢圖（？）"><a href="#廢文附帶廢圖（？）" class="headerlink" title="廢文附帶廢圖（？）"></a>廢文附帶廢圖（？）</h3><p>從今天起，Embarcadero 就是我大哥，誰說 Embarcadero 不好，對不起，我們不認識（Ｘ）</p><p><img src="boss.jpg" srcset="/img/loading.gif" alt></p>]]></content>
      
      
      <categories>
          
          <category> 程式 </category>
          
          <category> Dev-C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程式 </tag>
            
            <tag> Dev-C++ </tag>
            
            <tag> 更新 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>社群回答被刪除紀錄區</title>
      <link href="/2020/09/04/group-answer/"/>
      <url>/2020/09/04/group-answer/</url>
      
        <content type="html"><![CDATA[<p>我一直很受不了社群有些人就是問完答案就刪除那種。</p><a id="more"></a><p>你在社群得到答案，多數回答者會希望把答案留下來。<br>可是提問的那些人，不管用什麼理由刪除貼文，我都會覺得很不合理。</p><ul><li>避免洗版？：你可以最多選擇關閉留言，你刪除文章直接損失社群答案，我只會覺得你很自私。</li><li>機密問題？：如果是機密問題，那當初就不應該貼上來。</li></ul><p>因為這裡是個討論社團，<strong>不是你的個人解答區</strong>。</p><p>我決定之後要來反擊那些問完答案就刪除的那些人。</p><p>如果你看到我回答了，基本上我回答完，一定先截圖。<br>我通常會追蹤問題好幾天，我想到就會去翻一下。</p><p>如果你刪文了，可能你的發問跟答案就會出現在這裡 OwO。<br>同時我也會紀錄：</p><ul><li>發問者公開名稱</li><li>發問文章</li><li>發問時間</li><li>我回覆的答案</li><li>我回覆的時間</li></ul><p>我之後再想我要在底下更新還是另外再寫一篇文章會比較好，預計可能都是在這篇底下更新。<br>暑假發生的事之後再來慢慢寫。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程式社群 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>關於 NCPU 2020 我想說的是......</title>
      <link href="/2020/07/16/ncpu-2020-negative/"/>
      <url>/2020/07/16/ncpu-2020-negative/</url>
      
        <content type="html"><![CDATA[<p>有點想說這次競賽的不合理之處</p><a id="more"></a><p>本次競賽 Rank 10 / 50</p><p>名次也在 20 %，但整場只覺得他們到底到幹嘛？</p><h2 id="1-更換比賽環境"><a href="#1-更換比賽環境" class="headerlink" title="1. 更換比賽環境"></a>1. 更換比賽環境</h2><p>比賽前一天我還在確認比賽環境<br>下圖是比賽後一天才看到被改的<br><img src="web-env.png" srcset="/img/loading.gif" alt></p><p>改用瘋狂程設？也就是說環境改成 Windows？<br>為什麼這種重大改變事項沒有發給全部的參賽者？</p><p>反正那些 IDE 也都給假的，用過「瘋狂程設」都知道那是佔滿全部螢幕</p><p>比賽前 20 分鐘裁判才來教室講解說<br>「我們本來就打算採用『瘋狂程設』」</p><p>比賽當天上午兩點（對，AM 2:00）也才收到</p><blockquote><p>各位參賽的師長與同學大家好:<br>根據疾病管制署社交距離注意事項，建議人與人之間，在室內應保持1.5公尺、室外保持1公尺之距離，若雙方正確佩戴口罩，則可豁免社交距離，但處於擁擠、密閉之場所仍應佩戴口罩。</p><p>請各位參賽的師長與同學進入競賽場地，請盡量佩戴口罩。如果有發燒情況，請勿參賽，其餘成員仍可出賽。<br>感謝大家的參與及配合。</p></blockquote><p>只有通知這件事？在 AM 2:00？通知給誰？</p><h2 id="2-Judge-環境的配置，裁判不見人影"><a href="#2-Judge-環境的配置，裁判不見人影" class="headerlink" title="2. Judge 環境的配置，裁判不見人影"></a>2. Judge 環境的配置，裁判不見人影</h2><p>我在檢測環境時間，也要確保我設定參數跟 Judge 環境參數一樣<br>（就是語言標準、優化參數那類的）<br>那邊工作人員感覺也是一臉滿頭問號<br>還在回答我説：「用 Java 就要用 Java 程式編譯」<br>不然我會拿 Python 拿去給 C++ 編譯嗎？= =</p><p>某點來說，我不會怪工作人員懂不懂<br>我想講的是裁判問題<br>工作人員最後只好回應我：「裁判等等會過來講解比賽環境」</p><p>但以備萬一，只好拿手機找 Code 慢慢測試環境</p><p>不過到最後，等到 11 點，檢測環境結束，我還是看不到裁判人影。</p><p>（也聽說也只有在幾間比賽教室講解）</p><p>欸不是，裁判在幹嘛？</p><h2 id="3-其餘瑣碎事"><a href="#3-其餘瑣碎事" class="headerlink" title="3. 其餘瑣碎事"></a>3. 其餘瑣碎事</h2><p>個人覺得不太大的問題，只是就觀感問題</p><ol><li>自己拿舉手拿氣球（我真的第一次遇到）</li><li>位置安排不太良好，五個一排，這樣空間很多都浪費</li><li>宣傳比賽？我自己搜尋我才知道要辦比賽</li><li>得獎只有前三名拍照？</li></ol><p>有些人好像有提到比賽場外問題，不過因為我沒有去外面吃點心，所以不知道什麼情況</p><h2 id="4-瘋狂程設問題"><a href="#4-瘋狂程設問題" class="headerlink" title="4. 瘋狂程設問題"></a>4. 瘋狂程設問題</h2><p>賽中有程式寫爛了，我也不熟悉「瘋狂程設」<br>那時候也不知道我寫到 <code>Runtime Error</code></p><p>Debug 輸出半天才知道 <code>Runtime Error</code> 不會輸出 = =<br>就是為了這點折騰很久……</p><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>這次參賽體驗實在是差到不行<br>第 10 屆比賽，ㄏ，我只差點還沒把未消化的食物吐出來</p><p>有多少學生為了好好比賽拼命練習…<br>然而主辦方只想草草了事…</p><p>連比賽都辦不好還想競爭啊！洗洗睡吧！<br>私立大學辦比賽辦成這樣，只不過是一堆笑話罷了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> NCPU </tag>
            
            <tag> NCPU 2020 </tag>
            
            <tag> ICPC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jerry Yang&#39;s Blog X 純靠北工程師</title>
      <link href="/2020/06/26/jerry-and-init-kaobeiengineer/"/>
      <url>/2020/06/26/jerry-and-init-kaobeiengineer/</url>
      
        <content type="html"><![CDATA[<p>嗨！大家好，我是這個 Blog 版主 Jerry Yang</p><p>為了提高文章<del>還有我的廢文</del>的能見度</p><a id="more"></a><p><strong>我決定要在純靠北工程師的共同協作 Blog 上發文啦！</strong></p><p>目前會發上去的應該只有技術文、分享文之類的</p><p>感想、生活、解題之類目前還只會放在這裡</p><p>一方面，我目前是「純靠北工程師 iOS」開發者</p><blockquote><p>只是一直把進度持續咕咕咕</p></blockquote><p>「純靠北工程師 iOS」也是開發過程筆記也會放在上面</p><blockquote><p>如果我有時間寫的話</p></blockquote><p>以我目前更新頻率來說，大約兩個月兩篇文章<br>不過「純靠北工程師 Blog」我只會分享技術文<br>因此，更新頻率應該會很慢</p><p>目前第一篇主題也想好了，類別是人工智慧的演算法<br>會想寫主要是因為中文資料過少（但英文資料其實也不多）<br>把自己想法分享出去，也歡迎更多高手來跟我討論。</p><p>這是我在「純靠北工程師 Blog」的作者<a href="https://init-engineer.github.io/authors/tico88612/" target="_blank" rel="noopener">連結</a></p><p><a href="https://init-engineer.github.io/authors/tico88612/" target="_blank" rel="noopener">https://init-engineer.github.io/authors/tico88612/</a></p><p>然後，我最近也把 LikeCoin 加入我的 Blog<br>喜歡我的文章記得幫我按多一點的 LikeCoin<br>就這樣，ㄅㄅ</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 純靠北工程師 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>關於 Undefined Behavior 這件事...</title>
      <link href="/2020/06/02/undefined-behavior-in-c/"/>
      <url>/2020/06/02/undefined-behavior-in-c/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本篇文章我在以前的 Blogspot 有寫過，不過沒什麼點閱率 QAQ<br>現在好不容易這裡有一些觀看<br>再加上前陣子也有看到 Undefined Behavior 寫法被討論<br>我就把舊文章移植過來，順便把語病、說法做個修正</p></blockquote><p>前幾天在看FB的文章時，看到了一篇貼文</p><a id="more"></a><p><img src="problem.jpg" srcset="/img/loading.gif" alt></p><blockquote><p>第八題不會有太大的問題 6*6*6=216<br>第九題，答案是多少？</p></blockquote><p>那篇貼文討論蠻熱烈的～（可是這讓我有點擔心……）<br>一般人第一個直覺是把++n算完後代入x，就會變成6*6*6=216，可是沒有在選項內……？<br>那就來執行一次看看吧</p><p>統一以這份 Code 執行</p><div class="hljs"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> CUBE(x) x*x*x</span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">int</span> n = <span class="hljs-number">5</span>;    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, CUBE(++n));    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></div><p>用兩個較主流的編譯器，GNU G++ 跟 Clang（MSVC++ 表示：…）</p><h2 id="GNU-G"><a href="#GNU-G" class="headerlink" title="GNU G++"></a>GNU G++</h2><blockquote><p>編譯參數：g++ -Wall -O2 -std=c++14 a.cpp</p></blockquote><p><img src="gnu.png" srcset="/img/loading.gif" alt></p><p>輸出結果 392</p><p>那第九題答案就是 (D)，真相大白<br>.<br>.<br>.<br>.<br>.<br>.<br>答案真的那麼簡單？來看看 <code>Clang</code> 結果吧！</p><h2 id="Clang"><a href="#Clang" class="headerlink" title="Clang"></a>Clang</h2><blockquote><p>編譯參數：clang -Wall -O2 -std=c++14 a.cpp</p></blockquote><p><img src="clang.png" srcset="/img/loading.gif" alt></p><p>等一下！竟然是 336？</p><p>這個就是所謂的 UB（Undefined Behavior）未定義行為<br>照理說，同個語言，不同編譯器，執行結果一定要一樣</p><p>這個跟運算的優先順序有點關係，<a href="https://zh.wikipedia.org/wiki/C%E5%92%8CC%2B%2B%E9%81%8B%E7%AE%97%E5%AD%90" target="_blank" rel="noopener">每個運算子在 C/C++ 的優先順序</a><br>這有點像是遊戲規則，大規則方向有訂好</p><p>但是有些規則並沒有規定誰先誰後<br>自己編譯器就自己規定，反正只要照著大方向就好</p><p>像是 GNU G++ 的結果：</p><p>第一個數字 ++N 確實變成 $6$<br>乘法優先運算子低<br><strong>把 $N$ 排入等待運算</strong><br>第二個數字又把 $N$ 加上 $1$<br>第一個數字被連帶影響<br>第一個跟第二個數字相乘就變成 $7 \times 7 = 49$<br>把 $49$ 排入等待運算<br>第三個數字又把 $N$ 加上 $1$<br>$N$ 變成 $8$<br>$49 \times 8 = 392$</p><blockquote><p>以上為對 GNU G++ 的個人見解</p></blockquote><p>Clang 結果：</p><p>第一個數字 ++N 確實變成 $6$<br>乘法優先運算子低<br><strong>把 $6$ 排入等待運算</strong><br>第二個數字又把 $N$ 加上 $1$<br>第一個跟第二個數字相乘就變成 $6 \times 7 = 42$<br>把 $42$ 排入等待運算<br>第三個數字又把 $N$ 加上 $1$<br>$N$ 變成 $8$<br>$42 \times 8 = 336$</p><blockquote><p>以上為對 Clang 的個人見解</p></blockquote><p>以上結果其實沒有違反「運算子的優先順序」<br>但！這是未定義行為，真的不需要對他細節作法作討論<br>程式編譯經過優化後，也有可能自動幫你修改過程<br>未定義行為結果就可能會因此不同</p><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>聽網路上說，大學教授其實出蠻多這種題目的（還好我的科系沒有考這種東西），討論這種題目基本上沒有什麼意義，錯誤的定義上討論出的結果，也只會是錯誤的。</p><p>不過我也有去找教授討論過，他上課也說過，同一個運算式，不要使用「遞增遞減運算子（Ex.i++、++i、i–、–i）」超過兩個以上，不然會發生一些<strong>不可預期</strong>的錯誤。</p><p>UB（Undefined Behavior）的例子還有很多，發生的情況不一定是執行結果不一樣</p><p>希望不要再出這種 Code 殘害學生，也不需要去討論這種東西<br>只要告訴他：「這是 UB（Undefined Behavior）未定義行為，不需要去多做任何討論。」</p>]]></content>
      
      
      <categories>
          
          <category> 程式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Undefined Behavior </tag>
            
            <tag> UB </tag>
            
            <tag> 運算子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ITSA 基礎題庫 —— 題目17. 英文斷詞</title>
      <link href="/2020/06/01/itsa-basic-17/"/>
      <url>/2020/06/01/itsa-basic-17/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-Problem"><a href="#題目-Problem" class="headerlink" title="題目 Problem"></a>題目 Problem</h2><p><a href="https://e-tutor.itsa.org.tw/e-Tutor/mod/programming/view.php?a=15924" target="_blank" rel="noopener">題目連結：https://e-tutor.itsa.org.tw/e-Tutor/mod/programming/view.php?a=15924</a></p><a id="more"></a><h3 id="敘述-Description"><a href="#敘述-Description" class="headerlink" title="敘述 Description"></a>敘述 Description</h3><p>斷詞在自然語言的研究上是個很重要的步驟，主要就是將關鍵字從句子中斷出，英文的斷詞較為簡單，就根據句子中的空格將英文字隔開。</p><h3 id="輸入-Input"><a href="#輸入-Input" class="headerlink" title="輸入 Input"></a>輸入 Input</h3><p>輸入一句英文敘述句。 字元數 $\leq 1000$。</p><h3 id="輸出-Output"><a href="#輸出-Output" class="headerlink" title="輸出 Output"></a>輸出 Output</h3><p>將輸入的句子進行斷詞，將斷出的關鍵字依照句子中的出現排序列印出。全部轉成小寫，列印出的關鍵字不得重複，關鍵字間以一個空格隔開，最後一個關鍵字後面進行換行。例如輸入 How do you do ，則輸出 how do you 。</p><h3 id="範例輸入-Sample-Input"><a href="#範例輸入-Sample-Input" class="headerlink" title="範例輸入 Sample Input"></a>範例輸入 Sample Input</h3><div class="hljs"><pre><code class="hljs plain">How do you do</code></pre></div><h3 id="範例輸出-Sample-Output"><a href="#範例輸出-Sample-Output" class="headerlink" title="範例輸出 Sample Output"></a>範例輸出 Sample Output</h3><div class="hljs"><pre><code class="hljs plain">how do you</code></pre></div><h3 id="提示-Hint"><a href="#提示-Hint" class="headerlink" title="提示 Hint"></a>提示 Hint</h3><h2 id="題解-Solution"><a href="#題解-Solution" class="headerlink" title="題解 Solution"></a>題解 Solution</h2><p>C++ 題解程式還蠻多的，我來寫個 C 語言能解開的版本</p><p>C 語言可以使用 <code>string.h</code> String Token (<code>strtok</code>) 去解決<br>我們來看 <code>strtok</code> 函式原型</p><div class="hljs"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">char</span>* <span class="hljs-title">strtok</span><span class="hljs-params">( <span class="hljs-keyword">char</span>* str, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* delim )</span></span>;</code></pre></div><p>引數傳要切割的字串 <code>str</code>、切割的關鍵字元 <code>delim</code></p><p>回傳的是字元指標，就是位於切割字元之間的字串<br>如果拿到 <code>NULL</code> 就代表已經沒了</p><p>但是，如果想再搜尋同一句話的下一個切割字元之間字串，<code>str</code> 就傳 <code>NULL</code> 即可</p><p>通常我會搭配 while 迴圈去完成</p><p>這題要先把所有字串轉為小寫<br>第一次做 <code>strtok</code> 的時候要 <code>str</code> 引數傳需要被切割的字串<br>第二次以後 <code>str</code> 引數直接傳 <code>NULL</code><br>直到回傳值為 <code>NULL</code> 跳出迴圈</p><p>while 迴圈裡，需要搜尋這個字串是否存在</p><p>搭配 <code>strcmp</code> 去完成</p><p>不存在則於迴圈的最後 <code>strcpy</code> 進去</p><p>最後再列出所有字串</p><h3 id="程式碼-Accepted-Code"><a href="#程式碼-Accepted-Code" class="headerlink" title="程式碼 Accepted Code"></a>程式碼 Accepted Code</h3><div class="hljs"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;  </span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;  </span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;ctype.h&gt;  </span></span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;      <span class="hljs-keyword">char</span> enter[<span class="hljs-number">10000</span>];      fgets(enter, <span class="hljs-number">9999</span>, <span class="hljs-built_in">stdin</span>);      <span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(enter);      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span> ; i &lt; len; i++) &#123;          enter[i] = <span class="hljs-built_in">tolower</span>(enter[i]);      &#125;      <span class="hljs-keyword">char</span> ans[<span class="hljs-number">1000</span>][<span class="hljs-number">1000</span>];      <span class="hljs-keyword">int</span> nowAns = <span class="hljs-number">0</span>;      <span class="hljs-keyword">char</span> *pch = strtok(enter, <span class="hljs-string">" \r\n"</span>);  <span class="hljs-comment">// 爛坑！！！</span>    <span class="hljs-keyword">while</span>(pch != <span class="hljs-literal">NULL</span>) &#123;          <span class="hljs-keyword">int</span> judge = <span class="hljs-number">1</span>;          <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nowAns; i++) &#123;              <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(ans[i], pch) == <span class="hljs-number">0</span>) &#123;                  judge = <span class="hljs-number">0</span>;                  <span class="hljs-keyword">break</span>;              &#125;          &#125;          <span class="hljs-keyword">if</span> (judge) &#123;              <span class="hljs-built_in">strcpy</span>(ans[nowAns], pch);              nowAns++;          &#125;          pch = strtok(<span class="hljs-literal">NULL</span>, <span class="hljs-string">" \r\n"</span>);  <span class="hljs-comment">// 爛坑！！！</span>    &#125;      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nowAns; i++) &#123;          <span class="hljs-keyword">if</span>(i)              <span class="hljs-built_in">printf</span>(<span class="hljs-string">" "</span>);          <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%s"</span>, ans[i]);     &#125;      <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n"</span>);      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  &#125;</code></pre></div><h2 id="後記-Afterword"><a href="#後記-Afterword" class="headerlink" title="後記 Afterword"></a>後記 Afterword</h2><p>Line 13 / 26 我寫了一個註解叫做爛坑！！</p><p>一開始寫了的 Token 如果只有空格跟換行（沒有 <code>\r</code>）<br>會直接吃兩個 AC、兩個 WA，根本不知道問題在哪<br><code>\r</code> 我就直接順手加進去，就 <code>AC</code> 了</p><p>理當來說換行為 <code>\n</code><br>但 Windows 換行為 <code>\r\n</code><br>我覺得測試資料可能有些是 Windows 手動產生</p><p>之前有個月賽題目賽後的測資有錯<br>歷史紀錄沒有人 <code>AC</code> 那題（放題目的人不會覺得詭異嗎？）<br>E-mail 反應後也是音訊全無</p><p>FB 社團裡的人也說這個平台實在是不敢領教<br>這篇特別紀錄一下<del>很坑的通靈之路</del></p>]]></content>
      
      
      <categories>
          
          <category> 解題區 </category>
          
          <category> 解題報告書 - ITSA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> strtok </tag>
            
            <tag> ITSA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c779. 106北二4.盆栽展覽</title>
      <link href="/2020/04/17/zj-c779/"/>
      <url>/2020/04/17/zj-c779/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-Problem"><a href="#題目-Problem" class="headerlink" title="題目 Problem"></a>題目 Problem</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=c779" target="_blank" rel="noopener">題目連結：https://zerojudge.tw/ShowProblem?problemid=c779</a></p><a id="more"></a><h3 id="敘述-Description"><a href="#敘述-Description" class="headerlink" title="敘述 Description"></a>敘述 Description</h3><p>盆栽協會為了推廣盆栽藝術將舉辦盆栽比賽與展覽。在展覽時，將依照比賽編號來依序擺放盆栽，但由於參賽盆栽的高度不一，為了方便評審評分與來賓觀賞，盆栽協會將訂做展示架來擺放盆栽，以便讓相鄰盆栽的高度差異不超過最大高度差。為了節省訂做成本，盆栽協會希望訂做的展示架高度越低越好。請你寫一個程式，根據相鄰最大高度差與每個盆栽的高度，計算擺放這排盆栽所需的最低展示架總高度。</p><p>舉例說明，以下例子中，第一列共有五個盆栽的高度。若相鄰最大高度差為 $5$，則第二列為每個盆栽的最低展示架高度,所以總高度為$0+118+153+0+282=553$。若相鄰最大高度差為 $50$，則第三列為每個盆栽的最低展示架高度，所以總高度為 $0+67+108+0+237=412$。</p><table><thead><tr><th align="center">盆栽高度</th><th align="center">401</th><th align="center">284</th><th align="center">254</th><th align="center">412</th><th align="center">125</th></tr></thead><tbody><tr><td align="center">相鄰最大高度差為 5</td><td align="center">0</td><td align="center">118</td><td align="center">153</td><td align="center">0</td><td align="center">282</td></tr><tr><td align="center">相鄰最大高度差為 50</td><td align="center">0</td><td align="center">67</td><td align="center">108</td><td align="center">0</td><td align="center">237</td></tr></tbody></table><h3 id="輸入-Input"><a href="#輸入-Input" class="headerlink" title="輸入 Input"></a>輸入 Input</h3><p>測試資料有兩行。<br>第一行有 $A (1 \leq A \leq 30)$ 個以一個空格(white space)隔開的整數 $B (1 \leq B \leq 2000)$ 代表盆栽高度。<br>第二行有一個整數 $C (1 \leq C \leq 2000)$，代表相鄰最大高度差。</p><h3 id="輸出-Output"><a href="#輸出-Output" class="headerlink" title="輸出 Output"></a>輸出 Output</h3><p>請輸出 1 個整數，代表擺放這排盆栽所需的最低展示架總高度。</p><h3 id="範例輸入-Sample-Input"><a href="#範例輸入-Sample-Input" class="headerlink" title="範例輸入 Sample Input"></a>範例輸入 Sample Input</h3><div class="hljs"><pre><code class="hljs undefined">範例輸入一：<span class="hljs-number">401</span> <span class="hljs-number">284</span> <span class="hljs-number">254</span> <span class="hljs-number">412</span> <span class="hljs-number">125</span><span class="hljs-number">50</span>範例輸入二：<span class="hljs-number">1010</span> <span class="hljs-number">1000</span> <span class="hljs-number">1000</span> <span class="hljs-number">1000</span> <span class="hljs-number">1000</span> <span class="hljs-number">1000</span> <span class="hljs-number">1000</span> <span class="hljs-number">1000</span> <span class="hljs-number">1000</span> <span class="hljs-number">1000</span> <span class="hljs-number">1000</span> <span class="hljs-number">1000</span> <span class="hljs-number">1000</span> <span class="hljs-number">1000</span> <span class="hljs-number">1000</span> <span class="hljs-number">1000</span> <span class="hljs-number">1000</span> <span class="hljs-number">1000</span> <span class="hljs-number">1000</span> <span class="hljs-number">1000</span> <span class="hljs-number">1000</span> <span class="hljs-number">1000</span> <span class="hljs-number">1000</span> <span class="hljs-number">1000</span> <span class="hljs-number">1000</span> <span class="hljs-number">1000</span> <span class="hljs-number">1000</span> <span class="hljs-number">1000</span> <span class="hljs-number">1000</span> <span class="hljs-number">1000</span><span class="hljs-number">5</span></code></pre></div><h3 id="範例輸出-Sample-Output"><a href="#範例輸出-Sample-Output" class="headerlink" title="範例輸出 Sample Output"></a>範例輸出 Sample Output</h3><div class="hljs"><pre><code class="hljs undefined">範例輸出一：<span class="hljs-number">412</span>範例輸出二：<span class="hljs-number">5</span></code></pre></div><h3 id="提示-Hint"><a href="#提示-Hint" class="headerlink" title="提示 Hint"></a>提示 Hint</h3><h2 id="題解-Solution"><a href="#題解-Solution" class="headerlink" title="題解 Solution"></a>題解 Solution</h2><p>每個數字兩個之間有沒有差距超過相鄰最大高度差</p><p>我過程至少 $A$ 次，第一次可能還沒有跟上最高高度</p><h3 id="程式碼-Accepted-Code"><a href="#程式碼-Accepted-Code" class="headerlink" title="程式碼 Accepted Code"></a>程式碼 Accepted Code</h3><div class="hljs"><pre><code class="hljs cpp"><span class="hljs-comment">/*    Author: Jerry Yang C.H. (tico88612)    Date: 2020/4/9*/</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<span class="hljs-keyword">typedef</span> pair&lt;ll, ll&gt; pii;<span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-keyword">double</span>,<span class="hljs-keyword">double</span>&gt; pdd;<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SQ(i) ((i)*(i))</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MEM(a, b) memset(a, (b), sizeof(a))</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SZ(i) int(i.size())</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> FOR(i, j, k, in) for (int i=j ; i&lt;k ; i+=in)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> RFOR(i, j, k, in) for (int i=j ; i&gt;=k ; i-=in)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> REP(i, j) FOR(i, 0, j, 1)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> REP1(i,j) FOR(i, 1, j+1, 1)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> RREP(i, j) RFOR(i, j, 0, 1)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ALL(_a) _a.begin(),_a.end()</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MP make_pair</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PB push_back</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> EB emplace_back</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> X first</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> Y second</span><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> tmd</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> debug(...) do&#123;\    fprintf(stderr,<span class="hljs-meta-string">"%s - %d (%s) = "</span>,__PRETTY_FUNCTION__,__LINE__,#__VA_ARGS__);\    _do(__VA_ARGS__);\&#125;while(0)</span><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<span class="hljs-keyword">void</span> _do(T &amp;&amp;_x)&#123;<span class="hljs-built_in">cerr</span>&lt;&lt;_x&lt;&lt;<span class="hljs-built_in">endl</span>;&#125;<span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T,<span class="hljs-keyword">typename</span> ...S&gt; <span class="hljs-keyword">void</span> _do(T &amp;&amp;_x,S &amp;&amp;...<span class="hljs-keyword">_t</span>)&#123;<span class="hljs-built_in">cerr</span>&lt;&lt;_x&lt;&lt;<span class="hljs-string">" ,"</span>;_do(<span class="hljs-keyword">_t</span>...);&#125;<span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> _a,<span class="hljs-keyword">typename</span> _b&gt; ostream&amp; <span class="hljs-keyword">operator</span> &lt;&lt; (ostream &amp;_s,<span class="hljs-keyword">const</span> pair&lt;_a,_b&gt; &amp;_p)&#123;<span class="hljs-keyword">return</span> _s&lt;&lt;<span class="hljs-string">"("</span>&lt;&lt;_p.X&lt;&lt;<span class="hljs-string">","</span>&lt;&lt;_p.Y&lt;&lt;<span class="hljs-string">")"</span>;&#125;<span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> It&gt; ostream&amp; _OUTC(ostream &amp;_s,It _ita,It _itb)&#123;    _s&lt;&lt;<span class="hljs-string">"&#123;"</span>;    <span class="hljs-keyword">for</span>(It _it=_ita;_it!=_itb;_it++)    &#123;        _s&lt;&lt;(_it==_ita?<span class="hljs-string">""</span>:<span class="hljs-string">","</span>)&lt;&lt;*_it;    &#125;    _s&lt;&lt;<span class="hljs-string">"&#125;"</span>;    <span class="hljs-keyword">return</span> _s;&#125;<span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> _a&gt; ostream &amp;<span class="hljs-keyword">operator</span> &lt;&lt; (ostream &amp;_s,<span class="hljs-built_in">vector</span>&lt;_a&gt; &amp;_c)&#123;<span class="hljs-keyword">return</span> _OUTC(_s,ALL(_c));&#125;<span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> _a&gt; ostream &amp;<span class="hljs-keyword">operator</span> &lt;&lt; (ostream &amp;_s,<span class="hljs-built_in">set</span>&lt;_a&gt; &amp;_c)&#123;<span class="hljs-keyword">return</span> _OUTC(_s,ALL(_c));&#125;<span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> _a&gt; ostream &amp;<span class="hljs-keyword">operator</span> &lt;&lt; (ostream &amp;_s,<span class="hljs-built_in">deque</span>&lt;_a&gt; &amp;_c)&#123;<span class="hljs-keyword">return</span> _OUTC(_s,ALL(_c));&#125;<span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> _a,<span class="hljs-keyword">typename</span> _b&gt; ostream &amp;<span class="hljs-keyword">operator</span> &lt;&lt; (ostream &amp;_s,<span class="hljs-built_in">map</span>&lt;_a,_b&gt; &amp;_c)&#123;<span class="hljs-keyword">return</span> _OUTC(_s,ALL(_c));&#125;<span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> <span class="hljs-keyword">_t</span>&gt; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pary</span><span class="hljs-params">(<span class="hljs-keyword">_t</span> _a,<span class="hljs-keyword">_t</span> _b)</span></span>&#123;_OUTC(<span class="hljs-built_in">cerr</span>,_a,_b);<span class="hljs-built_in">cerr</span>&lt;&lt;<span class="hljs-built_in">endl</span>;&#125;<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IOS()</span><span class="hljs-meta">#<span class="hljs-meta-keyword">else</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> debug(...)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pary(...)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">'\n'</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IOS() ios_base::sync_with_stdio(0);cin.tie(0)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><span class="hljs-keyword">const</span> ll MOD = <span class="hljs-number">1000000007L</span>L;<span class="hljs-keyword">const</span> ll INF = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>LL;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> iNF = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">// const ll MAXN = </span><span class="hljs-comment">/********** Good Luck :) **********/</span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    IOS();    ll enter[<span class="hljs-number">35</span>] = &#123;<span class="hljs-number">0</span>&#125;, t = <span class="hljs-number">0</span>;    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span> &gt;&gt; enter[t++]);    t--;    ll c = enter[--t];    ll ans = <span class="hljs-number">0</span>;    REP(i, t)&#123;        REP(j, t)&#123;            <span class="hljs-keyword">if</span> (j == <span class="hljs-number">0</span> &amp;&amp; j != t - <span class="hljs-number">1</span>) &#123;                <span class="hljs-keyword">if</span> (j + <span class="hljs-number">1</span> &lt; t &amp;&amp; enter[j] &lt; enter[j + <span class="hljs-number">1</span>] - c)&#123;                    ans += enter[j + <span class="hljs-number">1</span>] - c - enter[j];                    enter[j] = enter[j + <span class="hljs-number">1</span>] - c;                &#125;            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (j == t - <span class="hljs-number">1</span>) &#123;                <span class="hljs-keyword">if</span> (enter[j] &lt; enter[j - <span class="hljs-number">1</span>] - c) &#123;                    ans += enter[j - <span class="hljs-number">1</span>] - c - enter[j];                    enter[j] = enter[j - <span class="hljs-number">1</span>] - c;                &#125;            &#125; <span class="hljs-keyword">else</span> &#123;                <span class="hljs-keyword">int</span> tt = max(enter[j - <span class="hljs-number">1</span>], enter[j + <span class="hljs-number">1</span>]);                <span class="hljs-keyword">if</span>(tt - c &gt; enter[j])&#123;                    ans += tt - c - enter[j];                    enter[j] = tt - c;                &#125;            &#125;        &#125;    &#125;    <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-string">'\n'</span>;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></div><h2 id="後記-Afterword"><a href="#後記-Afterword" class="headerlink" title="後記 Afterword"></a>後記 Afterword</h2><p>我發現外層迴圈設定 $2$ 次，還是可以 AC</p><p>根本證明這測資根本太水了</p><p>輸入</p><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-number">10</span> <span class="hljs-number">10</span> <span class="hljs-number">10</span> <span class="hljs-number">10</span> <span class="hljs-number">10</span> <span class="hljs-number">10</span> <span class="hljs-number">10</span> <span class="hljs-number">10</span> <span class="hljs-number">100</span> <span class="hljs-number">100</span><span class="hljs-number">10</span></code></pre></div><p>輸出</p><div class="hljs"><pre><code class="hljs undefined">設定兩次：<span class="hljs-number">150</span>正確：<span class="hljs-number">360</span></code></pre></div>]]></content>
      
      
      <categories>
          
          <category> 解題區 </category>
          
          <category> 解題報告書 - ZeroJudge </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ZeroJudge April Fools Contest 2020 解題心得</title>
      <link href="/2020/04/03/zerojudge-april-fools-contest-2020/"/>
      <url>/2020/04/03/zerojudge-april-fools-contest-2020/</url>
      
        <content type="html"><![CDATA[<p>這次比賽真的蠻有 April Fools 的味道</p><p>不過在 ZeroJudge 平台應該是新手居多，可能會有點適應不良，或者不知從何下手</p><a id="more"></a><p>有些題目也要一些 CTF 的基礎才可能<del>通靈</del>解開來</p><p>這次就來一次看清楚吧！</p><p><strong>不負責聲明：本人不是出題者，我只是寫我的解題心得而已，要官方題解請找出題者</strong></p><h2 id="競賽連結-Contest"><a href="#競賽連結-Contest" class="headerlink" title="競賽連結 Contest"></a>競賽連結 Contest</h2><p><a href="https://zerojudge.tw/ShowContest?contestid=3282" target="_blank" rel="noopener">競賽連結：https://zerojudge.tw/ShowContest?contestid=3282</a></p><p><img src="Intro-0.png" srcset="/img/loading.gif" alt="本人 Rank 2"></p><p>本人 Rank 2/125<br>之前在 TIOJ 打 April Fools 也是拿很前面的名次<br>正常競賽不會打，只會打 April Fools = =</p><p>———————————<strong>暴雷分隔線，害怕請避難</strong>————————————</p><h2 id="題目-Problems"><a href="#題目-Problems" class="headerlink" title="題目 Problems"></a>題目 Problems</h2><h3 id="pA-Hello-April-Fools-Day-2020"><a href="#pA-Hello-April-Fools-Day-2020" class="headerlink" title="pA - Hello, April Fools Day 2020"></a>pA - Hello, April Fools Day 2020</h3><p><a href="https://zerojudge.tw/ShowProblem?problemid=e959" target="_blank" rel="noopener">題目連結：https://zerojudge.tw/ShowProblem?problemid=e959</a></p><p>進來雖然看懂題目了，也寫好了，可是……「送出解答」按鈕呢？</p><p>在那裡附近右鍵打開檢查</p><p><img src="e959-0.png" srcset="/img/loading.gif" alt="右鍵檢查"></p><p>找到送出「解答按鈕」的元素，你會發現按紐被 <code>display: none;</code> 了</p><p><img src="e959-1.png" srcset="/img/loading.gif" alt="找到送出解答按鈕的元素，你會發現按紐被隱藏了"></p><p>雙擊編輯把 <code>display: none;</code> 去除</p><p><img src="e959-2.png" srcset="/img/loading.gif" alt="雙擊編輯把 display: none; 去除"></p><p>送出吧！</p><p><img src="e959-3.png" srcset="/img/loading.gif" alt="Done"></p><div class="hljs"><pre><code class="hljs python">print(<span class="hljs-string">'Hello, April Fools Day 2020'</span>)</code></pre></div><h3 id="pB-顛倒"><a href="#pB-顛倒" class="headerlink" title="pB - 顛倒"></a>pB - 顛倒</h3><p><a href="https://zerojudge.tw/ShowProblem?problemid=e960" target="_blank" rel="noopener">題目連結：https://zerojudge.tw/ShowProblem?problemid=e960</a></p><p>整個敘述都顛倒好難看……</p><p>一秒破解，把敘述複製到無格式記事本</p><p>好，你看懂題目，也打出來了，可是送出去之後</p><p><img src="e960-0.png" srcset="/img/loading.gif" alt="1個AC、1個WA、2個TLE"></p><p>我的聚焦會在 <code>TLE</code>，理當來說 $T\times N = 100\times 1000$，是不應該會 <code>TLE</code> 的</p><p>於是我就先寫其他題目了</p><p>但我後來回去再看一次標題「顛倒」</p><p>就在想，會不會輸入也要顛倒…</p><p>果然，輸入倒回去看也是正確的，只不過輸出也要顛倒輸出</p><p><img src="e960-1.png" srcset="/img/loading.gif" alt="示意圖"></p><div class="hljs"><pre><code class="hljs c++"><span class="hljs-comment">/*    Author: Jerry Yang C.H. (tico88612)    Date: 2020/4/1*/</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">'\n'</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IOS() ios_base::sync_with_stdio(0);cin.tie(0)</span><span class="hljs-comment">/********** Good Luck :) **********/</span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    IOS();    ll w;    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;    ll enter[<span class="hljs-number">1000005</span>];    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span> &gt;&gt; w)&#123;        enter[i++] = w;    &#125;    ll ans[<span class="hljs-number">10000</span>];    <span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;    ll t;    t = enter[--i];    <span class="hljs-keyword">while</span>(t--)&#123;        ll n;        n = enter[--i];        ll total = <span class="hljs-number">0</span>;        <span class="hljs-keyword">while</span>(n--)&#123;            ll tp;            tp = enter[--i];            total += tp;        &#125;        ans[j++] = total;    &#125;    <span class="hljs-keyword">while</span>(j)&#123;        <span class="hljs-built_in">cout</span> &lt;&lt; ans[--j] &lt;&lt; <span class="hljs-string">'\n'</span>;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></div><h3 id="pC-解題技巧"><a href="#pC-解題技巧" class="headerlink" title="pC - 解題技巧"></a>pC - 解題技巧</h3><p><a href="https://zerojudge.tw/ShowProblem?problemid=e961" target="_blank" rel="noopener">題目連結：https://zerojudge.tw/ShowProblem?problemid=e961</a></p><p>題目說參與「某種活動」有機會秒殺這題</p><p>再加上輸入有數字 <code>0-9</code>、<code>/</code>和<code>X</code></p><p>就想到這題是保齡球分數計算，再稍微驗證一下輸入有 $11 \sim 21$ 字元，應該準沒錯</p><p>然後找了 <code>UVa 584</code> 的 Code（<del>對，我懶得重寫</del>）</p><p>稍微改了一下，但還是 <code>WA</code>，不過分數多了一些</p><p>隔一段時間回來後，因為測資有誤，Rejudge 後，也直接 <code>AC</code> 了</p><div class="hljs"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sstream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-keyword">int</span> t;    <span class="hljs-built_in">cin</span> &gt;&gt; t;    <span class="hljs-built_in">string</span> line;    <span class="hljs-built_in">cin</span>.ignore();    <span class="hljs-keyword">while</span> (t-- &amp;&amp; getline(<span class="hljs-built_in">cin</span>, line)) &#123;        <span class="hljs-keyword">if</span> (line == <span class="hljs-string">"Game Over"</span>)            <span class="hljs-keyword">break</span>;        <span class="hljs-function"><span class="hljs-built_in">stringstream</span> <span class="hljs-title">sin</span><span class="hljs-params">(line)</span></span>;        <span class="hljs-built_in">vector</span>&lt;pair&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; &gt; frame;        <span class="hljs-keyword">int</span> n = <span class="hljs-number">0</span>, i;        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; line.length(); i++) &#123;            <span class="hljs-keyword">if</span> (line[i] != <span class="hljs-string">' '</span>) &#123;                line[n++] = line[i];            &#125;        &#125;        <span class="hljs-keyword">int</span> score = <span class="hljs-number">0</span>;        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;            <span class="hljs-keyword">if</span> (line[i] == <span class="hljs-string">'X'</span>) &#123;                frame.push_back(make_pair(<span class="hljs-number">10</span>, <span class="hljs-number">0</span>));            &#125; <span class="hljs-keyword">else</span> &#123;                <span class="hljs-keyword">if</span> (line[i + <span class="hljs-number">1</span>] == <span class="hljs-string">'/'</span>)                    frame.push_back(make_pair(line[i] - <span class="hljs-string">'0'</span>, <span class="hljs-number">10</span> - (line[i] - <span class="hljs-string">'0'</span>)));                <span class="hljs-keyword">else</span>                    frame.push_back(make_pair(line[i] - <span class="hljs-string">'0'</span>, line[i + <span class="hljs-number">1</span>] - <span class="hljs-string">'0'</span>));                i++;            &#125;        &#125;        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;            <span class="hljs-keyword">if</span> (frame[i].first + frame[i].second != <span class="hljs-number">10</span>)                score += frame[i].first + frame[i].second;            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (frame[i].first == <span class="hljs-number">10</span>) &#123;                <span class="hljs-keyword">if</span> (frame[i + <span class="hljs-number">1</span>].first == <span class="hljs-number">10</span>)                    score += <span class="hljs-number">10</span> + <span class="hljs-number">10</span> + frame[i + <span class="hljs-number">2</span>].first;                <span class="hljs-keyword">else</span>                    score += <span class="hljs-number">10</span> + frame[i + <span class="hljs-number">1</span>].first + frame[i + <span class="hljs-number">1</span>].second;            &#125; <span class="hljs-keyword">else</span> &#123;                score += <span class="hljs-number">10</span> + frame[i + <span class="hljs-number">1</span>].first;            &#125;        &#125;        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, score);    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></div><h3 id="pD-灰階"><a href="#pD-灰階" class="headerlink" title="pD - 灰階"></a>pD - 灰階</h3><p><a href="https://zerojudge.tw/ShowProblem?problemid=e962" target="_blank" rel="noopener">題目連結：https://zerojudge.tw/ShowProblem?problemid=e962</a></p><p><del>通靈</del>解題失敗，等作者發題解，我覺得那公式應該是唬爛的</p><p>但我發現 Reddit 竟然找得到…</p><p><strong>2020.04.04 更新</strong></p><p><a href="https://zerojudge.tw/ShowThread?postid=21040&reply=0" target="_blank" rel="noopener">參考 inversion 大大的通靈的心路歷程: https://zerojudge.tw/ShowThread?postid=21040&amp;reply=0</a></p><p>雖然我有看到這段話</p><blockquote><p>小歐:「24bit… 就像全彩RGB那樣… ?」<br>小草:「你要那樣說也不是不行啦<del>~</del>」</p></blockquote><p>也一度懷疑那字串不是 RGB，但那時候也不以為意（實際上就不是 RGB）</p><p>不過用 Gray Code（格雷碼）諧音梗來誤導 RGB 也太傳神w</p><p>但其實我也有發現範例輸入 #a0a0a0 顏色本身就是灰色，為何要硬轉成 #f0f0f0</p><p>只能說我的通靈之路還得加強w</p><p>本題就直接把 Hexadecimal 轉成 Binary</p><p>然後再依照這部影片的教學轉成 Gray Code（格雷碼）</p><div class="video-container"><iframe src="//www.youtube.com/embed/AzyG_wL3qMY" frameborder="0" allowfullscreen></iframe></div><p>再從 Binary 轉成 Hexadecimal 輸出即可 <code>AC</code></p><div class="hljs"><pre><code class="hljs c++"><span class="hljs-comment">/*    Author: Jerry Yang C.H. (tico88612)    Date: 2020/4/4*/</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> FOR(i, j, k, in) for (int i=j ; i&lt;k ; i+=in)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> REP(i, j) FOR(i, 0, j, 1)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ALL(_a) _a.begin(),_a.end()</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IOS() ios_base::sync_with_stdio(0);cin.tie(0)</span><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">decToBin</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s)</span></span>&#123;    <span class="hljs-built_in">string</span> re;    REP(i, <span class="hljs-number">4</span>)&#123;        <span class="hljs-keyword">if</span>(s % <span class="hljs-number">2</span>)&#123;            re += <span class="hljs-string">'1'</span>;        &#125;        <span class="hljs-keyword">else</span>&#123;            re += <span class="hljs-string">'0'</span>;        &#125;        s /= <span class="hljs-number">2</span>;    &#125;    reverse(ALL(re));    <span class="hljs-keyword">return</span> re;&#125;<span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">hexToBin</span><span class="hljs-params">(<span class="hljs-keyword">char</span> s)</span></span>&#123;    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isdigit</span>(s))&#123;        ans = s - <span class="hljs-string">'0'</span>;    &#125;    <span class="hljs-keyword">else</span> &#123;        ans = s - <span class="hljs-string">'a'</span> + <span class="hljs-number">10</span>;    &#125;    <span class="hljs-keyword">return</span> decToBin(ans);&#125;<span class="hljs-function"><span class="hljs-keyword">char</span> <span class="hljs-title">decToHex</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s)</span> </span>&#123;    <span class="hljs-keyword">if</span> (s &lt; <span class="hljs-number">10</span>) &#123;        <span class="hljs-keyword">return</span> s + <span class="hljs-string">'0'</span>;    &#125;    <span class="hljs-keyword">else</span> &#123;        <span class="hljs-keyword">return</span> s - <span class="hljs-number">10</span> + <span class="hljs-string">'a'</span>;    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">char</span> <span class="hljs-title">binToHex</span><span class="hljs-params">(<span class="hljs-built_in">string</span> s)</span></span>&#123;    <span class="hljs-keyword">int</span> total = <span class="hljs-number">0</span>;    <span class="hljs-keyword">int</span> now = <span class="hljs-number">8</span>, i = <span class="hljs-number">0</span>;    <span class="hljs-keyword">while</span> (now) &#123;        <span class="hljs-keyword">if</span> (s[i] == <span class="hljs-string">'1'</span>) &#123;            total += now;        &#125;        i++;        now /= <span class="hljs-number">2</span>;    &#125;    <span class="hljs-keyword">return</span> decToHex(total);&#125;<span class="hljs-comment">/********** Good Luck :) **********/</span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    IOS();    <span class="hljs-keyword">int</span> n;    <span class="hljs-built_in">cin</span> &gt;&gt; n;    <span class="hljs-keyword">while</span>(n--)&#123;        <span class="hljs-built_in">string</span> enter;        <span class="hljs-built_in">cin</span> &gt;&gt; enter;        <span class="hljs-built_in">string</span> a;        REP(i, <span class="hljs-number">6</span>)&#123;            a += hexToBin(enter[i]);        &#125;        <span class="hljs-built_in">bitset</span>&lt;24&gt; bita(a), bitb(a);        bitb &gt;&gt;= <span class="hljs-number">1</span>;        bita ^= bitb;        <span class="hljs-built_in">string</span> bins = bita.to_string();        <span class="hljs-built_in">string</span> ans;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">24</span>; i += <span class="hljs-number">4</span>)&#123;            ans += binToHex(bins.substr(i, <span class="hljs-number">4</span>));        &#125;        <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-string">'\n'</span>;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></div><h3 id="pE-餅乾盒遊戲"><a href="#pE-餅乾盒遊戲" class="headerlink" title="pE - 餅乾盒遊戲"></a>pE - 餅乾盒遊戲</h3><p><a href="https://zerojudge.tw/ShowProblem?problemid=e963" target="_blank" rel="noopener">題目連結：https://zerojudge.tw/ShowProblem?problemid=e963</a></p><p>這題你會發現，你無法從題目敘述、輸入輸出判別 Yes or No</p><p>他很強調「餅乾」</p><p>還有一句話「畢竟不同的餅乾就能代表不同的人，也就是說，能夠從餅乾來判別一個人喔。」</p><p>打過 Web CTF 就會知道，不過稍微<del>通靈</del>想一下</p><p>「餅乾」=「Cookies」</p><p>於是就打開 ZeroJudge 的 Cookies 欄位</p><p><img src="e963-0.png" srcset="/img/loading.gif" alt="Chrome按一下鎖頭"></p><p>點進去，把 ZeroJudge 的 Cookies 展開，多了個東西叫做 <code>pE_answer</code></p><p><img src="e963-1.png" srcset="/img/loading.gif" alt="pE_answer"></p><p>內容蠻長的，要複製完整才有答案哦！</p><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-number">6</span>IulIF<span class="hljs-symbol">NbaV0</span><span class="hljs-name">g54</span>K<span class="hljs-number">6</span>IOWtl+S<span class="hljs-number">4</span>slM<span class="hljs-name">g56</span>ysIGk<span class="hljs-name">g5</span>YCL<span class="hljs-number">5</span>a<span class="hljs-number">2</span>X<span class="hljs-number">5</span>YWD<span class="hljs-number">55</span>qEIGFzY<span class="hljs-number">2</span>lpIOaVuOWA<span class="hljs-attr">vCAoRVg6</span><span class="hljs-keyword">IF</span><span class="hljs-name">M9</span>ImJhciI<span class="hljs-name">g5</span>YmHIF<span class="hljs-symbol">NbMF09</span>OTgpCuS<span class="hljs-number">7</span>pCBIKFMpID<span class="hljs-number">0</span>gc<span class="hljs-number">3</span>VtKF<span class="hljs-symbol">NbaV0</span>qMT<span class="hljs-name">M5</span>XmkpICjpgJ<span class="hljs-symbol">noo6</span>H<span class="hljs-symbol">nmoRe5</span>piv<span class="hljs-number">5</span>oyH<span class="hljs-number">5</span>pW<span class="hljs-number">46</span>YGL<span class="hljs-number">566</span>XKSAoRV<span class="hljs-name">g6</span><span class="hljs-keyword">IF</span><span class="hljs-name">M9</span>ImJhciI<span class="hljs-name">g5</span>YmHIEgoUyk<span class="hljs-number">9</span>OTgrOTcqMT<span class="hljs-name">M5</span>KzEx<span class="hljs-symbol">NCoxMzleMj0</span>yMjE<span class="hljs-number">2</span>MTc<span class="hljs-number">1</span>KQrlpoLm<span class="hljs-symbol">npwgSChTKSUoU1</span>swXSUzKzIpID<span class="hljs-number">09</span>IDAgKOmAmeijoeeahCXmmK/lj<span class="hljs-number">5</span>bppJjmlbgpIOWJh+ipsumkheS<span class="hljs-number">5</span>vuaYr+WxrOaW<span class="hljs-attr">vCLlsI/mrZAi55</span>qE<span class="hljs-number">6</span>aSF<span class="hljs-number">5</span>Lm<span class="hljs-number">+77</span>y<span class="hljs-name">M5</span>Y+<span class="hljs-symbol">N5</span>LmL<span class="hljs-number">5</span>YmH<span class="hljs-number">5</span>Li<span class="hljs-symbol">N5</span>piv<span class="hljs-number">44</span>CCCihFWDogUz<span class="hljs-number">0</span>iYmFyIiwgIOWboOeCuiBIKFMpJShTWzBdJTMrMikgPSAyMjE<span class="hljs-number">2</span>MTc<span class="hljs-number">1</span>JTQgPSAzIOaVhSDoqbLppIXoqbLkuKbkuI<span class="hljs-number">3</span>lsazmlrwi<span class="hljs-number">5</span>bCP<span class="hljs-number">5</span>q<span class="hljs-number">2</span>QIueahOmkheS<span class="hljs-number">5</span>vik=</code></pre></div><p>結尾有個等於，看起來是 Base64 Encode，找個 <a href="https://www.base64decode.org/" target="_blank" rel="noopener">Online Base64 Decoder</a> 還原回去</p><div class="hljs"><pre><code class="hljs undefined">若 S[i] 為 字串S 第 i 個字元的 ascii 數值 <span class="hljs-comment">(EX: S="bar" 則 S[0]=98)</span>令 H<span class="hljs-comment">(S)</span> = sum<span class="hljs-comment">(S[i]*139^i)</span> <span class="hljs-comment">(這裡的^是指數運算)</span> <span class="hljs-comment">(EX: S="bar" 則 H(S)</span>=<span class="hljs-number">98</span><span class="hljs-number">+97</span>*<span class="hljs-number">139</span><span class="hljs-number">+114</span>*<span class="hljs-number">139</span>^<span class="hljs-number">2</span>=<span class="hljs-number">2216175</span>)如果 H<span class="hljs-comment">(S)</span><span class="hljs-meta">%</span><span class="hljs-comment">(S[0]%3+2)</span> == <span class="hljs-number">0</span> <span class="hljs-comment">(這裡的%是取餘數)</span> 則該餅乾是屬於<span class="hljs-string">"小歐"</span>的餅乾，反之則不是。<span class="hljs-comment">(EX: S="bar",  因為 H(S)</span><span class="hljs-meta">%</span><span class="hljs-comment">(S[0]%3+2)</span> = <span class="hljs-number">2216175</span><span class="hljs-meta">%</span><span class="hljs-number">4</span> = <span class="hljs-number">3</span> 故 該餅該並不屬於<span class="hljs-string">"小歐"</span>的餅乾)</code></pre></div><p>知道題目了，來實作吧！</p><p>這題需要用到<a href="https://zh.wikipedia.org/wiki/%E5%90%8C%E9%A4%98" target="_blank" rel="noopener">同餘定理</a>，照題目先把要 MOD 的數字算出，再把 $H(S)$ 算出</p><p>算 $139$ 的次方，記得都要取 MOD，再去照題目要求判斷，即可 <code>AC</code></p><div class="hljs"><pre><code class="hljs c++"><span class="hljs-comment">/*    Author: Jerry Yang C.H. (tico88612)    Date: 2020/4/1*/</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SZ(i) int(i.size())</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> FOR(i, j, k, in) for (int i=j ; i&lt;k ; i+=in)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> RFOR(i, j, k, in) for (int i=j ; i&gt;=k ; i-=in)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> REP(i, j) FOR(i, 0, j, 1)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IOS() ios_base::sync_with_stdio(0);cin.tie(0)</span><span class="hljs-comment">/********** Good Luck :) **********/</span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    IOS();    <span class="hljs-keyword">int</span> t;    <span class="hljs-built_in">cin</span> &gt;&gt; t;    <span class="hljs-keyword">while</span>(t--)&#123;        <span class="hljs-built_in">string</span> s;        <span class="hljs-built_in">cin</span> &gt;&gt; s;        ll mod = s[<span class="hljs-number">0</span>] % <span class="hljs-number">3</span> + <span class="hljs-number">2</span>;        ll total = <span class="hljs-number">0</span>;        ll timee = <span class="hljs-number">1</span>;        REP(i, SZ(s))&#123;            total += ((s[i] % mod) * (timee % mod)) % mod;            timee *= <span class="hljs-number">139</span>;            timee %= mod;        &#125;        <span class="hljs-keyword">if</span>(total % mod == <span class="hljs-number">0</span>)&#123;            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"yes"</span> &lt;&lt; <span class="hljs-string">'\n'</span>;        &#125;        <span class="hljs-keyword">else</span>&#123;            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"no"</span> &lt;&lt; <span class="hljs-string">'\n'</span>;        &#125;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></div><h3 id="pF-前往疫區"><a href="#pF-前往疫區" class="headerlink" title="pF - 前往疫區"></a>pF - 前往疫區</h3><p><a href="https://zerojudge.tw/ShowProblem?problemid=e964" target="_blank" rel="noopener">題目連結：https://zerojudge.tw/ShowProblem?problemid=e964</a></p><p>這題賽中題目敘述爛掉，還原一下那時候的大意</p><blockquote><p>「現在最嚴重的國家是…？<code>美國</code>」<br>「對，如果你是從<code>美國</code>來的，就可以拿到提示哦！」</p></blockquote><p>如果你是正常連線的話，你應該只能看到這裡</p><p>於是我就用了一下 VPN 連線到美國</p><blockquote><p>小歐:「咦?? 現在這個人好像就是來自 美國 的耶」<br>小草:「啊… 的確呢 還真是意外耶(棒讀)」<br>小歐:「怎麼覺得你早就知道會有人一樣… ?」<br>小草:「沒那回事 那是你的錯覺♪」<br>小歐:「所以說那個提示.. ?」<br>小草:「啊，差點就忘了… 提示是『${Ans=(9487945\times\displaystyle\sum_{i=0}^{b}a^i)\bmod 10^9+7}$』。」<br>小歐:「我是覺得這已經不是提示的程度了啦，直接講解答還能夠算是提示嗎?? 不過確實，不看提示真的猜不到呢… …」<br>小草:「嘛 惡趣味可不是叫假的」<br>小歐:「算了… 我已經放棄思考了… …」<br>小草:「終於看開了呀(笑)」<br>小歐:「所以在最後還是來做點正事吧 在此恭喜你通過所有關卡!! 🎉🎉🎉」<br>小草:「不過也有可能是直接跳關到這裡就是了… ?」<br>小歐:「雖然相見的時間不長，但也到了該謝幕的時間了。」<br>小草:「我倒是覺得已經很長了… …」<br>小歐:「就這樣，我是主持人小歐」<br>小草:「我其實只是路過的♪」<br>小歐:「欸!? 真的假的!? 總之，有緣的話明年再見吧」<br>小草:「說真的，究竟有多少人能看到這裡呢… …」</p></blockquote><!-- **然後你的背景也一起 `美國` 了，強烈建議連線進去捧場一下**![背景也一起美國](e964-0.png) --><p><strong>強烈建議連線進去捧場一下，你會發現不可思議的事</strong></p><p><strong>但我是覺得不一定要連 VPN 到美國，想辦法騙過 JavaScript 是從美國來的應該也可以</strong></p><p>回到題目重點，本題重點在這裡</p><p>$$<br>{Ans=(9487945\times\displaystyle\sum_{i=0}^{b}a^i)\bmod 10^9+7}<br>$$</p><p>$\displaystyle\sum_{i=0}^{b}a^i$ 這東西 Google 了半天，才知道那是等比級數啊！高中數學都忘光了@@</p><p>用 <code>等比級數</code> 搭配 <code>快速冪</code>，改一下條件判斷就 <code>AC</code> 了</p><div class="hljs"><pre><code class="hljs c++"><span class="hljs-comment">/*    Author: Jerry Yang C.H. (tico88612)    Date: 2020/4/2*/</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IOS() ios_base::sync_with_stdio(0);cin.tie(0)</span><span class="hljs-keyword">const</span> ll MOD = <span class="hljs-number">1000000007L</span>L;ll a;<span class="hljs-function">ll <span class="hljs-title">q_pow</span><span class="hljs-params">(ll a, ll n, ll MOD)</span> </span>&#123;    ll res = <span class="hljs-number">1</span>;    <span class="hljs-keyword">while</span> (n) &#123;        <span class="hljs-keyword">if</span> (n &amp; <span class="hljs-number">1</span>) res = res * a % MOD;        a = a * a % MOD;        n &gt;&gt;= <span class="hljs-number">1</span>;    &#125;    <span class="hljs-keyword">return</span> res % MOD;&#125;<span class="hljs-function">ll <span class="hljs-title">sum</span><span class="hljs-params">(ll n)</span> </span>&#123;    <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> a % MOD;    ll s = sum(n / <span class="hljs-number">2</span>) % MOD;    <span class="hljs-keyword">if</span> (n % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)        <span class="hljs-keyword">return</span> s + s * q_pow(a, n / <span class="hljs-number">2</span>, MOD) % MOD;    <span class="hljs-keyword">else</span>        <span class="hljs-keyword">return</span> s + s * q_pow(a, n / <span class="hljs-number">2</span>, MOD) + q_pow(a, n, MOD) % MOD;&#125;<span class="hljs-comment">/********** Good Luck :) **********/</span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;    IOS();    <span class="hljs-keyword">int</span> t;    <span class="hljs-built_in">cin</span> &gt;&gt; t;    <span class="hljs-keyword">while</span> (t--) &#123;        ll b;        <span class="hljs-built_in">cin</span> &gt;&gt; a &gt;&gt; b;        <span class="hljs-keyword">if</span> (a == <span class="hljs-number">0</span>) &#123;            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"0"</span> &lt;&lt; <span class="hljs-string">'\n'</span>;        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (b == <span class="hljs-number">0</span>)&#123;            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"9487945"</span> &lt;&lt; <span class="hljs-string">'\n'</span>;        &#125; <span class="hljs-keyword">else</span> &#123;            ll ans = sum(b);            <span class="hljs-built_in">cout</span> &lt;&lt; (((sum(b) + <span class="hljs-number">1</span>) % MOD) * <span class="hljs-number">9487945</span> % MOD) % MOD &lt;&lt; <span class="hljs-string">'\n'</span>;        &#125;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></div><h2 id="後記-Afterword"><a href="#後記-Afterword" class="headerlink" title="後記 Afterword"></a>後記 Afterword</h2><p>這場比賽性質不能直接跟正常比賽比較</p><p>畢竟是 April Fools 嘛 w</p><p>TCSH Online Judge 明年也可以來這樣搞好了</p><p>話說隔幾天就是 Google Code Jam 了，加上專題還有作業，估計繼續潛水了…</p><p>就醬子！ㄅㄅ！</p>]]></content>
      
      
      <categories>
          
          <category> 比賽心得區 </category>
          
          <category> ZeroJudge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ZeroJudge </tag>
            
            <tag> April Fools </tag>
            
            <tag> Cookies </tag>
            
            <tag> 等比級數 </tag>
            
            <tag> 快速冪 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>e463. 數數字</title>
      <link href="/2020/02/16/zj-e463/"/>
      <url>/2020/02/16/zj-e463/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-Problem"><a href="#題目-Problem" class="headerlink" title="題目 Problem"></a>題目 Problem</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=e463" target="_blank" rel="noopener">題目連結：https://zerojudge.tw/ShowProblem?problemid=e463</a></p><a id="more"></a><h3 id="敘述-Description"><a href="#敘述-Description" class="headerlink" title="敘述 Description"></a>敘述 Description</h3><p>給你一個數字n(n&lt;=100)，可以在n旁邊加上&lt;=n/2的數字，一直加到不能加為止</p><p>比如說n=6，可以變成16,26,36</p><p>26可以變成126</p><p>36可以變成136</p><p>最後總共有6,16,26,36,126,136共六個數字</p><h3 id="輸入-Input"><a href="#輸入-Input" class="headerlink" title="輸入 Input"></a>輸入 Input</h3><p>多筆輸入</p><p>每行為n(n&lt;=100)</p><h3 id="輸出-Output"><a href="#輸出-Output" class="headerlink" title="輸出 Output"></a>輸出 Output</h3><p>輸出共有幾個數字</p><p>再輸出每個數字，記得要排序</p><p>(有一些數字雖然會重複，但因為是由不同數字變出來的，所以都要輸出)</p><h3 id="範例輸入-Sample-Input"><a href="#範例輸入-Sample-Input" class="headerlink" title="範例輸入 Sample Input"></a>範例輸入 Sample Input</h3><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-number">6</span><span class="hljs-number">10</span></code></pre></div><h3 id="範例輸出-Sample-Output"><a href="#範例輸出-Sample-Output" class="headerlink" title="範例輸出 Sample Output"></a>範例輸出 Sample Output</h3><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-number">6</span><span class="hljs-number">6</span> <span class="hljs-number">16</span> <span class="hljs-number">26</span> <span class="hljs-number">36</span> <span class="hljs-number">126</span> <span class="hljs-number">136</span> <span class="hljs-number">14</span><span class="hljs-number">10</span> <span class="hljs-number">110</span> <span class="hljs-number">210</span> <span class="hljs-number">310</span> <span class="hljs-number">410</span> <span class="hljs-number">510</span> <span class="hljs-number">1210</span> <span class="hljs-number">1310</span> <span class="hljs-number">1410</span> <span class="hljs-number">1510</span> <span class="hljs-number">2410</span> <span class="hljs-number">2510</span> <span class="hljs-number">12410</span> <span class="hljs-number">12510</span></code></pre></div><h3 id="提示-Hint"><a href="#提示-Hint" class="headerlink" title="提示 Hint"></a>提示 Hint</h3><p>不准作弊!</p><h2 id="題解-Solution"><a href="#題解-Solution" class="headerlink" title="題解 Solution"></a>題解 Solution</h2><p>搭配 DFS + Multiset<br>不能使用 Set 的原因是有些數字會是重複產生，但是必須要讓它輸出</p><p>深度當前的那個數字 $n$，然後從 $1$ 到 $\frac{n}{2}$ 再向下搜尋<br>Line 64 的 s 是計算要加入數字的長度</p><h3 id="程式碼-Accepted-Code"><a href="#程式碼-Accepted-Code" class="headerlink" title="程式碼 Accepted Code"></a>程式碼 Accepted Code</h3><div class="hljs"><pre><code class="hljs cpp"><span class="hljs-comment">/*    Author: Jerry Yang C.H. (tico88612)    Date: 2020/2/16*/</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<span class="hljs-keyword">typedef</span> pair&lt;ll, ll&gt; pii;<span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-keyword">double</span>,<span class="hljs-keyword">double</span>&gt; pdd;<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SQ(i) ((i)*(i))</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MEM(a, b) memset(a, (b), sizeof(a))</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SZ(i) int(i.size())</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> FOR(i, j, k, in) for (int i=j ; i&lt;k ; i+=in)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> RFOR(i, j, k, in) for (int i=j ; i&gt;=k ; i-=in)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> REP(i, j) FOR(i, 0, j, 1)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> REP1(i,j) FOR(i, 1, j+1, 1)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> RREP(i, j) RFOR(i, j, 0, 1)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ALL(_a) _a.begin(),_a.end()</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MP make_pair</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PB push_back</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> EB emplace_back</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> X first</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> Y second</span><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> tmd</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> debug(...) do&#123;\    fprintf(stderr,<span class="hljs-meta-string">"%s - %d (%s) = "</span>,__PRETTY_FUNCTION__,__LINE__,#__VA_ARGS__);\    _do(__VA_ARGS__);\&#125;while(0)</span><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<span class="hljs-keyword">void</span> _do(T &amp;&amp;_x)&#123;<span class="hljs-built_in">cerr</span>&lt;&lt;_x&lt;&lt;<span class="hljs-built_in">endl</span>;&#125;<span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T,<span class="hljs-keyword">typename</span> ...S&gt; <span class="hljs-keyword">void</span> _do(T &amp;&amp;_x,S &amp;&amp;...<span class="hljs-keyword">_t</span>)&#123;<span class="hljs-built_in">cerr</span>&lt;&lt;_x&lt;&lt;<span class="hljs-string">" ,"</span>;_do(<span class="hljs-keyword">_t</span>...);&#125;<span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> _a,<span class="hljs-keyword">typename</span> _b&gt; ostream&amp; <span class="hljs-keyword">operator</span> &lt;&lt; (ostream &amp;_s,<span class="hljs-keyword">const</span> pair&lt;_a,_b&gt; &amp;_p)&#123;<span class="hljs-keyword">return</span> _s&lt;&lt;<span class="hljs-string">"("</span>&lt;&lt;_p.X&lt;&lt;<span class="hljs-string">","</span>&lt;&lt;_p.Y&lt;&lt;<span class="hljs-string">")"</span>;&#125;<span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> It&gt; ostream&amp; _OUTC(ostream &amp;_s,It _ita,It _itb)&#123;    _s&lt;&lt;<span class="hljs-string">"&#123;"</span>;    <span class="hljs-keyword">for</span>(It _it=_ita;_it!=_itb;_it++)    &#123;        _s&lt;&lt;(_it==_ita?<span class="hljs-string">""</span>:<span class="hljs-string">","</span>)&lt;&lt;*_it;    &#125;    _s&lt;&lt;<span class="hljs-string">"&#125;"</span>;    <span class="hljs-keyword">return</span> _s;&#125;<span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> _a&gt; ostream &amp;<span class="hljs-keyword">operator</span> &lt;&lt; (ostream &amp;_s,<span class="hljs-built_in">vector</span>&lt;_a&gt; &amp;_c)&#123;<span class="hljs-keyword">return</span> _OUTC(_s,ALL(_c));&#125;<span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> _a&gt; ostream &amp;<span class="hljs-keyword">operator</span> &lt;&lt; (ostream &amp;_s,<span class="hljs-built_in">set</span>&lt;_a&gt; &amp;_c)&#123;<span class="hljs-keyword">return</span> _OUTC(_s,ALL(_c));&#125;<span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> _a&gt; ostream &amp;<span class="hljs-keyword">operator</span> &lt;&lt; (ostream &amp;_s,<span class="hljs-built_in">deque</span>&lt;_a&gt; &amp;_c)&#123;<span class="hljs-keyword">return</span> _OUTC(_s,ALL(_c));&#125;<span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> _a,<span class="hljs-keyword">typename</span> _b&gt; ostream &amp;<span class="hljs-keyword">operator</span> &lt;&lt; (ostream &amp;_s,<span class="hljs-built_in">map</span>&lt;_a,_b&gt; &amp;_c)&#123;<span class="hljs-keyword">return</span> _OUTC(_s,ALL(_c));&#125;<span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> <span class="hljs-keyword">_t</span>&gt; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pary</span><span class="hljs-params">(<span class="hljs-keyword">_t</span> _a,<span class="hljs-keyword">_t</span> _b)</span></span>&#123;_OUTC(<span class="hljs-built_in">cerr</span>,_a,_b);<span class="hljs-built_in">cerr</span>&lt;&lt;<span class="hljs-built_in">endl</span>;&#125;<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IOS()</span><span class="hljs-meta">#<span class="hljs-meta-keyword">else</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> debug(...)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pary(...)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">'\n'</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IOS() ios_base::sync_with_stdio(0);cin.tie(0)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><span class="hljs-keyword">const</span> ll MOD = <span class="hljs-number">1000000007L</span>L;<span class="hljs-keyword">const</span> ll INF = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>LL;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> iNF = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">// const ll MAXN =</span><span class="hljs-built_in">multiset</span>&lt;ll&gt; ms;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(ll n, ll now)</span></span>&#123;    ms.insert(now);    ll s = <span class="hljs-built_in">pow</span>(<span class="hljs-number">10</span>, (ll)(<span class="hljs-built_in">log10</span>(now) + <span class="hljs-number">1</span>));    REP1(i, n / <span class="hljs-number">2</span>)&#123;        dfs(i, now + i * s);    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">play</span><span class="hljs-params">(ll n)</span></span>&#123;    ms.clear();    dfs(n, n);    <span class="hljs-built_in">cout</span> &lt;&lt; SZ(ms) &lt;&lt; <span class="hljs-string">'\n'</span>;    <span class="hljs-keyword">int</span> fir = <span class="hljs-number">1</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> i: ms)&#123;        <span class="hljs-keyword">if</span>(fir)&#123;            fir = <span class="hljs-number">0</span>;        &#125;        <span class="hljs-keyword">else</span>&#123;            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">" "</span>;        &#125;        <span class="hljs-built_in">cout</span> &lt;&lt; i;    &#125;    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">'\n'</span>;&#125;<span class="hljs-comment">/********** Good Luck :) **********/</span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    IOS();    ll n;    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span> &gt;&gt; n)&#123;        play(n);    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></div><h2 id="後記-Afterword"><a href="#後記-Afterword" class="headerlink" title="後記 Afterword"></a>後記 Afterword</h2><p>That’s it.<br>暫時不知道要寫啥</p>]]></content>
      
      
      <categories>
          
          <category> 解題區 </category>
          
          <category> 解題報告書 - ZeroJudge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> multiset </tag>
            
            <tag> DFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>e880. Q1 合影隊形</title>
      <link href="/2020/02/04/zj-e880/"/>
      <url>/2020/02/04/zj-e880/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-Problem"><a href="#題目-Problem" class="headerlink" title="題目 Problem"></a>題目 Problem</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=e880" target="_blank" rel="noopener">題目連結：https://zerojudge.tw/ShowProblem?problemid=e880</a></p><a id="more"></a><h3 id="敘述-Description"><a href="#敘述-Description" class="headerlink" title="敘述 Description"></a>敘述 Description</h3><p>酷酷鯊是一支新成立的棒球隊，共有 $N$ 位球員。球隊裡原本氣氛融洽，大家都是好麻吉，同心協力爭取年度總冠軍。然而，最近一連串的比賽不順利，球員間開始出現摩擦。今天，棒球聯盟邀請了總統夫人到場開球。總統夫人是酷酷鯊隊的球迷，因此她希望能和全體球員合影留念。拍照時，球員們會站成一列。為了避免尷尬，球隊經理希望在安排拍照的隊型時，不要讓彼此有和芥蒂的球員站在一起。</p><p>舉例來說，如果有五位球員 A, B, C, D, E，其中 A 和 B 不願意站在一起，C 和 D 不願意站在一起，那麼 <u>ABCD</u>E 和 <u>AB</u>CED 不是適當的隊型，而 ACBDE 和 CADEB 則都是適當的隊型。</p><p>現在請你撰寫一個程式，協助球隊經理在總統夫人落臨之前，排出一個適當的合影隊型吧!</p><h3 id="輸入-Input"><a href="#輸入-Input" class="headerlink" title="輸入 Input"></a>輸入 Input</h3><p>第一行為球員人數 $N$，$N \leq 15$。（球員代號從 A 開始編起。）</p><p>第二行為有摩擦的球員配對數 $M$，$M \leq 50$。</p><p>第三行開始，每一行有兩個字元，代表有摩擦的兩個球員代號。兩個字元間以一個空格隔開。</p><h3 id="輸出-Output"><a href="#輸出-Output" class="headerlink" title="輸出 Output"></a>輸出 Output</h3><p>請輸出以字典遞增排序方式的第一個適合隊型。如果沒有任何適合隊型，請輸出 No Solution。<u>計算時間不得超過2秒鐘</u>。</p><h3 id="範例輸入-Sample-Input"><a href="#範例輸入-Sample-Input" class="headerlink" title="範例輸入 Sample Input"></a>範例輸入 Sample Input</h3><div class="hljs"><pre><code class="hljs undefined">範例<span class="hljs-number">1</span>:<span class="hljs-number">5</span> <span class="hljs-number">2</span> A B <span class="hljs-keyword">C</span> <span class="hljs-keyword">D</span>範例<span class="hljs-number">2</span>:<span class="hljs-number">4</span> <span class="hljs-number">4</span> A B <span class="hljs-keyword">C</span> <span class="hljs-keyword">D</span> <span class="hljs-keyword">C</span> A <span class="hljs-keyword">C</span> B</code></pre></div><h3 id="範例輸出-Sample-Output"><a href="#範例輸出-Sample-Output" class="headerlink" title="範例輸出 Sample Output"></a>範例輸出 Sample Output</h3><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-section">範例1:</span>ACBDE<span class="hljs-section">範例2:</span>No Solution</code></pre></div><h3 id="提示-Hint"><a href="#提示-Hint" class="headerlink" title="提示 Hint"></a>提示 Hint</h3><h2 id="題解-Solution"><a href="#題解-Solution" class="headerlink" title="題解 Solution"></a>題解 Solution</h2><p>熟悉 STL 一定知道 next_permutation 可以直接窮舉<br>但是，直接窮舉 $15! = 1307674368000$ 種可能，沒辦法在 2 秒跑完（ZJ 直接開 1 秒）<br>必定要自己寫 DFS 剪枝了</p><p>用個 $15 \times 15$ 的矩陣紀錄他們能不能站在一起<br>DFS 時候 當前的成員 跟 前一個被選的成員，查詢能不能站在一起<br>可以就往下尋找，不能就可以直接找下一位成員</p><h3 id="程式碼-Accepted-Code"><a href="#程式碼-Accepted-Code" class="headerlink" title="程式碼 Accepted Code"></a>程式碼 Accepted Code</h3><div class="hljs"><pre><code class="hljs cpp"><span class="hljs-comment">/*    Author: Jerry Yang C.H. (tico88612)    Date: 2020/2/4*/</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<span class="hljs-keyword">typedef</span> pair&lt;ll, ll&gt; pii;<span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-keyword">double</span>,<span class="hljs-keyword">double</span>&gt; pdd;<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SQ(i) ((i)*(i))</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MEM(a, b) memset(a, (b), sizeof(a))</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SZ(i) int(i.size())</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> FOR(i, j, k, in) for (int i=j ; i&lt;k ; i+=in)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> RFOR(i, j, k, in) for (int i=j ; i&gt;=k ; i-=in)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> REP(i, j) FOR(i, 0, j, 1)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> REP1(i,j) FOR(i, 1, j+1, 1)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> RREP(i, j) RFOR(i, j, 0, 1)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ALL(_a) _a.begin(),_a.end()</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MP make_pair</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PB push_back</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> EB emplace_back</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> X first</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> Y second</span><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> tmd</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> debug(...) do&#123;\    fprintf(stderr,<span class="hljs-meta-string">"%s - %d (%s) = "</span>,__PRETTY_FUNCTION__,__LINE__,#__VA_ARGS__);\    _do(__VA_ARGS__);\&#125;while(0)</span><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<span class="hljs-keyword">void</span> _do(T &amp;&amp;_x)&#123;<span class="hljs-built_in">cerr</span>&lt;&lt;_x&lt;&lt;<span class="hljs-built_in">endl</span>;&#125;<span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T,<span class="hljs-keyword">typename</span> ...S&gt; <span class="hljs-keyword">void</span> _do(T &amp;&amp;_x,S &amp;&amp;...<span class="hljs-keyword">_t</span>)&#123;<span class="hljs-built_in">cerr</span>&lt;&lt;_x&lt;&lt;<span class="hljs-string">" ,"</span>;_do(<span class="hljs-keyword">_t</span>...);&#125;<span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> _a,<span class="hljs-keyword">typename</span> _b&gt; ostream&amp; <span class="hljs-keyword">operator</span> &lt;&lt; (ostream &amp;_s,<span class="hljs-keyword">const</span> pair&lt;_a,_b&gt; &amp;_p)&#123;<span class="hljs-keyword">return</span> _s&lt;&lt;<span class="hljs-string">"("</span>&lt;&lt;_p.X&lt;&lt;<span class="hljs-string">","</span>&lt;&lt;_p.Y&lt;&lt;<span class="hljs-string">")"</span>;&#125;<span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> It&gt; ostream&amp; _OUTC(ostream &amp;_s,It _ita,It _itb)&#123;    _s&lt;&lt;<span class="hljs-string">"&#123;"</span>;    <span class="hljs-keyword">for</span>(It _it=_ita;_it!=_itb;_it++)    &#123;        _s&lt;&lt;(_it==_ita?<span class="hljs-string">""</span>:<span class="hljs-string">","</span>)&lt;&lt;*_it;    &#125;    _s&lt;&lt;<span class="hljs-string">"&#125;"</span>;    <span class="hljs-keyword">return</span> _s;&#125;<span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> _a&gt; ostream &amp;<span class="hljs-keyword">operator</span> &lt;&lt; (ostream &amp;_s,<span class="hljs-built_in">vector</span>&lt;_a&gt; &amp;_c)&#123;<span class="hljs-keyword">return</span> _OUTC(_s,ALL(_c));&#125;<span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> _a&gt; ostream &amp;<span class="hljs-keyword">operator</span> &lt;&lt; (ostream &amp;_s,<span class="hljs-built_in">set</span>&lt;_a&gt; &amp;_c)&#123;<span class="hljs-keyword">return</span> _OUTC(_s,ALL(_c));&#125;<span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> _a&gt; ostream &amp;<span class="hljs-keyword">operator</span> &lt;&lt; (ostream &amp;_s,<span class="hljs-built_in">deque</span>&lt;_a&gt; &amp;_c)&#123;<span class="hljs-keyword">return</span> _OUTC(_s,ALL(_c));&#125;<span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> _a,<span class="hljs-keyword">typename</span> _b&gt; ostream &amp;<span class="hljs-keyword">operator</span> &lt;&lt; (ostream &amp;_s,<span class="hljs-built_in">map</span>&lt;_a,_b&gt; &amp;_c)&#123;<span class="hljs-keyword">return</span> _OUTC(_s,ALL(_c));&#125;<span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> <span class="hljs-keyword">_t</span>&gt; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pary</span><span class="hljs-params">(<span class="hljs-keyword">_t</span> _a,<span class="hljs-keyword">_t</span> _b)</span></span>&#123;_OUTC(<span class="hljs-built_in">cerr</span>,_a,_b);<span class="hljs-built_in">cerr</span>&lt;&lt;<span class="hljs-built_in">endl</span>;&#125;<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IOS()</span><span class="hljs-meta">#<span class="hljs-meta-keyword">else</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> debug(...)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pary(...)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">'\n'</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IOS() ios_base::sync_with_stdio(0);cin.tie(0)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><span class="hljs-keyword">const</span> ll MOD = <span class="hljs-number">1000000007L</span>L;<span class="hljs-keyword">const</span> ll INF = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>LL;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> iNF = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">// const ll MAXN = </span><span class="hljs-keyword">int</span> N, M;<span class="hljs-keyword">bool</span> non[<span class="hljs-number">16</span>][<span class="hljs-number">16</span>] = &#123;<span class="hljs-number">0</span>&#125;;<span class="hljs-keyword">bool</span> judge = <span class="hljs-literal">false</span>;<span class="hljs-keyword">bool</span> visited[<span class="hljs-number">16</span>] = &#123;<span class="hljs-number">0</span>&#125;;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> now, <span class="hljs-built_in">string</span> ans)</span></span>&#123;    <span class="hljs-keyword">if</span>(now == N)&#123;        <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-string">'\n'</span>;        judge = <span class="hljs-number">1</span>;        <span class="hljs-keyword">return</span>;    &#125;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N &amp;&amp; !judge; i++)&#123;        <span class="hljs-keyword">if</span>(!visited[i] &amp;&amp; now &amp;&amp; !non[ans[now - <span class="hljs-number">1</span>] - <span class="hljs-string">'A'</span>][i])&#123;            visited[i] = <span class="hljs-number">1</span>;            <span class="hljs-built_in">string</span> tmp = ans + (<span class="hljs-keyword">char</span>)(i + <span class="hljs-string">'A'</span>);            dfs(now + <span class="hljs-number">1</span>, tmp);            visited[i] = <span class="hljs-number">0</span>;        &#125;        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!visited[i] &amp;&amp; now == <span class="hljs-number">0</span>)&#123;            visited[i] = <span class="hljs-number">1</span>;            <span class="hljs-built_in">string</span> tmp = ans + (<span class="hljs-keyword">char</span>)(i + <span class="hljs-string">'A'</span>);            dfs(now + <span class="hljs-number">1</span>, tmp);            visited[i] = <span class="hljs-number">0</span>;        &#125;    &#125;&#125;<span class="hljs-comment">/********** Good Luck :) **********/</span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    IOS();    <span class="hljs-built_in">cin</span> &gt;&gt; N &gt;&gt; M;    <span class="hljs-keyword">while</span>(M--)&#123;        <span class="hljs-built_in">string</span> aa, bb;        <span class="hljs-built_in">cin</span> &gt;&gt; aa &gt;&gt; bb;        <span class="hljs-keyword">int</span> a = aa[<span class="hljs-number">0</span>] - <span class="hljs-string">'A'</span>;        <span class="hljs-keyword">int</span> b = bb[<span class="hljs-number">0</span>] - <span class="hljs-string">'A'</span>;        non[a][b] = non[b][a] = <span class="hljs-number">1</span>;    &#125;    dfs(<span class="hljs-number">0</span>, <span class="hljs-string">""</span>);    <span class="hljs-keyword">if</span>(!judge)        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"No Solution"</span> &lt;&lt; <span class="hljs-string">'\n'</span>;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></div><h2 id="後記-Afterword"><a href="#後記-Afterword" class="headerlink" title="後記 Afterword"></a>後記 Afterword</h2><p>一開始寫完以為會被 TLE，沒想到是直接 AC<br>然後交大程式寒訓因為武漢肺炎停辦 QAQ</p><p>之後再來寫一篇文，有關交大程式寒訓默哀文</p>]]></content>
      
      
      <categories>
          
          <category> 解題區 </category>
          
          <category> 解題報告書 - ZeroJudge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DFS </tag>
            
            <tag> 窮舉 </tag>
            
            <tag> 剪枝 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter 心得 和 URL 網址無法打開之踩雷</title>
      <link href="/2019/12/18/flutter-url-encoder/"/>
      <url>/2019/12/18/flutter-url-encoder/</url>
      
        <content type="html"><![CDATA[<p>又是一種踩雷日常，想看看開發自己的 App 是什麼感覺</p><a id="more"></a><p>可是我又不想兩個平台語言都學<br>Android 陣營就是 Kotlin、Java<br>iOS 陣營就是 Swift、Objective-C</p><p>於是就選了 Google 旗下最新的框架 —— Flutter</p><h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><p>整體架構有點自由，自由到我都不知道 model 要放哪 LUL<br>UI 也很好編排，除非你要改一些位置<br>相關的 Code 也可以去 Google 找找看<br>我原本只想寫 UI<br>結果不小心就把資料一起 Get 進來了</p><p>而且整體 Code 也沒有不多</p><h2 id="URL-網址無法打開之踩雷"><a href="#URL-網址無法打開之踩雷" class="headerlink" title="URL 網址無法打開之踩雷"></a>URL 網址無法打開之踩雷</h2><p>前陣子才到的雷就是網址問題<br>cURL 拿到的是網址含有中文字<br>但是呢！瀏覽器會很有“智慧”的幫你轉成 URL Encode<br>但在 Dart 裡面就沒有這種“智慧”東西了<br>前面要求我們要先 <code>canLaunch</code><br>才可以 <code>launch</code> 網址</p><div class="hljs"><pre><code class="hljs dart">_launchURL(<span class="hljs-built_in">String</span> url) <span class="hljs-keyword">async</span> &#123;    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">await</span> canLaunch(url)) &#123;        <span class="hljs-keyword">await</span> launch(url);    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-keyword">throw</span> <span class="hljs-string">'Could not launch $url'</span>;    &#125;&#125;</code></pre></div><p>可是寫完之後要呼叫網址檔案時，就會 throw exception<br>結果後來觀察到用 PHP cURL 拿到的網址，全數字沒問題，但出現中文就會 throw exception<br>我還在想是不是中文問題，還去 Google <code>url_launcher flutter chinese</code><br>但發現根本沒有相關結果<br>直到我看到有個結果是網址有空格，要轉成 URL Encode<br>我才想到，要先轉成 URL Encode 瀏覽器才知道<br>於是就改成這樣</p><div class="hljs"><pre><code class="hljs dart">_launchURL(<span class="hljs-built_in">String</span> url) <span class="hljs-keyword">async</span> &#123;    url = <span class="hljs-built_in">Uri</span>.encodeFull(url); <span class="hljs-comment">// url to url encode.</span>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">await</span> canLaunch(url)) &#123;        <span class="hljs-keyword">await</span> launch(url);    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-keyword">throw</span> <span class="hljs-string">'Could not launch $url'</span>;    &#125;&#125;</code></pre></div><p>這個坑，害我想了一整晚，原來是 Encode 問題啊！</p>]]></content>
      
      
      <categories>
          
          <category> 程式 </category>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> url_launcher </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dev-C++ 手動更新編譯器至 G++ 8.2.0</title>
      <link href="/2019/11/30/devcplusplus-gplusplus-8/"/>
      <url>/2019/11/30/devcplusplus-gplusplus-8/</url>
      
        <content type="html"><![CDATA[<p>這個筆記做一下記錄，我在 Windows 10 上的更新</p><a id="more"></a><p>很多人都知道 Dev-C++ 已經算是不更新的 IDE 了<br>但我在 Windows 寫 C / C++ 還是用 Dev-C++<br>可是版本停留在 TDM-GCC 4.9.2（Windows 最新的版本為 G++ 8.2.0）<br>新版的標準想使用都不能用<br>我們直接來手動更新吧！</p><h2 id="1-安裝-MinGW"><a href="#1-安裝-MinGW" class="headerlink" title="1. 安裝 MinGW"></a>1. 安裝 MinGW</h2><p>進到 <a href="http://www.mingw.org/" target="_blank" rel="noopener">MinGW 官網</a> 點入 Downloads</p><p>進入後請你找到 <strong>mingw-get-setup.exe</strong> 並下載</p><p><img src="mingw-download.png" srcset="/img/loading.gif" alt></p><p><a href="https://osdn.net/projects/mingw/downloads/68260/mingw-get-setup.exe/" target="_blank" rel="noopener">下載連結參考</a></p><p>就開始 Install</p><p><img src="mingw-install.png" srcset="/img/loading.gif" alt></p><p>選擇路徑，需要記得位置！</p><p><img src="mingw-location.png" srcset="/img/loading.gif" alt></p><p>點下去就會開始安裝，安裝完畢後就開啟 <strong>MinGW Installation Manager</strong></p><p><img src="mingw-imlist.png" srcset="/img/loading.gif" alt></p><p>把 mingw32-base-bin 跟 mingw32-gcc-g++-bin 這兩個 <strong>Mark for Installation</strong></p><p><img src="mingw-mark.png" srcset="/img/loading.gif" alt></p><p><img src="mingw-imresult.png" srcset="/img/loading.gif" alt></p><p>然後就 <strong>Apply Changes</strong> </p><p><img src="mingw-apply.png" srcset="/img/loading.gif" alt></p><p>點下 <strong>Apply</strong></p><p>安裝完畢後，進到你安裝的路徑</p><p><img src="win-location.png" srcset="/img/loading.gif" alt></p><p>進入 bin 資料夾，複製路徑</p><p><img src="win-bin.png" srcset="/img/loading.gif" alt></p><p>編輯環境變數 Path</p><p><img src="win-path.png" srcset="/img/loading.gif" alt></p><p>加入到環境變數 Path</p><p><img src="win-path-add.png" srcset="/img/loading.gif" alt></p><p>確定後，打開「命令提示字元」輸入 <code>g++ -v</code></p><p><img src="g++-v.png" srcset="/img/loading.gif" alt></p><p>如果顯示這些文字，就是安裝成功</p><h2 id="2-Dev-C-加入-MinGW-G-8-2-0"><a href="#2-Dev-C-加入-MinGW-G-8-2-0" class="headerlink" title="2. Dev-C++ 加入 MinGW G++ 8.2.0"></a>2. Dev-C++ 加入 MinGW G++ 8.2.0</h2><p>打開 Dev-C++ 工具 $\rightarrow$ 編譯器選項</p><p><img src="dev-compile.png" srcset="/img/loading.gif" alt></p><p>按到第三個 $+$</p><p><img src="dev-3plus.png" srcset="/img/loading.gif" alt></p><p>選擇你剛剛 MinGW 安裝的地方</p><p><img src="dev-choose.png" srcset="/img/loading.gif" alt></p><p>成功的話，上方就會自己變更為 MinGW GCC 8.2.0</p><p><img src="dev-gcc8.2.0.png" srcset="/img/loading.gif" alt></p><p>因為舊版 Dev-C++ 語言標準只有停留在 C++11，我們下方命令列手動加入 <code>-std=c++17</code></p><p><img src="dev-c17.png" srcset="/img/loading.gif" alt></p><p>按下確定後，就可以來測試 Sample Code 了</p><div class="hljs"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;tuple&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-built_in">std</span>::tuple&lt;<span class="hljs-keyword">char</span>, <span class="hljs-keyword">int</span>, <span class="hljs-keyword">bool</span>&gt; mytuple()&#123;    <span class="hljs-keyword">char</span> a = <span class="hljs-string">'a'</span>;    <span class="hljs-keyword">int</span> i = <span class="hljs-number">123</span>;    <span class="hljs-keyword">bool</span> b = <span class="hljs-literal">true</span>;    <span class="hljs-keyword">return</span> <span class="hljs-built_in">std</span>::make_tuple(a, i, b);&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-keyword">auto</span> [a, i, b] = mytuple();<span class="hljs-comment">// Structured Bindings in C++17 is available.</span><span class="hljs-comment">// Using in C++14 will get warning.</span><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"Hello C++17 "</span> &lt;&lt; a &lt;&lt; <span class="hljs-string">" "</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">" "</span> &lt;&lt; b &lt;&lt; <span class="hljs-built_in">endl</span>;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></div><p><img src="dev-testc17.png" srcset="/img/loading.gif" alt></p><h2 id="3-注意事項"><a href="#3-注意事項" class="headerlink" title="3. 注意事項"></a>3. 注意事項</h2><p>如果你是競賽選手，你應該知道 GNU 的編譯器有個 <strong>bits/stdc++.h</strong> 引入所有函式庫的黑魔法</p><p>但是直接使用會 Compile Error</p><p><img src="dev-c17-warning.png" srcset="/img/loading.gif" alt></p><p>個人爬了一下 Reddit 的 C++ 版</p><p>得知 C++17 的 <code>filesystem</code> 跟 <code>charconv</code> 在 Windows 是無法得到原生支援的</p><p>只有 Unix 的相關成員才能做得到（E.g. Mac / Linux）</p><p>所以前面 <strong>bits/stdc++.h</strong> include 進來以前先把 <code>filesystem</code> 跟 <code>charconv</code> Define 掉</p><div class="hljs"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _GLIBCXX_FILESYSTEM 1</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _GLIBCXX_CHARCONV 1</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-built_in">std</span>::tuple&lt;<span class="hljs-keyword">char</span>, <span class="hljs-keyword">int</span>, <span class="hljs-keyword">bool</span>&gt; mytuple()&#123;    <span class="hljs-keyword">char</span> a = <span class="hljs-string">'a'</span>;    <span class="hljs-keyword">int</span> i = <span class="hljs-number">123</span>;    <span class="hljs-keyword">bool</span> b = <span class="hljs-literal">true</span>;    <span class="hljs-keyword">return</span> <span class="hljs-built_in">std</span>::make_tuple(a, i, b);&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-keyword">auto</span> [a, i, b] = mytuple();<span class="hljs-comment">// Structured Bindings in C++17 is available.</span><span class="hljs-comment">// Using in C++14 will get warning.</span><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"Hello C++17 "</span> &lt;&lt; a &lt;&lt; <span class="hljs-string">" "</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">" "</span> &lt;&lt; b &lt;&lt; <span class="hljs-built_in">endl</span>;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></div><h2 id="後記-Afterword"><a href="#後記-Afterword" class="headerlink" title="後記 Afterword"></a>後記 Afterword</h2><p>我後來發現 Code::Blocks 用 C++17 的 <strong>bits/stdc++.h</strong> 也有同個問題。</p><p>果然真的沒有原生 Windows 支援（唯一希望應該是 MSVC++ 的編譯器）</p><p>我想這就是 MinGW 一直沒有讓 G++ 上去 9.2.0 的關係吧！</p>]]></content>
      
      
      <categories>
          
          <category> 程式 </category>
          
          <category> Dev-C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程式 </tag>
            
            <tag> Dev-C++ </tag>
            
            <tag> 更新 </tag>
            
            <tag> 競賽 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c421. pA 雲端列印</title>
      <link href="/2019/11/23/zj-c421/"/>
      <url>/2019/11/23/zj-c421/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-Problem"><a href="#題目-Problem" class="headerlink" title="題目 Problem"></a>題目 Problem</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=c421" target="_blank" rel="noopener">題目連結：https://zerojudge.tw/ShowProblem?problemid=c421</a></p><a id="more"></a><h3 id="敘述-Description"><a href="#敘述-Description" class="headerlink" title="敘述 Description"></a>敘述 Description</h3><p>雲端列印服務公司提出一個新型服務。</p><p>該公司有 n 台 3D 印表機,</p><p>其中印表機 P1,P2, …, Pk 用以優先服務最為重要客戶,</p><p>印表機 Pk+1, Pk+2, …, Pn 列印速度較慢,用以優先服務一般客戶。</p><p>每個客戶依該年度所選擇服務等級及所繳交費用可有不同的列印優先權, 以 1, …, 10000 表示之;</p><p>10000 代表最高列印優先權,1 代表最低列印優先權。</p><p>為了不讓低列印優先權的客戶永無止盡的等待,</p><p>印表機 P1, P2, …, Pk 一旦有空,等待的工作中優先權最高的工作就會被交付列印;</p><p>而印表機 Pk+1, Pk+2, …, Pn一旦有空, 等待的工作中優先權最低的工作就會被交付列印。</p><p>請寫一個程式列舉交付列印工作的順序。</p><h3 id="輸入-Input"><a href="#輸入-Input" class="headerlink" title="輸入 Input"></a>輸入 Input</h3><p>輸入只有一行,共有不定數量的整數,</p><p>整數可為{-2, -1, 0, 1, 2, …, 10000},兩整數之間以一個空白隔開。</p><p>-2 表示印表機 P1, P2, …, Pk其中一台有空, 可以列印最高優先權的工作;</p><p>-1 表示印表機 Pk+1, Pk+2, …, Pn其中一台有空, 可以列印最低優先權的工作;1, 2, …, 10000</p><p>代表新增一個優先權為該數字之工作;</p><p>0 則代表輸入結束。</p><p>若輸入為 -1 或 -2但無等待列印的工作,則不列印,需等待下一個 -1 或 -2 才再列印新的工作。</p><h3 id="輸出-Output"><a href="#輸出-Output" class="headerlink" title="輸出 Output"></a>輸出 Output</h3><p>請依被列印工作的順序,輸出該工作的優先權代號,之後緊接著一個空白。</p><p>尚未交付列印的工作不需輸出。</p><h3 id="範例輸入-Sample-Input"><a href="#範例輸入-Sample-Input" class="headerlink" title="範例輸入 Sample Input"></a>範例輸入 Sample Input</h3><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-comment">// Example 1</span><span class="hljs-number">20</span> <span class="hljs-number">15</span> <span class="hljs-number">10</span> <span class="hljs-number">-2</span> <span class="hljs-number">-1</span> <span class="hljs-number">-1</span> <span class="hljs-number">0</span><span class="hljs-comment">// Example 2</span><span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">-2</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">-1</span> <span class="hljs-number">7</span> <span class="hljs-number">0</span></code></pre></div><h3 id="範例輸出-Sample-Output"><a href="#範例輸出-Sample-Output" class="headerlink" title="範例輸出 Sample Output"></a>範例輸出 Sample Output</h3><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-comment">// Example 1 </span><span class="hljs-number">20</span> <span class="hljs-number">10</span> <span class="hljs-number">15</span><span class="hljs-comment">// Example 2</span><span class="hljs-number">3</span> <span class="hljs-number">1</span></code></pre></div><h3 id="提示-Hint"><a href="#提示-Hint" class="headerlink" title="提示 Hint"></a>提示 Hint</h3><blockquote><p>本題共有五組測試資料。每組可有多個輸入檔案,全部答對該組才得分。<br>第一組 15 分,最多 11 個工作需要被列印,且只有一次交付列印指令。<br>第二組 15 分,最多 20 個工作需要被列印,且只有二次交付列印指令。<br>第三組 20 分,最多 50 個工作需要被列印,且最多有 25 次交付列印指令。<br>第四組 20 分,最多 15,000 個工作需要被列印或交付列印。<br>第五組 30 分,最多 500,000 個工作需要被列印或交付列印。</p></blockquote><p>使用 C++作答的同學,請在程式碼開頭加上#include,並利用 scanf讀入資料。</p><p>使用cin讀入資料可能會因為讀入效率太差以致於程式執行時間超過限制。</p><h2 id="題解-Solution"><a href="#題解-Solution" class="headerlink" title="題解 Solution"></a>題解 Solution</h2><p>multiset 的 erase 如果是代入數字，他不會是刪除一個，而是那個數字全部刪除 = =</p><p>所以要代入的是 iterator，也就是位置</p><p>multiset 會自動幫我們排序好，由小至大</p><p>m.begin()，就是最小。</p><p>m.rbegin()，就是反向的開始，就是最尾端，也就是最大。</p><p>可是 erase 只能代入 iterator，不能是 reverse_iterator</p><p>所以還要再把位址轉過來（或者你直接 end()，做遞減運算子也可以）</p><h3 id="程式碼-Accepted-Code"><a href="#程式碼-Accepted-Code" class="headerlink" title="程式碼 Accepted Code"></a>程式碼 Accepted Code</h3><div class="hljs"><pre><code class="hljs cpp"><span class="hljs-comment">/*    Author: Jerry Yang C.H. (tico88612)    Date: 2019/11/22*/</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<span class="hljs-keyword">typedef</span> pair&lt;ll, ll&gt; pii;<span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-keyword">double</span>,<span class="hljs-keyword">double</span>&gt; pdd;<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SQ(i) ((i)*(i))</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MEM(a, b) memset(a, (b), sizeof(a))</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SZ(i) int(i.size())</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> FOR(i, j, k, in) for (int i=j ; i&lt;k ; i+=in)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> RFOR(i, j, k, in) for (int i=j ; i&gt;=k ; i-=in)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> REP(i, j) FOR(i, 0, j, 1)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> REP1(i,j) FOR(i, 1, j+1, 1)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> RREP(i, j) RFOR(i, j, 0, 1)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ALL(_a) _a.begin(),_a.end()</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MP make_pair</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PB push_back</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> EB emplace_back</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> X first</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> Y second</span><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> tmd</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> debug(...) do&#123;\    fprintf(stderr,<span class="hljs-meta-string">"%s - %d (%s) = "</span>,__PRETTY_FUNCTION__,__LINE__,#__VA_ARGS__);\    _do(__VA_ARGS__);\&#125;while(0)</span><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<span class="hljs-keyword">void</span> _do(T &amp;&amp;_x)&#123;<span class="hljs-built_in">cerr</span>&lt;&lt;_x&lt;&lt;<span class="hljs-built_in">endl</span>;&#125;<span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T,<span class="hljs-keyword">typename</span> ...S&gt; <span class="hljs-keyword">void</span> _do(T &amp;&amp;_x,S &amp;&amp;...<span class="hljs-keyword">_t</span>)&#123;<span class="hljs-built_in">cerr</span>&lt;&lt;_x&lt;&lt;<span class="hljs-string">" ,"</span>;_do(<span class="hljs-keyword">_t</span>...);&#125;<span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> _a,<span class="hljs-keyword">typename</span> _b&gt; ostream&amp; <span class="hljs-keyword">operator</span> &lt;&lt; (ostream &amp;_s,<span class="hljs-keyword">const</span> pair&lt;_a,_b&gt; &amp;_p)&#123;<span class="hljs-keyword">return</span> _s&lt;&lt;<span class="hljs-string">"("</span>&lt;&lt;_p.X&lt;&lt;<span class="hljs-string">","</span>&lt;&lt;_p.Y&lt;&lt;<span class="hljs-string">")"</span>;&#125;<span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> It&gt; ostream&amp; _OUTC(ostream &amp;_s,It _ita,It _itb)&#123;    _s&lt;&lt;<span class="hljs-string">"&#123;"</span>;    <span class="hljs-keyword">for</span>(It _it=_ita;_it!=_itb;_it++)    &#123;        _s&lt;&lt;(_it==_ita?<span class="hljs-string">""</span>:<span class="hljs-string">","</span>)&lt;&lt;*_it;    &#125;    _s&lt;&lt;<span class="hljs-string">"&#125;"</span>;    <span class="hljs-keyword">return</span> _s;&#125;<span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> _a&gt; ostream &amp;<span class="hljs-keyword">operator</span> &lt;&lt; (ostream &amp;_s,<span class="hljs-built_in">vector</span>&lt;_a&gt; &amp;_c)&#123;<span class="hljs-keyword">return</span> _OUTC(_s,ALL(_c));&#125;<span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> _a&gt; ostream &amp;<span class="hljs-keyword">operator</span> &lt;&lt; (ostream &amp;_s,<span class="hljs-built_in">set</span>&lt;_a&gt; &amp;_c)&#123;<span class="hljs-keyword">return</span> _OUTC(_s,ALL(_c));&#125;<span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> _a&gt; ostream &amp;<span class="hljs-keyword">operator</span> &lt;&lt; (ostream &amp;_s,<span class="hljs-built_in">deque</span>&lt;_a&gt; &amp;_c)&#123;<span class="hljs-keyword">return</span> _OUTC(_s,ALL(_c));&#125;<span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> _a,<span class="hljs-keyword">typename</span> _b&gt; ostream &amp;<span class="hljs-keyword">operator</span> &lt;&lt; (ostream &amp;_s,<span class="hljs-built_in">map</span>&lt;_a,_b&gt; &amp;_c)&#123;<span class="hljs-keyword">return</span> _OUTC(_s,ALL(_c));&#125;<span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> <span class="hljs-keyword">_t</span>&gt; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pary</span><span class="hljs-params">(<span class="hljs-keyword">_t</span> _a,<span class="hljs-keyword">_t</span> _b)</span></span>&#123;_OUTC(<span class="hljs-built_in">cerr</span>,_a,_b);<span class="hljs-built_in">cerr</span>&lt;&lt;<span class="hljs-built_in">endl</span>;&#125;<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IOS()</span><span class="hljs-meta">#<span class="hljs-meta-keyword">else</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> debug(...)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pary(...)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">'\n'</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IOS() ios_base::sync_with_stdio(0);cin.tie(0)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><span class="hljs-keyword">const</span> ll MOD = <span class="hljs-number">1000000007</span>;<span class="hljs-keyword">const</span> ll INF = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> iNF = <span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">// const ll MAXN = </span><span class="hljs-comment">/********** Good Luck :) **********/</span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    IOS();    <span class="hljs-keyword">int</span> enter;    <span class="hljs-keyword">int</span> fir = <span class="hljs-number">1</span>;    <span class="hljs-built_in">multiset</span>&lt;<span class="hljs-keyword">int</span>&gt; m;    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span> &gt;&gt; enter &amp;&amp; enter)&#123;        <span class="hljs-keyword">if</span>(enter &gt; <span class="hljs-number">0</span>)&#123;            m.insert(enter);        &#125;        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(enter == <span class="hljs-number">-1</span>)&#123;            <span class="hljs-keyword">if</span>(SZ(m) &gt; <span class="hljs-number">0</span>)&#123;                <span class="hljs-keyword">if</span>(!fir)                    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">" "</span>;                <span class="hljs-keyword">else</span>                    fir = <span class="hljs-number">0</span>;                <span class="hljs-built_in">cout</span> &lt;&lt; *m.begin();                m.erase(m.begin());            &#125;        &#125;        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(enter == <span class="hljs-number">-2</span>)&#123;            <span class="hljs-keyword">if</span>(SZ(m) &gt; <span class="hljs-number">0</span>)&#123;                <span class="hljs-keyword">if</span>(!fir)                    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">" "</span>;                <span class="hljs-keyword">else</span>                    fir = <span class="hljs-number">0</span>;                <span class="hljs-built_in">cout</span> &lt;&lt; *m.rbegin();                m.erase(next(m.rbegin()).base());            &#125;        &#125;    &#125;    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">'\n'</span>;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></div><h2 id="後記-Afterword"><a href="#後記-Afterword" class="headerlink" title="後記 Afterword"></a>後記 Afterword</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=a091" target="_blank" rel="noopener">ZJ —— 今晚打老虎</a></p><p>這題也可以用 multiset 完成！</p>]]></content>
      
      
      <categories>
          
          <category> 解題區 </category>
          
          <category> 解題報告書 - ZeroJudge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> multiset </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何問個願意讓人回答的程式問題</title>
      <link href="/2019/11/21/how-to-ask-a-good-question/"/>
      <url>/2019/11/21/how-to-ask-a-good-question/</url>
      
        <content type="html"><![CDATA[<p>有鑒於社團版上發問風氣不好，故此特發一篇新手教學「如何問個願意讓人回答的程式問題」<br>老手或電神請直接關掉或回上一頁</p><a id="more"></a><h2 id="程式語言讀書會-X-拍賣會"><a href="#程式語言讀書會-X-拍賣會" class="headerlink" title="程式語言讀書會(X)拍賣會(?)"></a>程式語言讀書會(X)拍賣會(?)</h2><p>大約從 11 月初開始，常常冒出一些「哪裡出了問題呢」「怎麼跑不出來」「有哪個大大發現有那裡錯誤嗎」<br>貼出錯誤訊息、或者就在 FB 上「直接」貼程式碼<br>或者直接丟一句說「請問題目怎麼解」，貼出題目敘述<br>然後留言就幫忙回答(X)開始喊價(O)</p><p>嗯～其實想說的是，問問題的目的要做什麼？<br>你是希望：</p><ol><li>理解原因、原理，並且獲得知識、解答</li><li>直接貼給我答案</li></ol><p>如果你是選項 2.，你直接貼出價碼，乖乖付錢，找別人幫你寫就好<br>你也有你自己的專業，朋友想要請你做你專業的事情，還要免費付出，你會想接嗎？<br><strong>「別人努力得到的，你憑什麼去免費取呢？」</strong></p><p>如果你是選項 1.，那就看好這篇文章吧！</p><h2 id="問題守則"><a href="#問題守則" class="headerlink" title="問題守則"></a>問題守則</h2><p>每個人都可以問問題，不分難易都可以問<br>每個人都有新手時期，有問題會發問是正常的</p><h3 id="1-你想要做什麼結果？"><a href="#1-你想要做什麼結果？" class="headerlink" title="1. 你想要做什麼結果？"></a>1. 你想要做什麼結果？</h3><p>說明你的目標，別人才知道要做什麼<br>程式題目要附上文件、解題連結<br>如果你是自己想寫的，說明跟要求盡量詳細</p><h3 id="2-現在跑出什麼情況？"><a href="#2-現在跑出什麼情況？" class="headerlink" title="2. 現在跑出什麼情況？"></a>2. 現在跑出什麼情況？</h3><p><strong>錯誤Ｘ：只是打「怎麼跑不出來」「有哪個大大發現有那裡錯誤嗎」</strong></p><p>這樣問問題只會讓別人覺得你是伸手牌，要請私人家教之類的請直接付錢</p><p><strong>正確Ｏ：錯誤訊息詳列出來，錯誤訊息請事先 Google 找好，語法錯誤請參考該語言的範例程式，Google 方式請參考第 4 點</strong></p><h3 id="3-你覺得是什麼問題？可能解法？"><a href="#3-你覺得是什麼問題？可能解法？" class="headerlink" title="3. 你覺得是什麼問題？可能解法？"></a>3. 你覺得是什麼問題？可能解法？</h3><p>你一定會有當前的 Code 或當前的想法</p><p>如果是 OJ 解題者，應該會拿到 WA, TLE, MLE, RE 之類的錯誤<br>就請你把當前的想法打出來，不要只是說「我拿到了 WA」這類簡短語句</p><p>有程式碼也可以貼上來，貼上方式請參考第 5 點 </p><h3 id="4-Google-查了什麼？"><a href="#4-Google-查了什麼？" class="headerlink" title="4. Google 查了什麼？"></a>4. Google 查了什麼？</h3><p>這裡先不討論會不會 Google 搜尋（因為有些人不會，畢竟下關鍵字會稍微吃一點技巧）</p><p><strong>這裡先教新手 Google 最簡單的方式：把錯誤訊息、錯誤代碼通通貼上去</strong></p><p>如果你會 Google 的話，你可以把搜尋看到的東西放上來<br>哪一句話不懂、哪些覺得跟你的想像有差距都可以問</p><p>如果你不會 Google，也可以禮貌性詢問「請問這個知識點的關鍵字是什麼呢？」<br>（當然，如果你每個貼文都一直問很基礎的問題，別人也會覺得煩，也請盡快學會如何 Google 搜尋）</p><h3 id="5-程式碼排版"><a href="#5-程式碼排版" class="headerlink" title="5. 程式碼排版"></a>5. 程式碼排版</h3><p><strong>錯誤Ｘ：「直接貼在 FB 上」、「手機拍照」</strong></p><p>你看了眼睛不會痛<br><strong>但不代表別人眼睛不會痛</strong><br><strong>但不代表別人眼睛不會痛</strong><br><strong>但不代表別人眼睛不會痛</strong><br>因為很重要所以說三次，可以讓別人舒服地看你的問題才是正確的</p><p><strong>正確Ｏ：「放在貼 Code 網站」、「螢幕截圖」</strong></p><p>以下網站都可以貼 Code，當然不只這些：</p><ol><li><a href="https://ideone.com" target="_blank" rel="noopener">https://ideone.com</a></li><li><a href="http://codepad.org/" target="_blank" rel="noopener">http://codepad.org/</a></li><li><a href="https://gist.github.com/" target="_blank" rel="noopener">https://gist.github.com/</a></li><li><a href="https://pastebin.com/" target="_blank" rel="noopener">https://pastebin.com/</a></li><li><a href="https://repl.it/" target="_blank" rel="noopener">https://repl.it/</a></li></ol><h3 id="6-問完不要刪文"><a href="#6-問完不要刪文" class="headerlink" title="6. 問完不要刪文"></a>6. 問完不要刪文</h3><p>也不算是守則，算是禮儀</p><p>有些新手會覺得問基礎問題很丟臉想刪掉<br>前面有說了，每個人都有新手時期，問簡單問題都沒關係</p><p>如果你刪文了，其實會給別人的感受不好<br>感覺像是被利用完就丟的感覺（想不到比較恰當的比喻@@）</p><p>問完問題最多可以直接關留言，但不要直接刪文</p><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>至少不要讓別人覺得</p><p><img src="comming.jpg" srcset="/img/loading.gif" alt></p><p>遵守上述的原則，至少不會被討厭或被留言攻擊</p><p>維護社團風氣你我有責，共勉之！</p><h3 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h3><p>話說，為什麼不遵守原則的新手文，都這麼容易釣出電神？你有頭緒嗎？</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程式 </tag>
            
            <tag> 新手 </tag>
            
            <tag> 問題 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>結束 2019 年的暑假</title>
      <link href="/2019/09/18/2019-summer/"/>
      <url>/2019/09/18/2019-summer/</url>
      
        <content type="html"><![CDATA[<p>暑假前開了一堆蠻有意義的支線</p><a id="more"></a><h2 id="Digi-Talent-計畫"><a href="#Digi-Talent-計畫" class="headerlink" title="Digi Talent 計畫"></a>Digi Talent 計畫</h2><p>我想等 12 月計畫結束後，再來打數篇過程心得文</p><p>整個實習根本不可能用一篇寫完，應該會分好幾個過程</p><h2 id="NCPU-2019"><a href="#NCPU-2019" class="headerlink" title="NCPU 2019"></a>NCPU 2019</h2><p>NCPU 叫做「全國私立大專校院程式競賽」</p><p>指揮學弟<del>當奴隸</del>翻譯題目猜測資，我負責吃點心 <del>Coding</del></p><p>第一次出征就拿到名次 6 / 45 隊伍</p><p>之後也有一篇獨立的過程心得文<del>，等我有空再寫</del></p><h2 id="Digi-Talent-必修課-——-資料科學"><a href="#Digi-Talent-必修課-——-資料科學" class="headerlink" title="Digi Talent 必修課 —— 資料科學"></a>Digi Talent 必修課 —— 資料科學</h2><p>兩次實體上課 7/15 開始 跟 7/29 結訓</p><p>要報告小專題，因為中間跑去清大當營隊工人，直接把隊友放生</p><p>然後，就躺著過了(✪ω✪)</p><h2 id="清大暑期程式競賽集訓營-工人"><a href="#清大暑期程式競賽集訓營-工人" class="headerlink" title="清大暑期程式競賽集訓營 工人"></a>清大暑期程式競賽集訓營 工人</h2><p>培訓的 5 ~ 6 天都一直在寫程式，聽大神講課，吃點心，幫忙學員 AC 掉簡單題</p><p>營隊主題是「為美好的世界獻上祝福」</p><p>工人們投票出來是「來自深淵」</p><p>最後看的是「烏鴉坐飛機」（<strong>成龍歷險記</strong>）</p><p>我：？？？？？？</p><p>去清大也交了一些朋友，GitHub 也多一個 Follower</p><h2 id="彈鋼琴"><a href="#彈鋼琴" class="headerlink" title="彈鋼琴"></a>彈鋼琴</h2><p>後來迷上「來自深淵」這部動漫</p><p>很喜歡「Hanezeve Caradhina」，但目標是彈「Deep in Abyss」</p><p>讓我很想重學鋼琴啦！</p><h2 id="商業企劃-amp-簡報製作"><a href="#商業企劃-amp-簡報製作" class="headerlink" title="商業企劃 &amp; 簡報製作"></a>商業企劃 &amp; 簡報製作</h2><p>工研院辦的活動</p><p>講師：黃永猛</p><p>之後也會有獨立的心得文，不過教材就不公開了（教材版權為講師本人），他說只分享給有緣的人 OwO</p><p>最後以「參訪新竹工研院、清大暑期程式競賽集訓營慶功宴」結束這個暑假</p><h2 id="新竹工研院"><a href="#新竹工研院" class="headerlink" title="新竹工研院"></a>新竹工研院</h2><p>參訪之後也會有獨立的心得文，想講的是，中秋演唱會真的精彩啊！！</p><p>茄子蛋、李佳歡、李千娜、Matzka</p><p><img src="itri-mid-autumn.jpg" srcset="/img/loading.gif" alt="音樂跟著月亮走 —— 圖源：工研院"></p><p>後來回去聽 Matzka 的 一朵花，感覺原曲很慢，唱現場可能有加快，但我覺得現場比較好聽 OwO</p><h2 id="清大暑期程式競賽集訓營-慶功宴"><a href="#清大暑期程式競賽集訓營-慶功宴" class="headerlink" title="清大暑期程式競賽集訓營 慶功宴"></a>清大暑期程式競賽集訓營 慶功宴</h2><p>就是吃，沒了 OwO</p><h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2><p>前陣子筆電的罷工也讓我心疲憊了一陣子</p><p>不過，我再度重返，已經能繼續前進了，加油！</p><p>但 disqus 的排版有點爛掉了，先暫時關閉留言 QQ</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 暑假 </tag>
            
            <tag> Digi </tag>
            
            <tag> NCPU </tag>
            
            <tag> 清大暑期程式競賽集訓營 </tag>
            
            <tag> 鋼琴 </tag>
            
            <tag> 工研院 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>e378. 撞來撞去</title>
      <link href="/2019/09/18/zj-e378/"/>
      <url>/2019/09/18/zj-e378/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-Problem"><a href="#題目-Problem" class="headerlink" title="題目 Problem"></a>題目 Problem</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=e378" target="_blank" rel="noopener">題目連結：https://zerojudge.tw/ShowProblem?problemid=e378</a></p><a id="more"></a><h3 id="敘述-Description"><a href="#敘述-Description" class="headerlink" title="敘述 Description"></a>敘述 Description</h3><p>現在地板上有兩個立方體和一面垂直於地板的牆壁</p><p>離牆壁較遠的立方體以等速撞上另一個立方體,使其撞上牆壁並以原路徑反彈</p><p>假設沒有摩擦力且所有碰撞均為完美彈性碰撞(也就是沒有能量散失)</p><p>且離牆壁較遠的立方體的質量是離牆壁較近的立方體的10x倍</p><p>給你x,請求出總共會碰撞幾次</p><h3 id="輸入-Input"><a href="#輸入-Input" class="headerlink" title="輸入 Input"></a>輸入 Input</h3><p>每一行一個非負偶數x(x&lt;923)</p><h3 id="輸出-Output"><a href="#輸出-Output" class="headerlink" title="輸出 Output"></a>輸出 Output</h3><p>總共會碰撞幾次</p><h3 id="範例輸入-Sample-Input"><a href="#範例輸入-Sample-Input" class="headerlink" title="範例輸入 Sample Input"></a>範例輸入 Sample Input</h3><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-number">0</span></code></pre></div><h3 id="範例輸出-Sample-Output"><a href="#範例輸出-Sample-Output" class="headerlink" title="範例輸出 Sample Output"></a>範例輸出 Sample Output</h3><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-number">3</span></code></pre></div><h3 id="提示-Hint"><a href="#提示-Hint" class="headerlink" title="提示 Hint"></a>提示 Hint</h3><p>輸出的數字可能很大,但是跟大數運算無關</p><p>還有,拜託知道的人不要破梗</p><h2 id="題解-Solution"><a href="#題解-Solution" class="headerlink" title="題解 Solution"></a>題解 Solution</h2><p>想必都點到這裡了，應該是解不出來的，對吧？<br>那就來破梗吧！答案就在作者身上</p><p>……<br>……<br>……</p><p>什麼？你還是不知道？<br>給你看這個影片吧！</p><div class="video-container"><iframe src="//www.youtube.com/embed/8z5yUP2C9g4" frameborder="0" allowfullscreen></iframe></div><p>至於為什麼，參考影片就放這裡，自己看吧！</p><p>3B1B —— 偏向數學解答（有中文 CC 字幕）</p><div class="video-container"><iframe src="//www.youtube.com/embed/jsYwFizhncE" frameborder="0" allowfullscreen></iframe></div><p>佑來了 —— 偏向物理解答</p><div class="video-container"><iframe src="//www.youtube.com/embed/bNBT5w6zRYc" frameborder="0" allowfullscreen></iframe></div><h3 id="程式碼-Accepted-Code"><a href="#程式碼-Accepted-Code" class="headerlink" title="程式碼 Accepted Code"></a>程式碼 Accepted Code</h3><div class="hljs"><pre><code class="hljs cpp"><span class="hljs-comment">/*    Author: Jerry Yang C.H. (tico88612)    Date: 2019/9/18*/</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-built_in">string</span> pi = <span class="hljs-string">"314159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196442881097566593344612847564823378678316527120190914564856692346034861045432664821339360726024914127372458700660631558817488152092096282925409171536436789259036001133053054882046652138414695194151160943305727036575959195309218611738193261179310511854807446237996274956735188575272489122793818301194912983367336244065664308602139494639522473719070217986094370277053921717629317675238467481846766940513"</span>;<span class="hljs-comment">/********** Good Luck :) **********/</span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    ios_base::sync_with_stdio(<span class="hljs-number">0</span>);<span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);    <span class="hljs-keyword">int</span> N;    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">cin</span> &gt;&gt; N)&#123;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= N / <span class="hljs-number">2</span>; i++)            <span class="hljs-built_in">cout</span> &lt;&lt; pi[i];        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">'\n'</span>;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></div><h2 id="後記-Afterword"><a href="#後記-Afterword" class="headerlink" title="後記 Afterword"></a>後記 Afterword</h2><p>看到這題目我還在想這到底是在<del>供三小</del><br>在看到兩個立方體、碰撞、$10^{x}$<br>才想起以前有看過類似的東西</p>]]></content>
      
      
      <categories>
          
          <category> 解題區 </category>
          
          <category> 解題報告書 - ZeroJudge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 建表 </tag>
            
            <tag> PI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>e338. 放暑假了!!!!!...可惜要上暑輔...開學後還要模考...</title>
      <link href="/2019/08/24/zj-e338/"/>
      <url>/2019/08/24/zj-e338/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-Problem"><a href="#題目-Problem" class="headerlink" title="題目 Problem"></a>題目 Problem</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=e338" target="_blank" rel="noopener">題目連結：https://zerojudge.tw/ShowProblem?problemid=e338</a></p><a id="more"></a><h3 id="敘述-Description"><a href="#敘述-Description" class="headerlink" title="敘述 Description"></a>敘述 Description</h3><p>段考後的延平:</p><p><a href="https://drive.google.com/file/d/1j4qESZGdI0jQW6uuxcSb7tfNsq_SB_vl/view?usp=sharing" target="_blank" rel="noopener">https://drive.google.com/file/d/1j4qESZGdI0jQW6uuxcSb7tfNsq_SB_vl/view?usp=sharing</a></p><p>XD</p><h3 id="輸入-Input"><a href="#輸入-Input" class="headerlink" title="輸入 Input"></a>輸入 Input</h3><p>一行一個非負整數n(n&lt;2^31)</p><h3 id="輸出-Output"><a href="#輸出-Output" class="headerlink" title="輸出 Output"></a>輸出 Output</h3><p>輸出此整數在二進位中1的個數</p><h3 id="範例輸入-Sample-Input"><a href="#範例輸入-Sample-Input" class="headerlink" title="範例輸入 Sample Input"></a>範例輸入 Sample Input</h3><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-number">1</span><span class="hljs-number">2</span><span class="hljs-number">3</span><span class="hljs-number">4</span></code></pre></div><h3 id="範例輸出-Sample-Output"><a href="#範例輸出-Sample-Output" class="headerlink" title="範例輸出 Sample Output"></a>範例輸出 Sample Output</h3><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-number">1</span><span class="hljs-number">1</span><span class="hljs-number">2</span><span class="hljs-number">1</span></code></pre></div><h3 id="提示-Hint"><a href="#提示-Hint" class="headerlink" title="提示 Hint"></a>提示 Hint</h3><p>__builtin_popcount()夠快嗎?</p><p>2018/8/9 調整時限</p><h2 id="題解-Solution"><a href="#題解-Solution" class="headerlink" title="題解 Solution"></a>題解 Solution</h2><p>我覺得作者想考$O(1)$算法<br>但不幸的還是壓到了一般輸入<br>這題就算單純用 scanf / printf 還是不會過</p><p>分兩個大方向去 AC 這題</p><h3 id="1-讀取模板"><a href="#1-讀取模板" class="headerlink" title="1. 讀取模板"></a>1. 讀取模板</h3><p>參考這篇文：<a href="https://vincent97198.blogspot.com/2019/06/iozerojudge.html" target="_blank" rel="noopener">https://vincent97198.blogspot.com/2019/06/iozerojudge.html</a></p><p>我只是稍微改了個 EOF 而已（EOF 被定義為 -1，但是本題數入範圍可以暫時不管這東西XD）。</p><p>getchar_unlocked() 不是標準的函式，比起 getchar() 少做了很多事（詳情自己去 Google），但不要隨便使用在大型專案上。</p><p>putchar_unlocked() 亦同上。</p><h3 id="2-演算法"><a href="#2-演算法" class="headerlink" title="2. 演算法"></a>2. 演算法</h3><p>參考這篇文：<a href="https://www.geeksforgeeks.org/count-set-bits-in-an-integer/" target="_blank" rel="noopener">https://www.geeksforgeeks.org/count-set-bits-in-an-integer/</a></p><p>第四點就是先把 Bit 個數建表，然後 4 個 4 個讀取加起來</p><p>不過總複雜度也不是$O(1)$，嚴格來說似乎是$O(\log_{16}{N})$</p><h2 id="程式碼-Accepted-Code"><a href="#程式碼-Accepted-Code" class="headerlink" title="程式碼 Accepted Code"></a>程式碼 Accepted Code</h2><div class="hljs"><pre><code class="hljs cpp"><span class="hljs-comment">/*    Author: Jerry Yang C.H. (tico88612)    Date: 2019/8/18*/</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">redi</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">int</span> ret = <span class="hljs-number">0</span>, f = <span class="hljs-number">0</span>;    <span class="hljs-keyword">char</span> ch = getchar_unlocked();    <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(ch))    &#123;        <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">'-'</span>)            f = <span class="hljs-number">1</span>;        <span class="hljs-keyword">if</span>(ch == EOF)            <span class="hljs-keyword">return</span> EOF;        ch = getchar_unlocked();    &#125;    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(ch))    &#123;        ret = ret * <span class="hljs-number">10</span> + ch - <span class="hljs-number">48</span>;        ch = getchar_unlocked();    &#125;    <span class="hljs-keyword">return</span> f ? -ret : ret;&#125;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;    <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>)    &#123;        putchar_unlocked(<span class="hljs-string">'-'</span>);        x = -x;    &#125;    <span class="hljs-keyword">int</span> y = <span class="hljs-number">10</span>, len = <span class="hljs-number">1</span>;    <span class="hljs-keyword">while</span> (y &lt;= x)    &#123;        y *= <span class="hljs-number">10</span>;        len++;    &#125;    <span class="hljs-keyword">while</span> (len--)    &#123;        y /= <span class="hljs-number">10</span>;        putchar_unlocked(x / y + <span class="hljs-number">48</span>);        x %= y;    &#125;&#125;<span class="hljs-keyword">int</span> num_to_bits[<span class="hljs-number">16</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>,                       <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;;<span class="hljs-function"><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> <span class="hljs-title">countSetBitsRec</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> num)</span></span>&#123;    <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> == num)        <span class="hljs-keyword">return</span> num_to_bits[<span class="hljs-number">0</span>];    nibble = num &amp; <span class="hljs-number">0xf</span>;    <span class="hljs-keyword">return</span> num_to_bits[nibble] +           countSetBitsRec(num &gt;&gt; <span class="hljs-number">4</span>);&#125;<span class="hljs-comment">/********** Good Luck :) **********/</span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">int</span> n;    <span class="hljs-keyword">while</span>((n = redi()) != EOF)&#123;        print(countSetBitsRec(n));        putchar_unlocked(<span class="hljs-string">'\n'</span>);    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></div><h2 id="後記-Afterword"><a href="#後記-Afterword" class="headerlink" title="後記 Afterword"></a>後記 Afterword</h2><p>這個 Submission 是壓秒過的<br>排行上的應該也是建表過的（吧？）<br>記憶體都比我大很多（我的 100 KB，排行上的大多都 1 MB 以上）</p><p>前陣子的 ZeroJudge 常常出現有的沒的 IO 題<br>但這類的 IO 優化題也可能改天換個主機 Rejudge，搞不好全都 TLE 或全都 AC<br>也不是說這種題目不好，畢竟幾乎每個人都可以在上面出題，題目多樣性很夠 XD</p><p><strong>維持網站題目質量品質也是大家的責任</strong></p>]]></content>
      
      
      <categories>
          
          <category> 解題區 </category>
          
          <category> 解題報告書 - ZeroJudge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 建表 </tag>
            
            <tag> IO 優化 </tag>
            
            <tag> Bit 運算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Google Code Jam 2019 Qualification Round 亂寫の解題心得</title>
      <link href="/2019/04/08/gcj-2019-qr/"/>
      <url>/2019/04/08/gcj-2019-qr/</url>
      
        <content type="html"><![CDATA[<p><del>反正只要 30 分以上就可以進 Round 1 了</del></p><a id="more"></a><p>pA 可以 WA 到把 Penalty 飆超高我也是醉了啦！</p><h2 id="pA-Foregone-Solution"><a href="#pA-Foregone-Solution" class="headerlink" title="pA. Foregone Solution"></a>pA. Foregone Solution</h2><p>題意大致是說，給你個 $N$，請輸出正整數 $A, B$，並且 $A + B = N$<br>然後 $A, B$ 不能有任何的 $4$ 出現</p><p>一開始我是用$\div 2$方式去做的<br>但沒有考慮太多情況<br>然後就吃了5次WA</p><p>後來就想說$A = 1, B = N - 1$<br>如果$B$的某個位數為$4$<br>就把那個位數減去$1$加在$A$上<br>然後這個解法一次就過了…（ㄏㄏ）</p><p>本題 Hidden Test 只有 1 分<br>但$N$高達$10^{100}$，就直接用 Python 解了</p><div class="hljs"><pre><code class="hljs python">T = int(input())<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, T + <span class="hljs-number">1</span>):    N = int(input())    A = <span class="hljs-number">1</span>    B = N - <span class="hljs-number">1</span>    Run = <span class="hljs-number">1</span>    <span class="hljs-keyword">while</span> Run &lt; B:        NowE = B // Run        NowE = NowE % <span class="hljs-number">10</span>        <span class="hljs-keyword">if</span> NowE == <span class="hljs-number">4</span>:            A += Run            B -= Run        Run *= <span class="hljs-number">10</span>    print(<span class="hljs-string">"Case #"</span> + str(i) + <span class="hljs-string">": "</span> + str(A) + <span class="hljs-string">" "</span> + str(B))</code></pre></div><h2 id="pB-You-Can-Go-Your-Own-Way"><a href="#pB-You-Can-Go-Your-Own-Way" class="headerlink" title="pB. You Can Go Your Own Way"></a>pB. You Can Go Your Own Way</h2><p>題意大致是說，給你一個 $N\times N$ 的格子<br>找個路徑，只能往右走$E$跟往下走$S$<br>不能跟他給的路徑重複</p><p>就直接跟他相反就不會重複了<br>他走$E$，你就走$S$<br>他走$S$，你就走$E$</p><div class="hljs"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> GCC optimize (<span class="hljs-meta-string">"O2"</span>)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<span class="hljs-keyword">typedef</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; vi;<span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; pi;<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _ ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> FZ(n) memset((n),0,sizeof(n))</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> FMO(n) memset((n),-1,sizeof(n))</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> F first</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> S second</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PB push_back</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MP make_pair</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ALL(x) begin(x),end(x)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SZ(x) ((int)(x).size())</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> REP(i,a,b) for (int i = a; i &lt; b; i++)</span><span class="hljs-comment">// Let's Fight!</span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;_<span class="hljs-keyword">int</span> T;<span class="hljs-built_in">cin</span> &gt;&gt; T;REP(i, <span class="hljs-number">1</span>, T + <span class="hljs-number">1</span>)&#123;<span class="hljs-keyword">int</span> N;<span class="hljs-built_in">cin</span> &gt;&gt; N;<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"Case #"</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">": "</span>;<span class="hljs-built_in">string</span> enter;<span class="hljs-built_in">cin</span> &gt;&gt; enter;REP(j, <span class="hljs-number">0</span>, SZ(enter))&#123;<span class="hljs-keyword">if</span>(enter[j] == <span class="hljs-string">'S'</span>)<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"E"</span>;<span class="hljs-keyword">if</span>(enter[j] == <span class="hljs-string">'E'</span>)<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"S"</span>;&#125;<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">'\n'</span>;&#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></div><h2 id="pC-Cryptopangrams"><a href="#pC-Cryptopangrams" class="headerlink" title="pC. Cryptopangrams"></a>pC. Cryptopangrams</h2><p>應該就直接用 Python 寫，<del>不會寫，ToDo</del></p><h2 id="pD-Dat-Bae"><a href="#pD-Dat-Bae" class="headerlink" title="pD. Dat Bae"></a>pD. Dat Bae</h2><p>互動式題目，<del>不會寫，ToDo</del></p><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>pA 跟 pB 的 Visible Test 過就可以進 Round 1 了</p><p>另外兩題等有詳解 Code 再來試寫好了(X)</p>]]></content>
      
      
      <categories>
          
          <category> 比賽心得區 </category>
          
          <category> Google Code Jam </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Google Code Jam </tag>
            
            <tag> 2019 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>O(1)的費氏數列？公式解就一定是O(1)？</title>
      <link href="/2019/01/31/fibonacci-is-bigO1/"/>
      <url>/2019/01/31/fibonacci-is-bigO1/</url>
      
        <content type="html"><![CDATA[<p>我在撰寫此貼文時，原留言者已經刪留言了，反正就是說「費氏數列有公式解，複雜度就是$O(1)$」</p><a id="more"></a><p>於是一堆國手紛紛出籠，然後就……你看就知道了<br><a href="https://www.facebook.com/groups/pythontw/permalink/10158445814613438/" target="_blank" rel="noopener">原文連結：https://www.facebook.com/groups/pythontw/permalink/10158445814613438/</a></p><p>甚至出現 「$\pi$ 跟 $e$ 都存在月球上，這樣就存取最快了，$O(1)$！」</p><p><del>（果然用爛留言去釣高手是最快的辦法，$O(1)$！）</del></p><hr><h2 id="版上的大神在反串什麼？"><a href="#版上的大神在反串什麼？" class="headerlink" title="版上的大神在反串什麼？"></a>版上的大神在反串什麼？</h2><p>首先，先來簡單介紹時間複雜度（這只是大眾版的）<br>要計算最壞的時間複雜度我們會用 big-O</p><p>假設$n$是資料個數 或 計算大小<br>$O(1)$是常數複雜度<br>意思是說：計算量不會與 $n$ 的大小有任何關係，Ex.$1+2+…+N$的公式解</p><p>$O(\log{n})$是對數複雜度<br>意思是說：計算量會與 $n$ 的大小呈現對數關係，Ex.二分搜尋法</p><p>$O(n)$是線性複雜度<br>意思是說：計算量會與 $n$ 的大小呈現線性（直線）關係</p><h2 id="公式解就一定是O-1-？"><a href="#公式解就一定是O-1-？" class="headerlink" title="公式解就一定是O(1)？"></a>公式解就一定是O(1)？</h2><p>從1加到N的算式可以寫成這樣<br>$1+2+…+N=\dfrac{n(n+1)}{2}$</p><p>算式就要做一次乘法跟一次除法</p><p>不論$N$開多大，開到$10^{100}$，算式都只要做一次乘法跟一次除法就好</p><p><strong>可是費氏數列有公式解</strong></p><p>$Fibonacci(n)=\dfrac{\sqrt{5}}{5} \cdot \left[\left(\dfrac{1 + \sqrt{5}}{2}\right)^{n} - \left(\dfrac{1 - \sqrt{5}}{2}\right)^{n}\right]$</p><p>對，費氏數列有公式解，但是它不是$O(1)$</p><p>關鍵就是這個$\left(\dfrac{1 + \sqrt{5}}{2}\right)^{n}$ 跟 $\left(\dfrac{1 - \sqrt{5}}{2}\right)^{n}$</p><p>要算第$100$項，這東西就要乘$100$次<br>要算第$10000$項，這東西就要乘$10000$次<br>要算第$10^9$項，這東西就要乘$10^9$次</p><p>所以這是線性複雜度$O(n)$<br>（高手就知道這是$O(\log{n})$，這可以矩陣快速冪）</p><p><strong>$O(1)$的意義不是在快，而是資料量大小不論多少，他都是固定的計算次數。</strong></p><p>如果今天我設計了一個函數：<br>$n=1$，要計算次數是$10^8$，<br>$n=10^6$，要計算次數是$10^8$，<br>$n=10^{100}$，要計算次數是$10^8$，<br>不論$n$的大小，計算次數都是$10^8$。</p><p>時間複雜度：$O(1)$，因為計算次數跟$n$沒有任何關係</p><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>要下什麼總結呢？我只知道原Po在原文被歪樓後就被邊緣了QQ</p><p>然後原留言者也刪留言、關臉書了。</p><p><strong>如果討論是一直在堅持自己的意見，那就不叫討論了</strong></p><p>結果變成競程選手們茶餘飯後的話題</p><p>整體過程大概就是這樣啦！如果有錯誤，歡迎在底下留言討論！</p><h3 id="2019-02-15-更新"><a href="#2019-02-15-更新" class="headerlink" title="2019/02/15 更新"></a>2019/02/15 更新</h3><p><a href="https://www.facebook.com/groups/pythontw/permalink/10158487765003438/" target="_blank" rel="noopener">新文朝聖：https://www.facebook.com/groups/pythontw/permalink/10158487765003438/</a></p>]]></content>
      
      
      <categories>
          
          <category> 程式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 費氏數列 </tag>
            
            <tag> 公式解 </tag>
            
            <tag> 時間複雜度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷OJ P1031 均分纸牌</title>
      <link href="/2019/01/19/lg-1031/"/>
      <url>/2019/01/19/lg-1031/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-Problem"><a href="#題目-Problem" class="headerlink" title="題目 Problem"></a>題目 Problem</h2><p><a href="https://www.luogu.org/problemnew/show/P1031" target="_blank" rel="noopener">題目連結：https://www.luogu.org/problemnew/show/P1031</a></p><a id="more"></a><h3 id="敘述-Description"><a href="#敘述-Description" class="headerlink" title="敘述 Description"></a>敘述 Description</h3><p>有$N$堆纸牌，编号分别为 $1,2,…,N$。每堆上有若干张，但纸牌总数必为$N$的倍数。可以在任一堆上取若干张纸牌，然后移动。</p><p>移牌规则为：在编号为$1$堆上取的纸牌，只能移到编号为$2$的堆上；在编号为$N$的堆上取的纸牌，只能移到编号为$N−1$的堆上；其他堆上取的纸牌，可以移到相邻左边或右边的堆上。</p><p>现在要求找出一种移动方法，用最少的移动次数使每堆上纸牌数都一样多。</p><p>例如$N=4$，$4$堆纸牌数分别为：</p><p>①$9$②$8$③$17$④$6$</p><p>移动$3$次可达到目的：</p><p>从 ③ 取$4$张牌放到 ④ $（9,8,13,10）$-&gt; 从 ③ 取333张牌放到 ②$（9,11,10,10）$-&gt; 从 ② 取111张牌放到①$（10,10,10,10）$。</p><h3 id="輸入-Input"><a href="#輸入-Input" class="headerlink" title="輸入 Input"></a>輸入 Input</h3><p>两行</p><p>第一行为：$N$（$N$ 堆纸牌，$1 \leq N \leq 100$）</p><p>第二行为：$A_1,A_2, … ,A_n$（$N$堆纸牌，每堆纸牌初始数，$1 \leq A_i \leq 10000$）</p><h3 id="輸出-Output"><a href="#輸出-Output" class="headerlink" title="輸出 Output"></a>輸出 Output</h3><p>一行：即所有堆均达到相等时的最少移动次数。</p><h3 id="範例輸入-Sample-Input"><a href="#範例輸入-Sample-Input" class="headerlink" title="範例輸入 Sample Input"></a>範例輸入 Sample Input</h3><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-number">4</span><span class="hljs-symbol">9 </span><span class="hljs-number">8</span> <span class="hljs-number">17</span> <span class="hljs-number">6</span></code></pre></div><h3 id="範例輸出-Sample-Output"><a href="#範例輸出-Sample-Output" class="headerlink" title="範例輸出 Sample Output"></a>範例輸出 Sample Output</h3><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-number">3</span></code></pre></div><h2 id="題解-Solution"><a href="#題解-Solution" class="headerlink" title="題解 Solution"></a>題解 Solution</h2><p>Re:<a href="https://www.luogu.org/discuss/show/75812" target="_blank" rel="noopener">我没看懂我自己的想法，居然过了</a><br>因為沒有中國門號，無法在上面回，就留在這裡了</p><p>作法就是把差距移到下一個位置<br>也就是說這堆的牌把下一堆的牌拿過來平衡<br>反正下一堆不平衡從下下一堆再拿牌也沒關係</p><p>大概就是這樣</p><h3 id="程式碼-Accepted-Code"><a href="#程式碼-Accepted-Code" class="headerlink" title="程式碼 Accepted Code"></a>程式碼 Accepted Code</h3><div class="hljs"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _ ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);</span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-comment">// 參考來源：https://www.luogu.org/discuss/show/75812</span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">int</span> N,sum=<span class="hljs-number">0</span>;    <span class="hljs-built_in">cin</span>&gt;&gt;N;    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; enter(N);    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;N;i++)&#123;        <span class="hljs-built_in">cin</span>&gt;&gt;enter[i];        sum+=enter[i];    &#125;    <span class="hljs-keyword">int</span> avg=sum/N,timee=<span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;N<span class="hljs-number">-1</span>;i++)&#123;        <span class="hljs-keyword">if</span>(enter[i]!=avg)&#123;            enter[i+<span class="hljs-number">1</span>]+=enter[i]-avg;            timee++;        &#125;    &#125;    <span class="hljs-built_in">cout</span>&lt;&lt;timee&lt;&lt;<span class="hljs-string">'\n'</span>;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></div><h2 id="後記-Afterword"><a href="#後記-Afterword" class="headerlink" title="後記 Afterword"></a>後記 Afterword</h2><p>稍微看一下討論區，這題思路也蠻多的，可以好好嘗試其他的過程</p><p>本人試寫<a href="https://www.luogu.org" target="_blank" rel="noopener">洛谷OJ</a>，把「新手村」都刷光光了<br>難度排序還不錯，認識一下 NOI 或 NOIP 的題目<br>之後也會開始寫<a href="https://www.luogu.org" target="_blank" rel="noopener">洛谷OJ</a>的相關題解</p><p>（為何不用洛谷裡面的 Blog 呢？）</p><p>因為我沒有中國門號 QAQ</p>]]></content>
      
      
      <categories>
          
          <category> 解題區 </category>
          
          <category> 解題報告書 - 洛谷OJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>c878. 107北二5.議會質詢紀錄</title>
      <link href="/2018/11/22/zj-c878/"/>
      <url>/2018/11/22/zj-c878/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-Problem"><a href="#題目-Problem" class="headerlink" title="題目 Problem"></a>題目 Problem</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=c878" target="_blank" rel="noopener">題目連結：https://zerojudge.tw/ShowProblem?problemid=c878</a></p><a id="more"></a><h3 id="敘述-Description"><a href="#敘述-Description" class="headerlink" title="敘述 Description"></a>敘述 Description</h3><p>根據民主政治的精神，政府單位有責任到民意代表所組成的會議中接受質詢與監督。某議會的議長在會期開始前就和政府單位進行下面的溝通：「我們議會希望被質詢的官員每一次都要出席。如果有<strong>兩次以上的請假紀錄</strong>，或是<strong>連續三次以上請代理</strong>的同仁來接受質詢的話，恐怕會造成雙方溝通上的緊張。」<br>請你寫一隻程式來統計一下，當官員需要被質詢 N 次的情況下，有多少種官員出席紀錄可以保持府會的和諧關係。另外，由於答案可能會非常大，請回傳除以 100000007 之後的餘數。</p><h3 id="輸入-Input"><a href="#輸入-Input" class="headerlink" title="輸入 Input"></a>輸入 Input</h3><p>測試資料只有一行，只有一個正整數 N，代表某一官員所要接受質詢的次數。N 的範圍從 2 到 120000。</p><h3 id="輸出-Output"><a href="#輸出-Output" class="headerlink" title="輸出 Output"></a>輸出 Output</h3><p>輸出資料為一個數值，為能夠保持府會和諧的出席紀錄組合數量。</p><h3 id="範例輸入-Sample-Input"><a href="#範例輸入-Sample-Input" class="headerlink" title="範例輸入 Sample Input"></a>範例輸入 Sample Input</h3><div class="hljs"><pre><code class="hljs undefined">範例輸入一：<span class="hljs-number">2</span>範例輸入二：<span class="hljs-number">3</span></code></pre></div><h3 id="範例輸出-Sample-Output"><a href="#範例輸出-Sample-Output" class="headerlink" title="範例輸出 Sample Output"></a>範例輸出 Sample Output</h3><div class="hljs"><pre><code class="hljs undefined">範例輸出一：<span class="hljs-number">8</span>範例輸出二：<span class="hljs-number">19</span></code></pre></div><h3 id="提示-Hint"><a href="#提示-Hint" class="headerlink" title="提示 Hint"></a>提示 Hint</h3><p>範例輸入一：<br>八種組合列在下面：<br>[出席，出席][出席，代理][代理，出席]<br>[請假，出席][請假，代理][出席，請假]<br>[代理，請假][代理，代理]</p><p>範例輸入二：<br>會破壞行政單位和議會關係的紀錄組合：<br>[假假出][假出假][出假假][假假代][假代假]<br>[代假假][假假假][代代代]</p><h2 id="題解-Solution"><a href="#題解-Solution" class="headerlink" title="題解 Solution"></a>題解 Solution</h2><p>根據英國(?)研究顯示，看到 $Mod$ 題目，有 $87%$ 都是DP題<br>想了半天還是沒有想到DP轉移式<br>後來跟FB社團裡的大神求助後<br>才知道<strong>兩次以上的請假紀錄</strong>或是<strong>連續三次以上請代理</strong>需要分開寫</p><p>定義一下$dp[i][j][k]$<br>$i$是天數<br>$j$是請假天數<br>$k$是連續代理次數</p><p>所以可以這樣寫<br>$dp[120001][2][3]$</p><p>轉移式就可以這樣寫：<br>0次請假 且 0次連續代理 = 前一天的（0次請假 且 0次連續代理 + 0次請假 且 1次連續代理 + 0次請假 且 2次連續代理）</p><p>$$dp[i][0][0]=dp[i-1][0][0]+dp[i-1][0][1]+dp[i-1][0][2]$$</p><p>0次請假 且 1次連續代理 = 前一天的（0次請假 且 0次連續代理）</p><p>$$dp[i][0][1]=dp[i-1][0][0]$$</p><p>0次請假 且 2次連續代理 = 前一天的（0次請假 且 1次連續代理）</p><p>$$dp[i][0][2]=dp[i-1][0][1]$$</p><p>1次請假 且 0次連續代理 = 前一天的（0次請假 且 0次連續代理 + 0次請假 且 1次連續代理 + 0次請假 且 2次連續代理 + 1次請假 且 0次連續代理 + 1次請假 且 1次連續代理 + 1次請假 且 2次連續代理）</p><p>這裡的會有0次請假，因為之前沒有請假，代表他今天可以請假<br>這裡的會有1次請假，代表他今天出席</p><p>$$dp[i][1][0]=dp[i-1][0][0]+dp[i-1][0][1]+dp[i-1][0][2]+dp[i-1][1][0]+dp[i-1][1][1]+dp[i-1][1][2]$$</p><p>1次請假 且 1次連續代理 = 前一天的（1次請假 且 0次連續代理）</p><p>$$dp[i][1][1]=dp[i-1][1][0]$$</p><p>1次請假 且 2次連續代理 = 前一天的（1次請假 且 1次連續代理）</p><p>$$dp[i][1][2]=dp[i-1][1][1]$$</p><h3 id="程式碼-Accepted-Code"><a href="#程式碼-Accepted-Code" class="headerlink" title="程式碼 Accepted Code"></a>程式碼 Accepted Code</h3><div class="hljs"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _ ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);</span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> dp[<span class="hljs-number">120002</span>][<span class="hljs-number">2</span>][<span class="hljs-number">3</span>]=&#123;<span class="hljs-number">0</span>&#125;;dp[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;dp[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;dp[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt; <span class="hljs-number">120002</span>; ++i)&#123;dp[i][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=(dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]+dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]+dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>][<span class="hljs-number">2</span>])%<span class="hljs-number">100000007</span>;dp[i][<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]=dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]%<span class="hljs-number">100000007</span>;dp[i][<span class="hljs-number">0</span>][<span class="hljs-number">2</span>]=dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]%<span class="hljs-number">100000007</span>;dp[i][<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]=(dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]+dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]+dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>][<span class="hljs-number">2</span>]+dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]+dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]+dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">1</span>][<span class="hljs-number">2</span>])%<span class="hljs-number">100000007</span>;dp[i][<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]=(dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">1</span>][<span class="hljs-number">0</span>])%<span class="hljs-number">100000007</span>;dp[i][<span class="hljs-number">1</span>][<span class="hljs-number">2</span>]=(dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">1</span>][<span class="hljs-number">1</span>])%<span class="hljs-number">100000007</span>;&#125;<span class="hljs-keyword">int</span> N;<span class="hljs-built_in">cin</span>&gt;&gt;N;<span class="hljs-built_in">cout</span>&lt;&lt;(dp[N][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]+dp[N][<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]+dp[N][<span class="hljs-number">0</span>][<span class="hljs-number">2</span>]+dp[N][<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]+dp[N][<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]+dp[N][<span class="hljs-number">1</span>][<span class="hljs-number">2</span>])%<span class="hljs-number">100000007</span>&lt;&lt;<span class="hljs-string">'\n'</span>;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></div><h2 id="後記-Afterword"><a href="#後記-Afterword" class="headerlink" title="後記 Afterword"></a>後記 Afterword</h2><p>這題 Sine Wu 也分享了他的解法<br>之後來研究，研究完會貼出來分享<br>台南一中OJ有個類題 <a href="https://toj.tfcis.org/oj/pro/416/" target="_blank" rel="noopener">https://toj.tfcis.org/oj/pro/416/</a><br>測試資料高達 $N=10^9$<br>這種就只能寫矩陣快速冪<br>可以把$O(N)$變成$O(\log N)$</p>]]></content>
      
      
      <categories>
          
          <category> 解題區 </category>
          
          <category> 解題報告書 - ZeroJudge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>b981. YoJudge 預練(時間之章)</title>
      <link href="/2018/10/26/zj-b981/"/>
      <url>/2018/10/26/zj-b981/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-Problem"><a href="#題目-Problem" class="headerlink" title="題目 Problem"></a>題目 Problem</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=b981" target="_blank" rel="noopener">題目連結：https://zerojudge.tw/ShowProblem?problemid=b981</a></p><a id="more"></a><h3 id="敘述-Description"><a href="#敘述-Description" class="headerlink" title="敘述 Description"></a>敘述 Description</h3><p>　前幾天看到一隻 b961 YoJudge怪獸，感覺太強大了，所以先打Lo練功，期盼來日再戰YoJudge怪獸。<br>　這次任務較簡單，將以下各種格式的時間單位統一轉換為毫秒。 以下 x,y,z,a,b皆為非負整數<br>可能出現的時間單位格式如下：<br>xhour :代表 x 小時, 0&lt;=x&lt;24<br>xhym :代表 x 小時又 y 分鐘, 0&lt;=x&lt;24, 0&lt;=y&lt;60<br>xhymzs :代表 x 小時又 y 分鐘又 z 秒, 0&lt;=x&lt;24, 0&lt;=y&lt;60, 0&lt;=z&lt;60<br>ymin :代表 y 分鐘, 0&lt;=y&lt;60<br>ymzs :代表 y 分鐘又 z 秒, 0&lt;=y&lt;60, 0&lt;=z&lt;60<br>zs :代表 z 秒, 0&lt;=y&lt;60, 0&lt;=z&lt;60<br>z.as :代表 z 秒又 a*100毫秒, 0&lt;=z&lt;60, 0&lt;=a&lt;10<br>bms :代表 b 毫秒, 0&lt;=b&lt;1000</p><h3 id="輸入-Input"><a href="#輸入-Input" class="headerlink" title="輸入 Input"></a>輸入 Input</h3><p>多行直到 EOF，每行只有如上題目所說的時間格式，沒有空格</p><h3 id="輸出-Output"><a href="#輸出-Output" class="headerlink" title="輸出 Output"></a>輸出 Output</h3><p>將輸入的每一行換算為毫秒，輸出一行整數</p><h3 id="範例輸入-Sample-Input"><a href="#範例輸入-Sample-Input" class="headerlink" title="範例輸入 Sample Input"></a>範例輸入 Sample Input</h3><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-number">13</span>hour<span class="hljs-number">9</span>h20m<span class="hljs-number">23</span>h17m57s<span class="hljs-number">6</span>min<span class="hljs-number">34</span>m50s<span class="hljs-number">8</span>s<span class="hljs-number">19.7</span>s<span class="hljs-number">567</span>ms</code></pre></div><h3 id="範例輸出-Sample-Output"><a href="#範例輸出-Sample-Output" class="headerlink" title="範例輸出 Sample Output"></a>範例輸出 Sample Output</h3><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-number">46800000</span><span class="hljs-number">33600000</span><span class="hljs-number">83877000</span><span class="hljs-number">360000</span><span class="hljs-number">2090000</span><span class="hljs-number">8000</span><span class="hljs-number">19700</span><span class="hljs-number">567</span></code></pre></div><h3 id="提示-Hint"><a href="#提示-Hint" class="headerlink" title="提示 Hint"></a>提示 Hint</h3><h2 id="題解-Solution"><a href="#題解-Solution" class="headerlink" title="題解 Solution"></a>題解 Solution</h2><p>數字會先讀取，所以先存數字到 $tmp$ 裡面<br>讀到 $h$ 可能是 $h$ 或 $hour$，要自己判斷<br>讀到 $m$ 可能是 $m$ 或 $min$ 或 $ms$，$ms$ 是毫秒，要另外區隔<br>要注意小數點，反正小數點也只會在 $s$ 出現<br>出現小數點，就直接把數字放在 $s$ 就好<br>小數點後的數字另外判斷</p><h3 id="程式碼-Accepted-Code"><a href="#程式碼-Accepted-Code" class="headerlink" title="程式碼 Accepted Code"></a>程式碼 Accepted Code</h3><div class="hljs"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _ ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);</span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;_<span class="hljs-built_in">string</span> enter;<span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span>&gt;&gt;enter)&#123;<span class="hljs-keyword">int</span> h=<span class="hljs-number">0</span>,m=<span class="hljs-number">0</span>,s=<span class="hljs-number">0</span>,dot=<span class="hljs-number">0</span>,ms=<span class="hljs-number">0</span>,tmp=<span class="hljs-number">0</span>,dotyes=<span class="hljs-number">0</span>;<span class="hljs-keyword">for</span>(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;enter.length();i++)&#123;<span class="hljs-keyword">if</span>(enter[i]==<span class="hljs-string">'.'</span>)&#123;s=tmp;dotyes=<span class="hljs-number">1</span>;tmp=<span class="hljs-number">0</span>;&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-string">'0'</span>&lt;=enter[i]&amp;&amp;enter[i]&lt;=<span class="hljs-string">'9'</span>)&#123;tmp*=<span class="hljs-number">10</span>;tmp+=enter[i]-<span class="hljs-string">'0'</span>;&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(enter[i]==<span class="hljs-string">'h'</span>)&#123;<span class="hljs-keyword">if</span>(i+<span class="hljs-number">1</span>&lt;enter.length())&#123;<span class="hljs-keyword">if</span>(enter[i+<span class="hljs-number">1</span>]==<span class="hljs-string">'o'</span>)&#123;h=tmp;i+=<span class="hljs-number">3</span>;&#125;<span class="hljs-keyword">else</span>&#123;h=tmp;&#125;&#125;<span class="hljs-keyword">else</span>&#123;h=tmp;&#125;tmp=<span class="hljs-number">0</span>;&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(enter[i]==<span class="hljs-string">'m'</span>)&#123;<span class="hljs-keyword">if</span>(i+<span class="hljs-number">1</span>&lt;enter.length())&#123;<span class="hljs-keyword">if</span>(enter[i+<span class="hljs-number">1</span>]==<span class="hljs-string">'s'</span>)&#123;ms=tmp;i+=<span class="hljs-number">1</span>;&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(enter[i+<span class="hljs-number">1</span>]==<span class="hljs-string">'i'</span>)&#123;m=tmp;i+=<span class="hljs-number">2</span>;&#125;<span class="hljs-keyword">else</span>&#123;m=tmp;&#125;&#125;<span class="hljs-keyword">else</span>&#123;m=tmp;&#125;tmp=<span class="hljs-number">0</span>;&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(enter[i]==<span class="hljs-string">'s'</span>)&#123;<span class="hljs-keyword">if</span>(dotyes)&#123;dot=tmp;&#125;<span class="hljs-keyword">else</span>&#123;s=tmp;&#125;tmp=<span class="hljs-number">0</span>;&#125;&#125;m+=h*<span class="hljs-number">60</span>;s+=m*<span class="hljs-number">60</span>;dot+=s*<span class="hljs-number">10</span>;ms+=dot*<span class="hljs-number">100</span>;<span class="hljs-built_in">cout</span>&lt;&lt;ms&lt;&lt;<span class="hljs-string">'\n'</span>;&#125;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></div><h2 id="後記-Afterword"><a href="#後記-Afterword" class="headerlink" title="後記 Afterword"></a>後記 Afterword</h2><p>很久沒出解題報告書了<br>還有另一個 YoJudge 預練(空間之章)<br>晚點再寫吧！寫完「空間之章」，就可以來寫真正的「YouJudge」(X)了</p>]]></content>
      
      
      <categories>
          
          <category> 解題區 </category>
          
          <category> 解題報告書 - ZeroJudge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字串處理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>理型論？為何凡是不能只看表面？</title>
      <link href="/2018/10/24/theory-of-forms/"/>
      <url>/2018/10/24/theory-of-forms/</url>
      
        <content type="html"><![CDATA[<p>Tag 是不是多了兩個感覺不相關的？((((；ﾟДﾟ)))))))</p><a id="more"></a><p>前幾天上了教育哲學，感覺跟現在的事件有點相關，所以我把它拉進裡面了<br>（這只是我的個人上課筆記而已）<br>（如果你是要專業研究的，請回去上一頁或是看其他人寫的文章，<a href="https://phiphicake.blogspot.com/2008/05/blog-post_4164.html" target="_blank" rel="noopener">哲學哲學雞蛋糕的理型論</a>）</p><h2 id="理型論-Theory-of-Form"><a href="#理型論-Theory-of-Form" class="headerlink" title="理型論 Theory of Form"></a>理型論 Theory of Form</h2><p>提出人：柏拉圖（Plato），古希臘三哲人之一</p><p>他認為觀念界</p><h3 id="表象界-vs-觀念界"><a href="#表象界-vs-觀念界" class="headerlink" title="表象界 vs 觀念界"></a>表象界 vs 觀念界</h3><h4 id="表象界-Appenrance"><a href="#表象界-Appenrance" class="headerlink" title="表象界 Appenrance"></a>表象界 Appenrance</h4><p>它靠著感官，眼、耳、口、鼻、觸，來去説他是什麼樣子的<br>例如：水壺，我用眼睛感覺，他是圓柱體的</p><p>但是，表象是可以被偽造的<br>例如：筷子插入水中，用眼睛感覺，筷子被折斷了((((；ﾟДﾟ)))))))</p><p>表象界它是：短暫的、虛假的、易變的</p><p>日本的《世界奇妙物語》之前還演過類似的<br>有個人犯了重大的罪，被判了30天<br>30天？重大的罪只有30天？眾人很疑惑</p><p>這30天以內，犯人受盡各種折磨<br>然而，孰不知，夢裡的30天 = 現實的5分鐘<br>現實是被判30天，也就是夢裡大約720年</p><h4 id="觀念界-Idea"><a href="#觀念界-Idea" class="headerlink" title="觀念界 Idea"></a>觀念界 Idea</h4><p>剛剛談到，表象是可以被偽造的<br>例如：筷子插入水中，用眼睛感覺，筷子被折斷了((((；ﾟДﾟ)))))))</p><p>觀念界，就是知道筷子沒有被折斷，只是水的折射看起來被折斷了<br>你知道了水的折射，才知道筷子並沒有斷</p><p>觀念界它是：永恆的、真實的、不變的</p><h3 id="洞穴寓言-Allegory-of-the-Cave"><a href="#洞穴寓言-Allegory-of-the-Cave" class="headerlink" title="洞穴寓言 Allegory of the Cave"></a>洞穴寓言 Allegory of the Cave</h3><p>內容其實 <a href="https://lmgtfy.com/?q=地穴寓言" target="_blank" rel="noopener">Google</a>、<a href="https://zh.wikipedia.org/wiki/地穴寓言" target="_blank" rel="noopener">Wikipedia</a> 都看得到</p><p>如果給一名囚犯鬆綁，出去看見這些以往所見的影子的原型，你覺得會怎麼樣？<br>這個人可能會在強光刺激下痛苦不堪，產生錯亂。<br>他可能會認為外面所看到的東西不是現實的。<br>因為他相信只有在洞壁上能看見真相。</p><h2 id="普悠瑪事件-Train-derailment"><a href="#普悠瑪事件-Train-derailment" class="headerlink" title="普悠瑪事件 Train derailment"></a>普悠瑪事件 Train derailment</h2><p>很多人知道普悠瑪出軌事件，看著新聞直播救援</p><p>剛好拍到慈濟在助念，當天有人身為前救難隊員就出來罵慈濟説干擾救援<br>（也就是說，前救難隊員並沒有在現場）</p><p>週日：Po文到「爆料公社」<br>週一：大家一起狂鞭「慈濟」，說「作秀」「詛咒別人」「詐騙集團」「干擾救援」之類的<br>週二：大愛電視FB專頁表示「如果志工助念，影響到搜救工作，警消人員一定會來制止的，但現場並沒有人有任何表示。」<br>「慈濟志工跟媒體被安排在同一區，很接近攝影機收音位置，可能因此導致媒體直播時，志工的聲音很明顯，引發觀眾的關切與誤會。」</p><p>（詳情也可以去看<a href="https://www.facebook.com/DaAiTV/" target="_blank" rel="noopener">大愛電視FB專頁</a>，多吸收一點資訊，多方面查證）<br>（也不要只是聽信「媒體」、「爆料公社」怎麼説就怎麼罵，不然你也是跟那些洞穴囚犯一樣）</p><p>真相怎麼樣，我也不多做評論了，畢竟我沒有在現場<br>至於真的是不是「作秀」「干擾救援」？<br><img src="nosay.gif" srcset="/img/loading.gif" alt="我很乖 我不酸 我坐等看留言 —— 圖源：www.71714.com"><br>不要只是憑著一張照片、一段錄音、一部影片<br>就輕易的斷定事實</p><h2 id="後記-Afterword"><a href="#後記-Afterword" class="headerlink" title="後記 Afterword"></a>後記 Afterword</h2><p>學習哲學，並不是思考哲學，而是更有哲學的思考<br>保持著理性，才能更接近真相</p><p>為何凡是不能只看表面？<br>因為表象是可以被偽造的</p><p><strong>多思考、多查證，不要只是人云亦云</strong><br><strong>否則，你也跟洞穴囚犯沒什麼差異</strong></p>]]></content>
      
      
      <categories>
          
          <category> 師培筆記 </category>
          
          <category> 師培筆記 - 教育哲學 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 理型論 </tag>
            
            <tag> 洞穴寓言 </tag>
            
            <tag> 慈濟 </tag>
            
            <tag> 普悠瑪出軌事件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>演講筆記：醫人文 —— 我的故事</title>
      <link href="/2018/10/17/kp-tcu-note/"/>
      <url>/2018/10/17/kp-tcu-note/</url>
      
        <content type="html"><![CDATA[<p>校長週會，老實說，講者聽一聽，隔幾天就忘記了</p><a id="more"></a><h3 id="演講前數天-Before"><a href="#演講前數天-Before" class="headerlink" title="演講前數天 Before"></a>演講前數天 Before</h3><p>「什麼？大一校長週會是<strong>柯P</strong>？」我瞪大著眼說<br>「對啊…這是真的」室友<br>「傻眼…那我們之前到底請誰來啊？」<br>這也是蠻奇葩的事<strong>之一</strong><br>新生的國文檢定門檻都直接被刪除了<br>反正意想不到真的很多</p><h3 id="演講前一天-Yesterday"><a href="#演講前一天-Yesterday" class="headerlink" title="演講前一天 Yesterday"></a>演講前一天 Yesterday</h3><p>晚上跟女友分享我明天想要去聽<strong>柯P</strong>的演講<br>打算明天吃完早午餐，就直接過去大愛樓</p><p>我女友大概跟我說類似的經驗，以前也有請<strong>沈玉琳</strong>來<br>演藝廳也是爆棚的，一樓坐滿就到二樓坐，二樓坐滿就站著聽</p><h2 id="演講當天"><a href="#演講當天" class="headerlink" title="演講當天"></a>演講當天</h2><p>中午12點我就在簽到處等待了<br>等到差不多1點才能進場<br>還好人還沒有很多，坐到第二排</p><h2 id="演講者-Lecturer"><a href="#演講者-Lecturer" class="headerlink" title="演講者 Lecturer"></a>演講者 Lecturer</h2><h3 id="臺北市第6任市長-柯文哲"><a href="#臺北市第6任市長-柯文哲" class="headerlink" title="臺北市第6任市長 柯文哲"></a>臺北市第6任市長 柯文哲</h3><p><img src="kp.jpg" srcset="/img/loading.gif" alt="柯文哲 —— 圖源：WIKIPEDIA"><br>圖片4不4太大了？</p><h2 id="演講內容"><a href="#演講內容" class="headerlink" title="演講內容"></a>演講內容</h2><h3 id="台大醫院"><a href="#台大醫院" class="headerlink" title="台大醫院"></a>台大醫院</h3><p>當他來到台大醫院的第一天，體驗到人生無常</p><h3 id="人生哲學"><a href="#人生哲學" class="headerlink" title="人生哲學"></a>人生哲學</h3><p>人生都是意外（也包括當上市長吧）<br>台大醫院的磨練，也包括被彈劾的事件（那時候陳佩琪直接衝出來跟台大槓上，<a href="https://www.youtube.com/watch?v=j9Dz8dKreg4" target="_blank" rel="noopener">台灣啟示錄</a>還有做專訪）</p><p>「最困難並不是面對挫折打擊，最困難的是面對挫折打擊，卻沒有失去對人世之熱情」<br>我真的覺得這句話最後面的那一句是最難的，沒有失去對人世之熱情，經歷過挫折打擊後，真的，好難。</p><p>把別人當作自己 博愛<br>把自己當作別人 淡然<br>把別人當作別人 智慧<br>把自己當作自己 自在</p><h3 id="心路歷程"><a href="#心路歷程" class="headerlink" title="心路歷程"></a>心路歷程</h3><p>他曾經這樣過：「見山是山 -&gt; 見山不是山 -&gt; 見山是山」<br>套用在醫生怎麼說：「看病人 -&gt; 看數據 -&gt; 看病人」<br>曾經有一段時間他都看不到病人，專心看著機器上的數字</p><h3 id="Dr-ECMO"><a href="#Dr-ECMO" class="headerlink" title="Dr.ECMO"></a>Dr.ECMO</h3><p>邵曉玲 事件<br>體驗到「十年寒窗無人問，一舉成名天下知」</p><h3 id="高科技叢林"><a href="#高科技叢林" class="headerlink" title="高科技叢林"></a>高科技叢林</h3><p>看到了16天沒心臟，用兩台ECMO維生</p><p>柯P直接反問我們：「什麼是活著？」<br>「病人旁邊放了一堆維生機器的後面，你看到什麼？」<br>「不會死，也不會活，你是否願意讓他走？」</p><p>「如果有錢不會死，王永慶會還在」</p><h3 id="世大運"><a href="#世大運" class="headerlink" title="世大運"></a>世大運</h3><p>「如果誠心要做一件事，全世界都會來幫你。」<br>一日幕僚還跟邰哥講說：「聽障奧運要5.4億，我辦世大運3.6億，你覺得為什麼？」<br><img src="kp-no-friend.png" srcset="/img/loading.gif" alt="柯P：因為我沒有朋友 —— 圖源：YouTube 一日市長幕僚"></p><p>「如果你成功 朋友認識你<br>如果你失敗 你認識朋友<br>如果你成功失敗成功失敗…. 你認識人生」</p><h3 id="給台灣年輕人"><a href="#給台灣年輕人" class="headerlink" title="給台灣年輕人"></a>給台灣年輕人</h3><p>最大的啟示 Just Do It<br>做！不一定會成功<br>不做！一定會失敗</p><h2 id="後記-Afterword"><a href="#後記-Afterword" class="headerlink" title="後記 Afterword"></a>後記 Afterword</h2><p>我後來發現，我之前在柯P的IG上，他發過的名言我都會截圖<br>今天演講聽完整理筆記時，才知道這些話他幾乎都說過</p><p>這筆記整理得有點亂，可能之後再修吧！</p>]]></content>
      
      
      <categories>
          
          <category> 演講筆記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 演講筆記 </tag>
            
            <tag> 柯P </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c731. 走路時要算數學</title>
      <link href="/2018/09/26/zj-c731/"/>
      <url>/2018/09/26/zj-c731/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-Problem"><a href="#題目-Problem" class="headerlink" title="題目 Problem"></a>題目 Problem</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=c731" target="_blank" rel="noopener">題目連結：https://zerojudge.tw/ShowProblem?problemid=c731</a></p><a id="more"></a><h3 id="敘述-Description"><a href="#敘述-Description" class="headerlink" title="敘述 Description"></a>敘述 Description</h3><p>在一個二維平面上，從原點出發，每一步等於一單位長，每一次只能向右走、向上走或向左走。請問恰好走 n 步且不經過已走的點共有多少種走法？</p><h3 id="輸入-Input"><a href="#輸入-Input" class="headerlink" title="輸入 Input"></a>輸入 Input</h3><p>輸入僅一行，為正整數 n （ 0 &lt; n &lt;= 10000 ）。</p><h3 id="輸出-Output"><a href="#輸出-Output" class="headerlink" title="輸出 Output"></a>輸出 Output</h3><p>一個整數, 表示方案數。由於答案可能很大，你只需要輸出這個答案 mod 12345的值 ( 換句話說，輸出這個答案除以12345的餘數 )。</p><h3 id="範例輸入-Sample-Input"><a href="#範例輸入-Sample-Input" class="headerlink" title="範例輸入 Sample Input"></a>範例輸入 Sample Input</h3><div class="hljs"><pre><code class="hljs undefined">【範例輸入一】<span class="hljs-number">2</span>【範例輸入二】<span class="hljs-number">1</span></code></pre></div><h3 id="範例輸出-Sample-Output"><a href="#範例輸出-Sample-Output" class="headerlink" title="範例輸出 Sample Output"></a>範例輸出 Sample Output</h3><div class="hljs"><pre><code class="hljs undefined">【範例輸出一】<span class="hljs-number">7</span>【範例輸出二】<span class="hljs-number">3</span></code></pre></div><h3 id="提示-Hint"><a href="#提示-Hint" class="headerlink" title="提示 Hint"></a>提示 Hint</h3><p>【分數】</p><p>20% n &lt;= 5   </p><p>40% n &lt;= 10</p><p>60% n &lt;= 100</p><p>80% n &lt;= 1000</p><p>100% n &lt;= 10000</p><h2 id="題解-Solution"><a href="#題解-Solution" class="headerlink" title="題解 Solution"></a>題解 Solution</h2><p>經典DP問題，如果不要走到重複的點，就不要往回走<br>如果要往上走，不用考慮會不會重複的點，全部加起來就對了<br>如果要往左走，前一步就不能往右走。<br>如果要往右走，前一步就不能往左走。<br>然後記得每次算完 $Mod\ 12345$ 就好</p><h3 id="程式碼-Accepted-Code"><a href="#程式碼-Accepted-Code" class="headerlink" title="程式碼 Accepted Code"></a>程式碼 Accepted Code</h3><div class="hljs"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _ ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);</span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-keyword">int</span> up[<span class="hljs-number">10001</span>]=&#123;<span class="hljs-number">1</span>&#125;,left[<span class="hljs-number">10001</span>]=&#123;<span class="hljs-number">1</span>&#125;,right[<span class="hljs-number">10001</span>]=&#123;<span class="hljs-number">1</span>&#125;;<span class="hljs-keyword">int</span> N;<span class="hljs-built_in">cin</span>&gt;&gt;N;<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;N;i++)&#123;up[i]=up[i<span class="hljs-number">-1</span>]+left[i<span class="hljs-number">-1</span>]+right[i<span class="hljs-number">-1</span>];left[i]=up[i<span class="hljs-number">-1</span>]+left[i<span class="hljs-number">-1</span>];right[i]=up[i<span class="hljs-number">-1</span>]+right[i<span class="hljs-number">-1</span>];up[i]%=<span class="hljs-number">12345</span>;left[i]%=<span class="hljs-number">12345</span>;right[i]%=<span class="hljs-number">12345</span>;&#125;<span class="hljs-built_in">cout</span>&lt;&lt;(up[N<span class="hljs-number">-1</span>]+left[N<span class="hljs-number">-1</span>]+right[N<span class="hljs-number">-1</span>])%<span class="hljs-number">12345</span>&lt;&lt;<span class="hljs-string">'\n'</span>;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></div><h2 id="後記-Afterword"><a href="#後記-Afterword" class="headerlink" title="後記 Afterword"></a>後記 Afterword</h2><p>數字應該能再開大一點啊，還以為這題有什麼陷阱 = =<br>如果沒有意外，下一篇應該是寫演講筆記<br>以前演講聽一聽就算了，不過這次我想寫出來<br>講者是誰？敬請期待</p>]]></content>
      
      
      <categories>
          
          <category> 解題區 </category>
          
          <category> 解題報告書 - ZeroJudge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>d635. 幸運777？luck</title>
      <link href="/2018/09/14/zj-d635/"/>
      <url>/2018/09/14/zj-d635/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-Problem"><a href="#題目-Problem" class="headerlink" title="題目 Problem"></a>題目 Problem</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=d635" target="_blank" rel="noopener">題目連結：https://zerojudge.tw/ShowProblem?problemid=d635</a></p><a id="more"></a><h3 id="敘述-Description"><a href="#敘述-Description" class="headerlink" title="敘述 Description"></a>敘述 Description</h3><p>你說什麼？777=511？怎麼可能…？</p><p>因為這裡是八進位的777轉換成10進位的511了～(好爛ˇ)</p><p>給你十進位的數字，請你把他們轉成八進位好嗎？</p><h3 id="輸入-Input"><a href="#輸入-Input" class="headerlink" title="輸入 Input"></a>輸入 Input</h3><p>每個測資點有多筆測資，請以EOF作為結束。<br>每組測資一行，有整數n(0&lt;=n&lt;=511)，表示要轉換成八進位的數字<br>最後出現小於0的整數表示測資結束。</p><p>&lt;所有出現的整數皆可以signed 32-bits int儲存&gt;</p><h3 id="輸出-Output"><a href="#輸出-Output" class="headerlink" title="輸出 Output"></a>輸出 Output</h3><p>對於每一行測資請輸出整數n的八進位表示。<br>對於最後一個小於0的整數，請輸出-1。</p><h3 id="範例輸入-Sample-Input"><a href="#範例輸入-Sample-Input" class="headerlink" title="範例輸入 Sample Input"></a>範例輸入 Sample Input</h3><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-number">277</span><span class="hljs-number">511</span><span class="hljs-number">123</span><span class="hljs-number">456</span><span class="hljs-number">-1</span></code></pre></div><h3 id="範例輸出-Sample-Output"><a href="#範例輸出-Sample-Output" class="headerlink" title="範例輸出 Sample Output"></a>範例輸出 Sample Output</h3><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-number">425</span><span class="hljs-number">777</span><span class="hljs-number">173</span><span class="hljs-number">710</span><span class="hljs-number">-1</span></code></pre></div><h3 id="提示-Hint"><a href="#提示-Hint" class="headerlink" title="提示 Hint"></a>提示 Hint</h3><p>1.進位制轉換<br>2.共三個測資點30%、35%、35%，<br>第一個測資點即範例測資。</p><h2 id="題解-Solution"><a href="#題解-Solution" class="headerlink" title="題解 Solution"></a>題解 Solution</h2><p>以EOF作為結束？最後出現小於0的整數表示測資結束？<br><img src="https://media.giphy.com/media/l3q2K5jinAlChoCLS/giphy.gif" srcset="/img/loading.gif" alt="所以？ —— 圖源：GIPHY"><br>到底是我國文爛還是題目敘述爛？（好歹我大學國文門檻過了）<br>有些人會用C++內建轉$8$進位的，但還是要知道概念</p><p>$10$進位的$$511_{(10)}$$會是<br>$$ 511_{(10)} = 5 * 10^2 + 1 * 10^1 + 1 * 10^0 $$<br>$8$進位的$$777_{(8)}$$會是<br>$$ 777_{(8)} = 7 * 8^2 + 7 * 8^1 + 7 * 8^0 = 511_{(10)} $$<br>$8$進位的$$173_{(8)}$$會是<br>$$ 173_{(8)} = 1 * 8^2 + 7 * 8^1 + 3 * 8^0 = 123_{(10)} $$</p><p>大致上不論是轉成$N$進位都差不多</p><p>$10$進位轉成$8$進位</p><p>先把數字 $MOD\ 8$ 就可以求出$8$進位中的個位數<br>$123%8=3$<br>再把數字 $/\ 8$ 後再 $MOD\ 8$ 就可以求出$8$進位中的下個位數<br>$123/8=15$<br>$15%8=7$<br>再把數字 $/\ 8$ 後再 $MOD\ 8$ 就可以求出$8$進位中的下個位數<br>$15/8=1$<br>$1%8=1$</p><p>然後把數字倒敘輸出就可以拿到$1,7,3$</p><p>如果可以EOF結尾，我就把負數自動設定為$-1$</p><p>輸入$0$出來會是空白，所以還加了特判</p><h3 id="程式碼-Accepted-Code"><a href="#程式碼-Accepted-Code" class="headerlink" title="程式碼 Accepted Code"></a>程式碼 Accepted Code</h3><div class="hljs"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _ ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);</span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;_<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> enter;<span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span>&gt;&gt;enter)&#123;<span class="hljs-keyword">if</span>(enter&lt;<span class="hljs-number">0</span>)&#123;<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"-1"</span>&lt;&lt;<span class="hljs-string">'\n'</span>;<span class="hljs-keyword">continue</span>;&#125;<span class="hljs-keyword">if</span>(enter==<span class="hljs-number">0</span>)&#123;<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"0"</span>&lt;&lt;<span class="hljs-string">'\n'</span>;<span class="hljs-keyword">continue</span>;&#125;<span class="hljs-keyword">int</span> ans[<span class="hljs-number">10</span>]=&#123;<span class="hljs-number">0</span>&#125;,len=<span class="hljs-number">0</span>;<span class="hljs-keyword">while</span>(enter)&#123;ans[len++]+=enter%<span class="hljs-number">8</span>;enter/=<span class="hljs-number">8</span>;&#125;<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=len<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)<span class="hljs-built_in">cout</span>&lt;&lt;ans[i];<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">'\n'</span>;&#125;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></div><h2 id="後記-Afterword"><a href="#後記-Afterword" class="headerlink" title="後記 Afterword"></a>後記 Afterword</h2><p>這題題目敘述真的是爛到吃了好幾個 WA<br>寫 UVa 題目也有碰過一次，題目沒有寫清楚<br>最後還是看了一下 AC Code 才知道在寫什麼</p>]]></content>
      
      
      <categories>
          
          <category> 解題區 </category>
          
          <category> 解題報告書 - ZeroJudge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 進位制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>超修？扛下去？演算法直接跳上去？</title>
      <link href="/2018/09/12/1071credit/"/>
      <url>/2018/09/12/1071credit/</url>
      
        <content type="html"><![CDATA[<p>自從升到大學以來，說輕鬆嗎？好像也不是<br>至少不需要對本科放太多心力，畢竟都是學過的</p><p>相比我同學，他們還是很強的，我學了程式也很久了，他們並沒有程式背景<br>也就是說，我花了兩年理解的東西，我同學花了半年學完</p><a id="more"></a><h2 id="大一簡略"><a href="#大一簡略" class="headerlink" title="大一簡略"></a>大一簡略</h2><p>由於大一學期末我也加入了「師資培訓生」<br>原本的128畢業學分，瞬間飆到158學分<br>再加上學校又一堆看起來很<del>（狗屎爛蛋）</del><strong>有用</strong>的畢業門檻</p><p>為了趕那些畢業門檻，大一就先把通識基本門檻達到（Ex.環境2學分以上、邏輯2學分以上，這種容易忽略的小門檻）<br>再去修<del>（躺分課）</del>或<strong>興趣課</strong></p><p>大一上加加減減就變成28學分（其實只有25學分，因為有暑假先修課3學分）<br>大一下為了加入師培更容易，變成26學分</p><p>大一下修課時，我一直想要當助教，當助教前當然要先修過<br>當然我也問了其他學長們、系主任的意見<br>有些學長覺得可以、有些覺得要先去修資料結構（但我光打競賽就學了 <del>一堆奇怪的</del> 資料結構）<br>但我問主任時，他就直接說「可以啊」<br>連猶豫一下都沒有<br>然後大一下學期末，我就選了……ㄏㄏㄏㄏㄏ<br><img src="courage.gif" srcset="/img/loading.gif" alt="還是張惠妹的《勇敢》？"></p><h2 id="暑假助教"><a href="#暑假助教" class="headerlink" title="暑假助教"></a>暑假助教</h2><p>暑假是有先修課，也剛好在徵助教、講師<br>差不多就是練習教學、跟學弟妹互動</p><p>話說，我還忘記繳學費，差點不能註冊……</p><h2 id="大二開學"><a href="#大二開學" class="headerlink" title="大二開學"></a>大二開學</h2><p>大二把一些沒有選上的通識課換掉，選一選就變成26學分了<br>演算法剛進去上課時，教授還問我怎麼選進來的（原本以前有擋修，但現在都拿掉了）</p><p>我覺得比較擔心的事，分組，畢竟在這裡只有學長姐，沒有同學<br>不過有學長願意收留我，超好der（而且都是學霸等級）</p><p>第一次上機題目是河內塔問題<br>當然，要學會怎麼分析問題、推出規律<br>大致上就是這樣</p><p>至於迎新總召嗎？再說吧！又要再寫一篇……</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 學分 </tag>
            
            <tag> 超修 </tag>
            
            <tag> 助教 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c311. PC:分組之塔</title>
      <link href="/2018/09/02/zj-c311/"/>
      <url>/2018/09/02/zj-c311/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-Problem"><a href="#題目-Problem" class="headerlink" title="題目 Problem"></a>題目 Problem</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=c311" target="_blank" rel="noopener">題目連結：https://zerojudge.tw/ShowProblem?problemid=c311</a></p><a id="more"></a><h3 id="敘述-Description"><a href="#敘述-Description" class="headerlink" title="敘述 Description"></a>敘述 Description</h3><p>進到了這個房間，小風終於遇到第一個塔主，這個塔主精神有點疾病，他有超級多的部下，而他想要將這些人以91個人為單位分為一組，而多出來的人就要把他殺掉。<br>然而他實在是太懶惰了，不想要自己算要殺掉多少人，於是他命令小風幫他算出人數，否則第一個先死的就是小風了。<br>無奈小風的除法沒有學好，所以他算不出來。於是小風再次需要各位的幫忙，請算出塔主需要殺掉的人數。</p><h3 id="輸入-Input"><a href="#輸入-Input" class="headerlink" title="輸入 Input"></a>輸入 Input</h3><p>輸入有多筆測資，並以EOF作為結尾。<br>每一筆測資包含一個正整數n，代表塔主的部下人數。</p><p>10%的測資滿足n&lt;=10^9<br>40%的測資滿足n&lt;=10^18<br>100%的測資滿足n&lt;=10^100000</p><h3 id="輸出-Output"><a href="#輸出-Output" class="headerlink" title="輸出 Output"></a>輸出 Output</h3><p>對於每一筆輸入 請輸出塔主需要殺掉的人數</p><h3 id="範例輸入-Sample-Input"><a href="#範例輸入-Sample-Input" class="headerlink" title="範例輸入 Sample Input"></a>範例輸入 Sample Input</h3><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-number">92</span><span class="hljs-number">93</span><span class="hljs-number">91</span></code></pre></div><h3 id="範例輸出-Sample-Output"><a href="#範例輸出-Sample-Output" class="headerlink" title="範例輸出 Sample Output"></a>範例輸出 Sample Output</h3><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-number">1</span><span class="hljs-number">2</span><span class="hljs-number">0</span></code></pre></div><h3 id="提示-Hint"><a href="#提示-Hint" class="headerlink" title="提示 Hint"></a>提示 Hint</h3><h2 id="題解-Solution"><a href="#題解-Solution" class="headerlink" title="題解 Solution"></a>題解 Solution</h2><p>如何判斷數字是不是$7$的倍數跟$13$的倍數<br>當然是打開 Google 查啊（Ｘ）</p><p>7的倍數：由個位數起每三位數字一節，各奇數節的和與偶數節的和相減，其差是7的倍數。<br>13的倍數：由個位數起每三位數字一節，各奇數節的和與偶數節的和相減，其差是13的倍數。<br>（<a href="https://leestar2018.blogspot.com/2016/09/113.html" target="_blank" rel="noopener">文字來源：https://leestar2018.blogspot.com/2016/09/113.html</a>）</p><p>把數字長度補到$3$的倍數就可以算了</p><p>反正數字都一樣，就直接 $mod\ 91$<br>（繳交後3秒，回傳結果：WA）<br><img src="wtf.png" srcset="/img/loading.gif" alt="不好意思齁這三洨 —— 圖源：好色龍"><br>後來想想，我忘了重要關鍵點，因為只是判斷7的倍數或13的倍數，可以不用管正負<br>但！如果是 $mod$ 就要區分正負關係了</p><p>正數正常 $mod\ 91$ 就好<br>負數要先 $mod\ 91$ 再加 $91$ 再 $mod\ 91$<br>不知道為什麼的人請去 Google 負數取模</p><h3 id="程式碼-Accepted-Code"><a href="#程式碼-Accepted-Code" class="headerlink" title="程式碼 Accepted Code"></a>程式碼 Accepted Code</h3><div class="hljs"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _ ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);</span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;_<span class="hljs-built_in">string</span> enter;<span class="hljs-comment">//192936162 55</span><span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span>&gt;&gt;enter)&#123;<span class="hljs-keyword">int</span> total=<span class="hljs-number">0</span>;<span class="hljs-keyword">int</span> s=enter.length()%<span class="hljs-number">3</span>;<span class="hljs-keyword">if</span>(s==<span class="hljs-number">1</span>)enter=<span class="hljs-string">"00"</span>+enter;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s==<span class="hljs-number">2</span>)enter=<span class="hljs-string">"0"</span>+enter;<span class="hljs-keyword">int</span> p=<span class="hljs-number">0</span>;<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=enter.length()<span class="hljs-number">-3</span>;i&gt;=<span class="hljs-number">0</span>;i-=<span class="hljs-number">3</span>)&#123;<span class="hljs-keyword">if</span>(p%<span class="hljs-number">2</span>)&#123;total-=((enter[i]-<span class="hljs-string">'0'</span>)*<span class="hljs-number">100</span>+(enter[i+<span class="hljs-number">1</span>]-<span class="hljs-string">'0'</span>)*<span class="hljs-number">10</span>+(enter[i+<span class="hljs-number">2</span>]-<span class="hljs-string">'0'</span>));&#125;<span class="hljs-keyword">else</span>&#123;total+=((enter[i]-<span class="hljs-string">'0'</span>)*<span class="hljs-number">100</span>+(enter[i+<span class="hljs-number">1</span>]-<span class="hljs-string">'0'</span>)*<span class="hljs-number">10</span>+(enter[i+<span class="hljs-number">2</span>]-<span class="hljs-string">'0'</span>));&#125;p++;&#125;<span class="hljs-keyword">int</span> mo=total%<span class="hljs-number">91</span>;<span class="hljs-keyword">if</span>(total&lt;<span class="hljs-number">0</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,(<span class="hljs-number">91</span>+mo)%<span class="hljs-number">91</span>);<span class="hljs-keyword">else</span><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,mo);&#125;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></div><h2 id="後記-Afterword"><a href="#後記-Afterword" class="headerlink" title="後記 Afterword"></a>後記 Afterword</h2><p>異想不到的事，這題我是第一個 $0ms$ 完成<br><img src="0ms.png" srcset="/img/loading.gif" alt="2018/09/03 截圖紀念"><br>畢竟 ZeroJudge 有改版過<br>效能應該有提升<br>但，套用憲哥說的一句話<br><img src="who_cares.png" srcset="/img/loading.gif" alt="Who Cares？ —— 影像版權：《綜藝大熱門》"></p><p>不過我倒是好奇，畢竟這題曾經是比賽題<br>如果是在比賽期間，你要怎麼讓這題拿到AC呢？</p>]]></content>
      
      
      <categories>
          
          <category> 解題區 </category>
          
          <category> 解題報告書 - ZeroJudge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 負數取Mod </tag>
            
            <tag> 倍數判斷法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>d708. 小王的积木</title>
      <link href="/2018/09/02/zj-d708/"/>
      <url>/2018/09/02/zj-d708/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-Problem"><a href="#題目-Problem" class="headerlink" title="題目 Problem"></a>題目 Problem</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=d708" target="_blank" rel="noopener">題目連結：https://zerojudge.tw/ShowProblem?problemid=d708</a></p><a id="more"></a><h3 id="敘述-Description"><a href="#敘述-Description" class="headerlink" title="敘述 Description"></a>敘述 Description</h3><p>自从小涵去商店买了那么多的积木，小王也去买了一大堆。<br>不过小王比较喜欢数学，所以他买的积木上写的只有数字；因为他认为偶数比较吉利，于是他买的积木是全是偶数快的。<br>听说小涵少了一个积木，他便整理了一下他的，可是他发现他也少了一块积木…（很无语吧…）<br>上次他见你已经帮小涵找到了积木，于是就请你来帮他找找，而且他还告诉你：“我的积木比小涵的好找很多。”<br>半信半疑的你决定帮帮他。</p><h3 id="輸入-Input"><a href="#輸入-Input" class="headerlink" title="輸入 Input"></a>輸入 Input</h3><p>只有一笔测资。 测资末尾会有多余信息，忽略就好。//感谢asas提醒。2015/8/6</p><p>输入数据的第一行，是小王告诉你他的积木个数N（N一定是一个正偶数，而且2&lt;=N&lt;=1000000，你看他的积木可没有小涵的多）。<br>接下来每行有（N-1）个数字，表示小王每个积木上的数字（可以用longint存储）。</p><h3 id="輸出-Output"><a href="#輸出-Output" class="headerlink" title="輸出 Output"></a>輸出 Output</h3><p>对于每组测资，输出小王缺少的那块积木的数字。</p><h3 id="範例輸入-Sample-Input"><a href="#範例輸入-Sample-Input" class="headerlink" title="範例輸入 Sample Input"></a>範例輸入 Sample Input</h3><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-number">8</span><span class="hljs-number">1</span><span class="hljs-number">2</span><span class="hljs-number">3</span><span class="hljs-number">2</span><span class="hljs-number">3</span><span class="hljs-number">4</span><span class="hljs-number">4</span></code></pre></div><h3 id="範例輸出-Sample-Output"><a href="#範例輸出-Sample-Output" class="headerlink" title="範例輸出 Sample Output"></a>範例輸出 Sample Output</h3><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-number">1</span></code></pre></div><h3 id="提示-Hint"><a href="#提示-Hint" class="headerlink" title="提示 Hint"></a>提示 Hint</h3><p>提示 ：<br>小涵的积木的AC代码可以直接AC本题。<br>但我希望您可以想想另一种解答方式，想想数字有什么特殊性，参考时间复杂度$O(n)$，空间复杂度$O(1)$。</p><p>还有一种算法时间复杂度$O(n\log{n})$，空间复杂度$O(n)$的…</p><p>如果哪种语言直接输入都超时的话，请与我联系，我将调整时间限制。</p><p>//感谢ck99126指出题目存在的一些问题！</p><h2 id="題解-Solution"><a href="#題解-Solution" class="headerlink" title="題解 Solution"></a>題解 Solution</h2><h3 id="1-直接暴力做"><a href="#1-直接暴力做" class="headerlink" title="1.直接暴力做"></a>1.直接暴力做</h3><p>無庸置疑，跟 C++ Map 一起使用</p><h4 id="程式碼-I-Accepted-Code-I"><a href="#程式碼-I-Accepted-Code-I" class="headerlink" title="程式碼 I Accepted Code I"></a>程式碼 I Accepted Code I</h4><div class="hljs"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _ ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);</span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;_<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> N;<span class="hljs-built_in">cin</span>&gt;&gt;N;<span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; m;<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> A;<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;N<span class="hljs-number">-1</span>;i++)&#123;<span class="hljs-built_in">cin</span>&gt;&gt;A;<span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt;::iterator it=m.find(A);<span class="hljs-keyword">if</span>(it==m.end())m[A]=<span class="hljs-number">1</span>;<span class="hljs-keyword">else</span>m[A]++;&#125;<span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> it=m.begin();it!=m.end();it++)<span class="hljs-keyword">if</span>(it-&gt;second%<span class="hljs-number">2</span>)&#123;<span class="hljs-built_in">cout</span>&lt;&lt;it-&gt;first&lt;&lt;<span class="hljs-string">'\n'</span>;<span class="hljs-keyword">break</span>;&#125;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></div><h3 id="2-XOR"><a href="#2-XOR" class="headerlink" title="2.XOR"></a>2.XOR</h3><a href="/2018/09/02/zj-c651/" title="c651. 三、區間xor(RXQ)">c651. 三、區間xor(RXQ)</a> 這篇文章有寫過有關 XOR 的性質<p>用<strong>歸零律</strong>跟<strong>自反性</strong>就可以完成了</p><h4 id="程式碼-II-Accepted-Code-II"><a href="#程式碼-II-Accepted-Code-II" class="headerlink" title="程式碼 II Accepted Code II"></a>程式碼 II Accepted Code II</h4><div class="hljs"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-keyword">int</span> N,ans=<span class="hljs-number">0</span>;<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;N);N--;<span class="hljs-keyword">while</span>(N--)&#123;<span class="hljs-keyword">int</span> S;<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;S);ans^=S;&#125;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,ans);<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></div><h2 id="後記-Afterword"><a href="#後記-Afterword" class="headerlink" title="後記 Afterword"></a>後記 Afterword</h2><p>很神奇吧，這樣複雜度都壓下去了<br>但<br>後面有些東西是用HTML補上去的<br>不曉得是不是 Hexo 出 BUG 了<br>有些正常的 Markdown 無法解析成功<br>就這樣吧</p>]]></content>
      
      
      <categories>
          
          <category> 解題區 </category>
          
          <category> 解題報告書 - ZeroJudge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XOR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c651. 三、區間xor(RXQ)</title>
      <link href="/2018/09/02/zj-c651/"/>
      <url>/2018/09/02/zj-c651/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-Problem"><a href="#題目-Problem" class="headerlink" title="題目 Problem"></a>題目 Problem</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=c651" target="_blank" rel="noopener">題目連結：https://zerojudge.tw/ShowProblem?problemid=c651</a></p><a id="more"></a><h3 id="敘述-Description"><a href="#敘述-Description" class="headerlink" title="敘述 Description"></a>敘述 Description</h3><p>給你一段 $N$ 個正整數的序列 $a_1∼a_N$ ，請你執行 $Q$ 筆操作。</p><h3 id="輸入-Input"><a href="#輸入-Input" class="headerlink" title="輸入 Input"></a>輸入 Input</h3><p>第一行有兩個正整數 $N,Q$ 。</p><p>第二行有 $N$ 個非負整數 $a_i$ 。</p><p>接下來有 $Q$ 行，每行代表一個操作。</p><p>如果是 $0\ l\ r$ ，代表詢問 $[l,r]$ 區間的每個數字做 $xor$ 運算之後的值。</p><p>如果是 $1\ x\ v$ ，代表將 $a_x$ 置換成 $v$ 。</p><p>※  $xor$ 即代表C++中的位元運算「^」。</p><h3 id="輸出-Output"><a href="#輸出-Output" class="headerlink" title="輸出 Output"></a>輸出 Output</h3><p>對於每個詢問，輸出詢問區間的每個數字做 $xor$ 運算之後的值。</p><h3 id="範例輸入-Sample-Input"><a href="#範例輸入-Sample-Input" class="headerlink" title="範例輸入 Sample Input"></a>範例輸入 Sample Input</h3><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-symbol">5 </span><span class="hljs-number">3</span><span class="hljs-symbol">16 </span><span class="hljs-number">9</span> <span class="hljs-number">1</span> <span class="hljs-number">5</span> <span class="hljs-number">3</span><span class="hljs-symbol">0 </span><span class="hljs-number">1</span> <span class="hljs-number">5</span><span class="hljs-symbol">1 </span><span class="hljs-number">1</span> <span class="hljs-number">5</span><span class="hljs-symbol">0 </span><span class="hljs-number">1</span> <span class="hljs-number">5</span></code></pre></div><h3 id="範例輸出-Sample-Output"><a href="#範例輸出-Sample-Output" class="headerlink" title="範例輸出 Sample Output"></a>範例輸出 Sample Output</h3><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-number">30</span><span class="hljs-number">11</span></code></pre></div><h3 id="提示-Hint"><a href="#提示-Hint" class="headerlink" title="提示 Hint"></a>提示 Hint</h3><p>本題共有四組測試題組，條件限制如下所示。每一組可有一或多筆測試資料，該組所有測試資料皆需答對才會獲得該組分數。<br><img src="image.png" srcset="/img/loading.gif" alt><br>cout &lt;&lt; (16^9^1^5^3) &lt;&lt; “\n”; 輸出即為30。</p><p>觀察一下 xor 的性質，不然這題拿不滿XD。輸入卡很緊，記得加優化。</p><h2 id="題解-Solution"><a href="#題解-Solution" class="headerlink" title="題解 Solution"></a>題解 Solution</h2><p>遇到一般的RMQ+單點修改問題，通常有幾種解題方式</p><ol><li>線段樹 Segment Tree</li><li>二元索引樹（樹狀樹组） Binary Index Tree (Fenwick tree)<br>不過這題時限只有$0.5$秒<br>如果用前綴 $XOR$ 單點修改變成$O(N)$<br>如果用線段樹遞迴查詢可能會有點慢（有實做過，只有$72%$，其他的被TLE）</li></ol><p>這題可以使用BIT，也就是二元索引樹，但要如何使用呢？<br>（以下把二元索引樹 簡稱 BIT）</p><h3 id="XOR-真值表＆性質"><a href="#XOR-真值表＆性質" class="headerlink" title="XOR 真值表＆性質"></a>XOR 真值表＆性質</h3><table><thead><tr><th align="center">$A$</th><th align="center">$B$</th><th align="center">$A⊕B$</th></tr></thead><tbody><tr><td align="center">$0$</td><td align="center">$0$</td><td align="center">$0$</td></tr><tr><td align="center">$1$</td><td align="center">$0$</td><td align="center">$1$</td></tr><tr><td align="center">$0$</td><td align="center">$1$</td><td align="center">$1$</td></tr><tr><td align="center">$1$</td><td align="center">$1$</td><td align="center">$0$</td></tr></tbody></table><p>恆等律：$X⊕0=X$<br>歸零律：$X⊕X=0$<br>自反性：$A⊕B⊕B=A⊕(B⊕B)=A⊕0=A$</p><p>其中的<strong>歸零律</strong>跟<strong>自反性</strong>就是我們要使用的</p><p>拿到BIT的模板應該都是求區間和</p><p>假設我們要求$[L,R]$的區間和<br>是不是只要$sum(R)-sum(L-1)$？</p><p>這題改成區間 XOR<br>BIT 初始化就改成 XOR（程式碼 Line 15）<br>然後把求前綴和的 $+$ 改成 XOR（程式碼 Line 9）<br>就變成 前綴 XOR 了</p><p>查詢只要輸出 $xxor(R)⊕xxor(L-1)$（程式碼 Line 37）</p><p>單點修改呢？<br>先把原本的數字跟要變成的數字做 XOR 變成 $val$（程式碼 Line 40）<br>利用<strong>歸零律</strong>跟<strong>自反性</strong><br>後面需要更新的數字，統一跟 $val$ 做 XOR<br>單點修改就完成了</p><h3 id="程式碼-Accepted-Code"><a href="#程式碼-Accepted-Code" class="headerlink" title="程式碼 Accepted Code"></a>程式碼 Accepted Code</h3><div class="hljs"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _ ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) ((x)&amp;(-x))</span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAXN = <span class="hljs-number">1000000</span>+<span class="hljs-number">2</span>;<span class="hljs-keyword">int</span> Origin[MAXN+<span class="hljs-number">1</span>]=&#123;<span class="hljs-number">0</span>&#125;;<span class="hljs-keyword">int</span> BITS[MAXN+<span class="hljs-number">1</span>]=&#123;<span class="hljs-number">0</span>&#125;;<span class="hljs-keyword">int</span> N,Q;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">xxor</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;<span class="hljs-keyword">for</span>(;x;x-=lowbit(x))ans^=BITS[x];<span class="hljs-keyword">return</span> ans;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> x = <span class="hljs-number">1</span>; x &lt;= n; ++x) &#123;BITS[x] = Origin[x];<span class="hljs-keyword">int</span> y = x - lowbit(x);<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = x<span class="hljs-number">-1</span>; i &gt; y; i -= lowbit(i))BITS[x] ^= BITS[i];&#125; &#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> val)</span></span>&#123;<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=x;i&lt;=N;i+=lowbit(i))BITS[i]^=val;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;_<span class="hljs-built_in">cin</span>&gt;&gt;N&gt;&gt;Q;<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=N;i++)<span class="hljs-built_in">cin</span>&gt;&gt;Origin[i];init(N);<span class="hljs-keyword">while</span>(Q--)&#123;<span class="hljs-keyword">int</span> choice,x,y;<span class="hljs-built_in">cin</span>&gt;&gt;choice&gt;&gt;x&gt;&gt;y;<span class="hljs-keyword">if</span>(choice==<span class="hljs-number">0</span>)&#123;<span class="hljs-built_in">cout</span>&lt;&lt;(xxor(y)^xxor(x<span class="hljs-number">-1</span>))&lt;&lt;<span class="hljs-string">'\n'</span>;&#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-keyword">int</span> OO=Origin[x]^y;Origin[x]=y;update(x,OO);&#125;&#125;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></div><h2 id="後記-Afterword"><a href="#後記-Afterword" class="headerlink" title="後記 Afterword"></a>後記 Afterword</h2><p>每次做到有關 XOR 的題型<br>都讓我想到有一題原本 時間 $O(N\log{N})$ 空間 $O(N)$<br>最後複雜度可以壓在 時間 $O(N)$ 空間 $O(1)$<br>下一篇就來寫這題的報告書</p>]]></content>
      
      
      <categories>
          
          <category> 解題區 </category>
          
          <category> 解題報告書 - ZeroJudge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fenwick Tree </tag>
            
            <tag> Binary Index Tree </tag>
            
            <tag> XOR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c453. TOI2003 第二題：疊羅漢</title>
      <link href="/2018/08/31/zj-c453/"/>
      <url>/2018/08/31/zj-c453/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-Problem"><a href="#題目-Problem" class="headerlink" title="題目 Problem"></a>題目 Problem</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=c453" target="_blank" rel="noopener">題目連結：https://zerojudge.tw/ShowProblem?problemid=c453</a></p><a id="more"></a><h3 id="敘述-Description"><a href="#敘述-Description" class="headerlink" title="敘述 Description"></a>敘述 Description</h3><p>　　某特技團經常表演疊羅漢的節目。表演時通常在最底層會先站好一排連續的 n 個人，然後在任意連續兩人的肩膀上面便可支撐另一個人站在這兩個人的上一層。在第二層如果有連續兩人的話，當然可繼續往第三層疊上一個人，以此類推。為了增加趣味性，有時會組合出不同的型態展現在觀眾的眼前。舉例來說，如果 n=3，也就是說底層共有 3 個人，那麼就有下列 5 種不同的組合。<br><img src="image.png" srcset="/img/loading.gif" alt><br>　　如果 n=4，也就是說底層共有 4 個人，那麼你也可以列舉一下，便可知道共有下列 14 種不同的組合。現在針對不同的 n 值，請你撰寫一個程式來計算共有幾種不同的組合？</p><h3 id="輸入-Input"><a href="#輸入-Input" class="headerlink" title="輸入 Input"></a>輸入 Input</h3><p>第一行有一個正整數 n，1 ≤ n ≤ 20。</p><h3 id="輸出-Output"><a href="#輸出-Output" class="headerlink" title="輸出 Output"></a>輸出 Output</h3><p>請輸出共有幾種不同的組合。</p><h3 id="範例輸入-Sample-Input"><a href="#範例輸入-Sample-Input" class="headerlink" title="範例輸入 Sample Input"></a>範例輸入 Sample Input</h3><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-comment">//範例輸入一</span><span class="hljs-number">3</span><span class="hljs-comment">//範例輸入二</span><span class="hljs-number">4</span></code></pre></div><h3 id="範例輸出-Sample-Output"><a href="#範例輸出-Sample-Output" class="headerlink" title="範例輸出 Sample Output"></a>範例輸出 Sample Output</h3><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-comment">//範例輸出一</span><span class="hljs-number">5</span><span class="hljs-comment">//範例輸出二</span><span class="hljs-number">14</span></code></pre></div><h3 id="提示-Hint"><a href="#提示-Hint" class="headerlink" title="提示 Hint"></a>提示 Hint</h3><h2 id="題解-Solution"><a href="#題解-Solution" class="headerlink" title="題解 Solution"></a>題解 Solution</h2><h3 id="動態規劃-Dynamic-Programming"><a href="#動態規劃-Dynamic-Programming" class="headerlink" title="動態規劃 Dynamic Programming"></a>動態規劃 Dynamic Programming</h3><p>感覺這題很DP，不過 oToToT 大大真的寫出了 DP 算式：</p><p>令$dp[i][j]$代表第$i$斜排他的長度要是$j$時的方法數<br>$dp[i][j]=\sum_{k=j-1}^{i-1}dp[i-1][k]$<br>因為會發現若是這裡要擺長度為$j$那前面最少要擺長度$j-1$，所以可以枚舉前一斜條擺放的數量來計算這個狀態的方法數。<br>而對於n個斜條的總方法數，只要再枚舉最後一斜條有幾個人就好了。</p><p>我果然很低端，回我的當下我真的看不懂QQ</p><h3 id="卡特蘭數-Catalan-Number"><a href="#卡特蘭數-Catalan-Number" class="headerlink" title="卡特蘭數 Catalan Number"></a>卡特蘭數 Catalan Number</h3><p>（至於為何會想到卡特蘭數，請滑到後記）<br>這是我理解的版本，<a href="https://johnmayhk.wordpress.com/2014/02/03/cn/" target="_blank" rel="noopener">連結</a></p><p>$C(0,0)=1$<br>$C(1,1)=C(0,0)$<br>$C(2,2)=C(1,0)+C(1,1)$<br>$C(3,3)=C(2,0)+C(2,1)+C(2,2)$<br>$C(4,4)=C(3,0)+C(3,1)+C(3,2)+C(3,3)$<br>…<br>$C(N,N)=C(N-1,0)+C(N-1,1)+…+C(N-1,N-1)$</p><p>可以把這些想像成</p><p>$N$層上面$N-1-0$層有幾種組合<br>$N$層上面$N-1-1$層有幾種組合<br>…<br>$N$層上面$N-1-i$層有幾種組合<br>…<br>$N$層上面$1$層有幾種組合<br>$N$層上面$0$層有幾種組合<br>再加上 涂家銘 大大提供給我參考的圖：<br><img src="sol_1.jpg" srcset="/img/loading.gif" alt><br><img src="sol_2.jpg" srcset="/img/loading.gif" alt><br>稍微轉一轉是不是就變成高中熟悉的最短路徑組合呢？</p><h3 id="程式碼-Accepted-Code"><a href="#程式碼-Accepted-Code" class="headerlink" title="程式碼 Accepted Code"></a>程式碼 Accepted Code</h3><div class="hljs"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _ ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);</span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> <span class="hljs-title">catalan</span><span class="hljs-params">(<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> N)</span></span>&#123;<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> n2=<span class="hljs-number">2</span>*N;<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> ans=<span class="hljs-number">1</span>;<span class="hljs-keyword">for</span>(<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> i=N+<span class="hljs-number">1</span>;i&lt;=n2;i++)&#123;ans*=i;ans/=(i-N);&#125;ans/=(N+<span class="hljs-number">1</span>);<span class="hljs-keyword">return</span> ans;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;_<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> query[<span class="hljs-number">21</span>]=&#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>&#125;;<span class="hljs-keyword">for</span>(<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;<span class="hljs-number">21</span>;i++)&#123;query[i]=catalan(i);&#125;<span class="hljs-keyword">int</span> N;<span class="hljs-built_in">cin</span>&gt;&gt;N;<span class="hljs-built_in">cout</span>&lt;&lt;query[N]&lt;&lt;<span class="hljs-string">'\n'</span>;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></div><h2 id="後記-Afterword"><a href="#後記-Afterword" class="headerlink" title="後記 Afterword"></a>後記 Afterword</h2><p>這題我一開始打開 Google 搜尋「0 1 2 5 14 OEIS」（我認為0位是0種，所以一開始打0）作弊開好開滿<br>但沒想到一打開就是傳說中的<a href="https://oeis.org/A000108" target="_blank" rel="noopener">卡特蘭數列</a><br>只有聽到「清大程式解題營」的 <a href="https://lfswang.github.io/" target="_blank" rel="noopener">旺陽學長</a> 提到過<br>但沒有寫過這種題目</p><p>不過 涂家銘 大大表示：</p><p>幫社團出練習賽題目其中一題用 DP 做會 TLE<br>（練習賽也太狠了吧QQ）</p><p>的確，畢竟這題的最大值$N=20$，如果$N$更大，有機會爆 TLE 了</p>]]></content>
      
      
      <categories>
          
          <category> 解題區 </category>
          
          <category> 解題報告書 - ZeroJudge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 建表 </tag>
            
            <tag> 卡特蘭數 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>a625. 5. Overhanging Cards</title>
      <link href="/2018/08/30/zj-a625/"/>
      <url>/2018/08/30/zj-a625/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-Problem"><a href="#題目-Problem" class="headerlink" title="題目 Problem"></a>題目 Problem</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=a625" target="_blank" rel="noopener">題目連結：https://zerojudge.tw/ShowProblem?problemid=a625</a></p><a id="more"></a><h3 id="敘述-Description"><a href="#敘述-Description" class="headerlink" title="敘述 Description"></a>敘述 Description</h3><p>你可以把一疊的卡片凸出桌子的邊緣多遠呢？如果你有一張卡，你最大可以凸出卡片長度的一半。有兩張卡時，你可以把上面那張的一半凸出下面的那張，而下面的那張則有三分之一凸出桌子的邊緣，總凸出長度則為$ 1/2 + 1/3 = 5/6 $張卡片長度。總之，你可以把$ n $張卡片凸出$ 1/2 + 1/3 + 1/4 + … + 1/(n+1) $張卡片的長度，其中最上面那張凸出$ 1/2 $於第二張的外面，第二張凸出$ 1/3 $於第三張的外面，第三張凸出$ 1/4$，以此類推，最底下那張則凸出$ 1/(n+1)$。如下圖所示。<br><img src="image.jpg" srcset="/img/loading.gif" alt></p><h3 id="輸入-Input"><a href="#輸入-Input" class="headerlink" title="輸入 Input"></a>輸入 Input</h3><p>每筆測資一行，含有一個正浮點數 c (代表所要凸出的總長度)，其值最小為 0.01，最大為 5.20；這個數含有三位數字。</p><h3 id="輸出-Output"><a href="#輸出-Output" class="headerlink" title="輸出 Output"></a>輸出 Output</h3><p>輸出要達成所需的凸出長度最少需要幾張卡片。請參照範例輸出的格式。</p><h3 id="範例輸入-Sample-Input"><a href="#範例輸入-Sample-Input" class="headerlink" title="範例輸入 Sample Input"></a>範例輸入 Sample Input</h3><div class="hljs"><pre><code class="hljs undefined">1<span class="hljs-selector-class">.00</span>3<span class="hljs-selector-class">.71</span>0<span class="hljs-selector-class">.04</span>5<span class="hljs-selector-class">.19</span></code></pre></div><h3 id="範例輸出-Sample-Output"><a href="#範例輸出-Sample-Output" class="headerlink" title="範例輸出 Sample Output"></a>範例輸出 Sample Output</h3><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-symbol">3 </span>card(s)<span class="hljs-symbol">61 </span>card(s)<span class="hljs-symbol">1 </span>card(s)<span class="hljs-symbol">273 </span>card(s)</code></pre></div><h3 id="提示-Hint"><a href="#提示-Hint" class="headerlink" title="提示 Hint"></a>提示 Hint</h3><h2 id="題解-Solution"><a href="#題解-Solution" class="headerlink" title="題解 Solution"></a>題解 Solution</h2><p>$1$張卡片長度為$1/2$<br>$2$張卡片長度為$1/2+1/3$<br>$3$張卡片長度為$1/2+1/3+1/4$<br>$…$以此類推$…$<br>$n$張卡片長度為$1/2+1/3+1/4+…+1/(n+1)$<br>先建表，最大卡片數頂多$276$張<br>最後再用二分搜尋找卡片數就好</p><h3 id="程式碼-Accepted-Code"><a href="#程式碼-Accepted-Code" class="headerlink" title="程式碼 Accepted Code"></a>程式碼 Accepted Code</h3><div class="hljs"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _ ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);</span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;_<span class="hljs-keyword">double</span> query[<span class="hljs-number">277</span>]=&#123;<span class="hljs-number">0</span>&#125;,a=<span class="hljs-number">0.0</span>;<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;a&lt;=<span class="hljs-number">5.20</span>;i++)&#123;a+=(<span class="hljs-number">1.0</span>/(i+<span class="hljs-number">1</span>));query[i]=a;&#125;<span class="hljs-keyword">double</span> enter;<span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span>&gt;&gt;enter)&#123;<span class="hljs-keyword">int</span> l=<span class="hljs-number">0</span>,r=<span class="hljs-number">277</span>;<span class="hljs-keyword">while</span>(l+<span class="hljs-number">1</span>&lt;r)&#123;<span class="hljs-keyword">int</span> mid=(l+r)/<span class="hljs-number">2</span>;<span class="hljs-keyword">if</span>(enter&gt;query[mid])&#123;l=mid;&#125;<span class="hljs-keyword">else</span>&#123;r=mid;&#125;&#125;<span class="hljs-built_in">cout</span>&lt;&lt;l+<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-string">" card(s)"</span>&lt;&lt;<span class="hljs-string">'\n'</span>;&#125;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></div><h2 id="後記-Afterword"><a href="#後記-Afterword" class="headerlink" title="後記 Afterword"></a>後記 Afterword</h2><p>這一題在 ICPC Live Archive 跟 POJ 找得到<br>ICPC Live Archive 題目代碼：<a href="https://icpcarchive.ecs.baylor.edu/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=295" target="_blank" rel="noopener">2294 - Hangover</a><br>POJ 題目代碼：<a href="http://poj.org/problem?id=1003" target="_blank" rel="noopener">1003 - Hangover</a><br>ZeroJudge 拿到 AC 之後<br>就到 ICPC Live Archive 繳交，但直接被 WA 掉<br>我還以為是我二分搜寫錯<br>但仔細看了它們的 Input 後<br>才知道程式輸入$0.00$才會結束<br>改完這題就 AC 了</p>]]></content>
      
      
      <categories>
          
          <category> 解題區 </category>
          
          <category> 解題報告書 - ZeroJudge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 建表 </tag>
            
            <tag> 二分搜 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c700. 壞掉的隊列(queue)</title>
      <link href="/2018/08/29/zj-c700/"/>
      <url>/2018/08/29/zj-c700/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-Problem"><a href="#題目-Problem" class="headerlink" title="題目 Problem"></a>題目 Problem</h2><p><a href="https://zerojudge.tw/ShowProblem?problemid=c700" target="_blank" rel="noopener">題目連結：https://zerojudge.tw/ShowProblem?problemid=c700</a></p><a id="more"></a><h3 id="敘述-Description"><a href="#敘述-Description" class="headerlink" title="敘述 Description"></a>敘述 Description</h3><p>「測資中有若干行輸入，請你實作 queue 的幾種操作：</p><p>push $X(0≤X&lt;2^{32})$: 將 $X$ 加入隊列</p><p>pop: 輸出隊列最前方的數字並刪除，你可以假設此時隊列不是空的」 </p><p>小W本來想隨便寫寫交差了事，卻發現 STL 的 queue 壞了！</p><p>再看看題目，原來底下附註一行小字：請用兩個 stack 完成這題。</p><p>於是小W希望你能用以下代號寫一張紙條告訴他該怎麼做。</p><p>1: 讀入 push X 並將 X 放到堆疊一</p><p>2: 讀入 push X 並將 X 放到堆疊二</p><p>3: 讀入 pop ，將堆疊一頂端的元素輸出並刪除</p><p>4: 讀入 pop ，將堆疊二頂端的元素輸出並刪除</p><p>5: 將堆疊一頂端的元素取出並放至堆疊二</p><p>6: 將堆疊二頂端的元素取出並放至堆疊一</p><p>如果取出元素時堆疊為空或者讀入 push/pop 的順序與輸入測資不符，你會害小W拿到一個WA。</p><h3 id="輸入-Input"><a href="#輸入-Input" class="headerlink" title="輸入 Input"></a>輸入 Input</h3><p>見題目和範例。</p><h3 id="輸出-Output"><a href="#輸出-Output" class="headerlink" title="輸出 Output"></a>輸出 Output</h3><p>輸出一行你要傳給小W的內容。</p><h3 id="範例輸入-Sample-Input"><a href="#範例輸入-Sample-Input" class="headerlink" title="範例輸入 Sample Input"></a>範例輸入 Sample Input</h3><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-keyword">push</span> <span class="hljs-number">111</span><span class="hljs-keyword">push</span> <span class="hljs-number">222</span><span class="hljs-keyword">pop</span><span class="hljs-keyword">pop</span></code></pre></div><h3 id="範例輸出-Sample-Output"><a href="#範例輸出-Sample-Output" class="headerlink" title="範例輸出 Sample Output"></a>範例輸出 Sample Output</h3><div class="hljs"><pre><code class="hljs undefined"><span class="hljs-section">範例輸出一:</span>1234<span class="hljs-section">範例輸出二:</span>12544<span class="hljs-section">範例輸出三:</span>1143<span class="hljs-section">範例輸出四:</span>1313<span class="hljs-section">範例輸出五:</span>1133</code></pre></div><h3 id="提示-Hint"><a href="#提示-Hint" class="headerlink" title="提示 Hint"></a>提示 Hint</h3><p>輸入至多 100000 行。</p><p>以範例輸入而言，範例輸出一、二會拿到AC。</p><p>範例輸出三會拿到WA，因為操作4時堆疊二是空的。</p><p>範例輸出四也會拿到WA，因為輸入順序是push-&gt;push-&gt;pop-&gt;pop，但是1313的操作分別為push-&gt;pop-&gt;push-&gt;pop。</p><p>範例輸出五的操作過程完全合法，但依據先進先出的原則，111應該比222早離開queue，若以1133的方式操作，222將比111早輸出，所以會拿到WA。</p><h2 id="題解-Solution"><a href="#題解-Solution" class="headerlink" title="題解 Solution"></a>題解 Solution</h2><p>第一篇解題報告書就給這題啦！</p><p><a href="https://www.hackerrank.com/challenges/queue-using-two-stacks/problem" target="_blank" rel="noopener">Hackerrank</a> 可以找到這個問題（這題就是要強制你使用 Stack）<br>實作 Queue 需要用到兩個 Stack<br>分別命名為$S1$跟$S2$</p><p>$S1$用來記錄輸入的東西<br>$S2$就是把$S1$的內容顛倒過來</p><p>$push$的時候先放入$S1$裡面<br>$pop$的時候先檢查$S2$有沒有東西</p><p>如果有，$S2$的頂端$pop$掉<br>如果沒有，先$S1$<strong>所有內容</strong>$pop$到$S2$，再讓$S2$的頂端$pop$掉</p><p>了解怎麼用 Stack 實作 Queue 就可以回到這題</p><hr><p>依照上面的做法，可以使用代號$1,4,5$的組合或$2,3,6$的組合來完成這題<br>並且用$2$個整數紀錄$2$個 Stack 的內容數量<br>分別命名為$x_1$跟$x_2$</p><p>如果要$push$，就輸出$1$，把$x_1+1$<br>如果要$pop$，就先檢查$x_2$是否大於$0$</p><p>如果有，就輸出$4$，把$x_2-1$<br>如果沒有，先輸出$x_1$個$5$，讓$x_2$加上$x_1$，並且把$x_1$歸零，再輸出$4$，把$x_2-1$</p><p>這樣就可以來寫 Code 啦！</p><h3 id="程式碼-Accepted-Code"><a href="#程式碼-Accepted-Code" class="headerlink" title="程式碼 Accepted Code"></a>程式碼 Accepted Code</h3><div class="hljs"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _ ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);</span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;_<span class="hljs-built_in">string</span> enter;<span class="hljs-keyword">int</span> total1=<span class="hljs-number">0</span>,total2=<span class="hljs-number">0</span>;<span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span>&gt;&gt;enter)&#123;<span class="hljs-keyword">if</span>(enter==<span class="hljs-string">"push"</span>)&#123;<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> a;<span class="hljs-built_in">cin</span>&gt;&gt;a;total1++;<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-number">1</span>;&#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-keyword">if</span>(total2)&#123;<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-number">4</span>;total2--;&#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;total1;i++)&#123;<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-number">5</span>;&#125;total2+=total1;<span class="hljs-keyword">if</span>(total2)&#123;<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-number">4</span>;total2--;&#125;total1=<span class="hljs-number">0</span>;&#125;&#125;&#125;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></div><h2 id="後記-Afterword"><a href="#後記-Afterword" class="headerlink" title="後記 Afterword"></a>後記 Afterword</h2><p>這題有沒有其他解法？<br>這題是 Special Judge，應該是有吧，但……我沒有想到<br>上面這個解法是算簡單啦<br>如果有更好的解法，我還會再寫上去啦！</p>]]></content>
      
      
      <categories>
          
          <category> 解題區 </category>
          
          <category> 解題報告書 - ZeroJudge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Stack </tag>
            
            <tag> Queue </tag>
            
            <tag> Special Judge </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello Hexo! Test By Jerry Yang</title>
      <link href="/2018/08/26/hello-world/"/>
      <url>/2018/08/26/hello-world/</url>
      
        <content type="html"><![CDATA[<p>先恭喜亞運台灣 🇹🇼 奪得金牌<br><a href="https://www.net-chinese.com.tw/nc/" target="_blank" rel="noopener">網路中文</a> 也很大方的免費讓人註冊.tw</p><a id="more"></a><p>於是，這個 <a href="https://blog.yangjerry.tw">Blog</a> 就誕生了<br>第一次用 <a href="https://hexo.io/zh-tw/" target="_blank" rel="noopener">Hexo</a> 架設<br>用 Markdown 來寫寫看瑣碎事</p><p>首頁嘛……晚點再把坑補上<br>寫到這裡就這樣吧！之後再補</p>]]></content>
      
      
      <categories>
          
          <category> Hello World </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
